;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 28.8.2018. 14:15:43
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0xFFFC2000  	536936444
0x0004	0x43150000  	17173
0x0008	0x42CD0000  	17101
0x000C	0x42CD0000  	17101
0x0010	0x42CD0000  	17101
0x0014	0x42CD0000  	17101
0x0018	0x42CD0000  	17101
0x001C	0x42CD0000  	17101
0x0020	0x42CD0000  	17101
0x0024	0x42CD0000  	17101
0x0028	0x42CD0000  	17101
0x002C	0x42CD0000  	17101
0x0030	0x42CD0000  	17101
0x0034	0x42CD0000  	17101
0x0038	0x42CD0000  	17101
0x003C	0x42CD0000  	17101
0x0040	0x42CD0000  	17101
0x0044	0x42CD0000  	17101
0x0048	0x42CD0000  	17101
0x004C	0x42CD0000  	17101
0x0050	0x42CD0000  	17101
0x0054	0x42CD0000  	17101
0x0058	0x42CD0000  	17101
0x005C	0x42CD0000  	17101
0x0060	0x42CD0000  	17101
0x0064	0x42CD0000  	17101
0x0068	0x42CD0000  	17101
0x006C	0x42CD0000  	17101
0x0070	0x42CD0000  	17101
0x0074	0x42CD0000  	17101
0x0078	0x42CD0000  	17101
0x007C	0x42CD0000  	17101
0x0080	0x42CD0000  	17101
0x0084	0x42CD0000  	17101
0x0088	0x42CD0000  	17101
0x008C	0x42CD0000  	17101
0x0090	0x42CD0000  	17101
0x0094	0x42CD0000  	17101
0x0098	0x42CD0000  	17101
0x009C	0x42CD0000  	17101
0x00A0	0x42CD0000  	17101
0x00A4	0x42CD0000  	17101
0x00A8	0x42CD0000  	17101
0x00AC	0x42CD0000  	17101
0x00B0	0x42CD0000  	17101
0x00B4	0x42CD0000  	17101
0x00B8	0x42CD0000  	17101
0x00BC	0x42CD0000  	17101
0x00C0	0x42CD0000  	17101
0x00C4	0x42CD0000  	17101
0x00C8	0x42CD0000  	17101
0x00CC	0x42CD0000  	17101
0x00D0	0x42CD0000  	17101
0x00D4	0x42CD0000  	17101
0x00D8	0x42CD0000  	17101
0x00DC	0x42CD0000  	17101
0x00E0	0x42CD0000  	17101
0x00E4	0x42CD0000  	17101
0x00E8	0x42CD0000  	17101
0x00EC	0x42CD0000  	17101
0x00F0	0x42CD0000  	17101
0x00F4	0x42CD0000  	17101
0x00F8	0x42CD0000  	17101
0x00FC	0x42CD0000  	17101
; end of ____SysVT
_main:
;Click_IR_Grid2_MSP.c, 78 :: 		void main()
0x4314	0xF000F810  BL	17208
0x4318	0xF7FFFFDC  BL	17108
0x431C	0xF000FEDE  BL	20700
0x4320	0xF7FFFFEE  BL	17152
0x4324	0xF000FE8C  BL	20544
;Click_IR_Grid2_MSP.c, 80 :: 		systemInit();
0x4328	0xF7FFFF12  BL	_systemInit+0
;Click_IR_Grid2_MSP.c, 81 :: 		applicationInit();
0x432C	0xF7FFFEE6  BL	_applicationInit+0
;Click_IR_Grid2_MSP.c, 83 :: 		while (1)
L_main10:
;Click_IR_Grid2_MSP.c, 85 :: 		applicationTask();
0x4330	0xF7FFFF36  BL	_applicationTask+0
;Click_IR_Grid2_MSP.c, 86 :: 		}
0x4334	0xE7FC    B	L_main10
;Click_IR_Grid2_MSP.c, 87 :: 		}
L_end_main:
L__main_end_loop:
0x4336	0xE7FE    B	L__main_end_loop
; end of _main
___CC2DW:
;__Lib_System_MSP432P.c, 39 :: 		
0x40E8	0xB081    SUB	SP, SP, #4
;__Lib_System_MSP432P.c, 41 :: 		
L_loopDW:
;__Lib_System_MSP432P.c, 42 :: 		
0x40EA	0xF81C9B01  LDRB	R9, [R12], #1
;__Lib_System_MSP432P.c, 43 :: 		
0x40EE	0xF80B9B01  STRB	R9, [R11], #1
;__Lib_System_MSP432P.c, 44 :: 		
0x40F2	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_MSP432P.c, 45 :: 		
0x40F6	0xD1F8    BNE	L_loopDW
;__Lib_System_MSP432P.c, 47 :: 		
L_end___CC2DW:
0x40F8	0xB001    ADD	SP, SP, #4
0x40FA	0x4770    BX	LR
; end of ___CC2DW
___FillZeros:
;__Lib_System_MSP432P.c, 82 :: 		
0x4290	0xB081    SUB	SP, SP, #4
;__Lib_System_MSP432P.c, 84 :: 		
0x4292	0xF04F0900  MOV	R9, #0
;__Lib_System_MSP432P.c, 85 :: 		
0x4296	0xF04F0C00  MOV	R12, #0
;__Lib_System_MSP432P.c, 86 :: 		
0x429A	0xEBBD0F0A  CMP	SP, R10, LSL #0
;__Lib_System_MSP432P.c, 87 :: 		
0x429E	0xDC04    BGT	L_loopFZs
;__Lib_System_MSP432P.c, 88 :: 		
0x42A0	0xEBBD0F0B  CMP	SP, R11, LSL #0
;__Lib_System_MSP432P.c, 89 :: 		
0x42A4	0xDB01    BLT	L_loopFZs
;__Lib_System_MSP432P.c, 90 :: 		
0x42A6	0x46D4    MOV	R12, R10
;__Lib_System_MSP432P.c, 91 :: 		
0x42A8	0x46EA    MOV	R10, SP
;__Lib_System_MSP432P.c, 92 :: 		
L_loopFZs:
;__Lib_System_MSP432P.c, 93 :: 		
0x42AA	0xF84B9B04  STR	R9, [R11], #4
;__Lib_System_MSP432P.c, 94 :: 		
0x42AE	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_MSP432P.c, 95 :: 		
0x42B2	0xD1FA    BNE	L_loopFZs
;__Lib_System_MSP432P.c, 96 :: 		
0x42B4	0xEBBC0F0A  CMP	R12, R10, LSL #0
;__Lib_System_MSP432P.c, 97 :: 		
0x42B8	0xDD05    BLE	L_norep
;__Lib_System_MSP432P.c, 98 :: 		
0x42BA	0x46E2    MOV	R10, R12
;__Lib_System_MSP432P.c, 99 :: 		
0x42BC	0xF8D9B000  LDR	R11, [R9, #0]
;__Lib_System_MSP432P.c, 100 :: 		
0x42C0	0xF10B0B04  ADD	R11, R11, #4
;__Lib_System_MSP432P.c, 101 :: 		
0x42C4	0xE7F1    B	L_loopFZs
;__Lib_System_MSP432P.c, 102 :: 		
L_norep:
;__Lib_System_MSP432P.c, 105 :: 		
L_end___FillZeros:
0x42C6	0xB001    ADD	SP, SP, #4
0x42C8	0x4770    BX	LR
; end of ___FillZeros
_systemInit:
;Click_IR_Grid2_MSP.c, 35 :: 		void systemInit()
0x4150	0xB081    SUB	SP, SP, #4
0x4152	0xF8CDE000  STR	LR, [SP, #0]
;Click_IR_Grid2_MSP.c, 37 :: 		Delay_80us();
0x4156	0xF7FFFFBB  BL	_Delay_80us+0
;Click_IR_Grid2_MSP.c, 38 :: 		mikrobus_i2cInit( _MIKROBUS1, &_IRGRID2_I2C_CFG[0] );
0x415A	0x480E    LDR	R0, [PC, #56]
0x415C	0x4601    MOV	R1, R0
0x415E	0x2000    MOVS	R0, #0
0x4160	0xF7FFFF38  BL	_mikrobus_i2cInit+0
;Click_IR_Grid2_MSP.c, 39 :: 		mikrobus_logInit( _MIKROBUS2, 9600 );
0x4164	0xF2425180  MOVW	R1, #9600
0x4168	0x2001    MOVS	R0, #1
0x416A	0xF7FFFF15  BL	_mikrobus_logInit+0
;Click_IR_Grid2_MSP.c, 40 :: 		mikrobus_logWrite(" --- System Init --- ", _LOG_LINE);
0x416E	0x480A    LDR	R0, [PC, #40]
0x4170	0x2102    MOVS	R1, #2
0x4172	0xF7FFFF5F  BL	_mikrobus_logWrite+0
;Click_IR_Grid2_MSP.c, 41 :: 		Delay_ms( 100 );
0x4176	0xF644777D  MOVW	R7, #20349
0x417A	0xF2C00712  MOVT	R7, #18
0x417E	0xBF00    NOP
L_systemInit0:
0x4180	0x1E7F    SUBS	R7, R7, #1
0x4182	0xD1FD    BNE	L_systemInit0
0x4184	0xBF00    NOP
0x4186	0xBF00    NOP
0x4188	0xBF00    NOP
0x418A	0xBF00    NOP
;Click_IR_Grid2_MSP.c, 42 :: 		}
L_end_systemInit:
0x418C	0xF8DDE000  LDR	LR, [SP, #0]
0x4190	0xB001    ADD	SP, SP, #4
0x4192	0x4770    BX	LR
0x4194	0x170C0000  	__IRGRID2_I2C_CFG+0
0x4198	0x00642000  	?lstr1_Click_IR_Grid2_MSP+0
; end of _systemInit
_Delay_80us:
;__Lib_Delays_MSP432.c, 29 :: 		void Delay_80us() {
;__Lib_Delays_MSP432.c, 30 :: 		Delay_us(78);
0x40D0	0xF24037A5  MOVW	R7, #933
0x40D4	0xF2C00700  MOVT	R7, #0
0x40D8	0xBF00    NOP
0x40DA	0xBF00    NOP
L_Delay_80us8:
0x40DC	0x1E7F    SUBS	R7, R7, #1
0x40DE	0xD1FD    BNE	L_Delay_80us8
0x40E0	0xBF00    NOP
0x40E2	0xBF00    NOP
0x40E4	0xBF00    NOP
;__Lib_Delays_MSP432.c, 31 :: 		}
L_end_Delay_80us:
0x40E6	0x4770    BX	LR
; end of _Delay_80us
_mikrobus_i2cInit:
;clicker_2_MSP432.c, 221 :: 		T_mikrobus_ret mikrobus_i2cInit(T_mikrobus_soc bus, const uint32_t *cfg)
; cfg start address is: 4 (R1)
; bus start address is: 0 (R0)
0x3FD4	0xB081    SUB	SP, SP, #4
0x3FD6	0xF8CDE000  STR	LR, [SP, #0]
; cfg end address is: 4 (R1)
; bus end address is: 0 (R0)
; bus start address is: 0 (R0)
; cfg start address is: 4 (R1)
;clicker_2_MSP432.c, 223 :: 		switch( bus )
0x3FDA	0xE009    B	L_mikrobus_i2cInit83
; bus end address is: 0 (R0)
;clicker_2_MSP432.c, 226 :: 		case _MIKROBUS1 : return _i2cInit_1( cfg );
L_mikrobus_i2cInit85:
0x3FDC	0x4608    MOV	R0, R1
; cfg end address is: 4 (R1)
0x3FDE	0xF7FFF96B  BL	clicker_2_MSP432__i2cInit_1+0
0x3FE2	0xE00A    B	L_end_mikrobus_i2cInit
;clicker_2_MSP432.c, 229 :: 		case _MIKROBUS2 : return _i2cInit_2( cfg );
L_mikrobus_i2cInit86:
; cfg start address is: 4 (R1)
0x3FE4	0x4608    MOV	R0, R1
; cfg end address is: 4 (R1)
0x3FE6	0xF7FFFE63  BL	clicker_2_MSP432__i2cInit_2+0
0x3FEA	0xE006    B	L_end_mikrobus_i2cInit
;clicker_2_MSP432.c, 243 :: 		default : return _MIKROBUS_ERR_BUS;
L_mikrobus_i2cInit87:
0x3FEC	0x2001    MOVS	R0, #1
0x3FEE	0xE004    B	L_end_mikrobus_i2cInit
;clicker_2_MSP432.c, 244 :: 		}
L_mikrobus_i2cInit83:
; cfg start address is: 4 (R1)
; bus start address is: 0 (R0)
0x3FF0	0x2800    CMP	R0, #0
0x3FF2	0xD0F3    BEQ	L_mikrobus_i2cInit85
0x3FF4	0x2801    CMP	R0, #1
0x3FF6	0xD0F5    BEQ	L_mikrobus_i2cInit86
; bus end address is: 0 (R0)
; cfg end address is: 4 (R1)
0x3FF8	0xE7F8    B	L_mikrobus_i2cInit87
;clicker_2_MSP432.c, 247 :: 		}
L_end_mikrobus_i2cInit:
0x3FFA	0xF8DDE000  LDR	LR, [SP, #0]
0x3FFE	0xB001    ADD	SP, SP, #4
0x4000	0x4770    BX	LR
; end of _mikrobus_i2cInit
clicker_2_MSP432__i2cInit_1:
;__c2_msp432_i2c.c, 27 :: 		static T_mikrobus_ret _i2cInit_1(const uint32_t* cfg)
; cfg start address is: 0 (R0)
0x32B8	0xB081    SUB	SP, SP, #4
0x32BA	0xF8CDE000  STR	LR, [SP, #0]
; cfg end address is: 0 (R0)
; cfg start address is: 0 (R0)
;__c2_msp432_i2c.c, 29 :: 		I2C1_Init_Advanced((unsigned long) cfg[0],(unsigned long) cfg[1], &_GPIO_MODULE_I2CB1_C1213 );
0x32BE	0x1D01    ADDS	R1, R0, #4
0x32C0	0x680A    LDR	R2, [R1, #0]
0x32C2	0x6801    LDR	R1, [R0, #0]
; cfg end address is: 0 (R0)
0x32C4	0x4608    MOV	R0, R1
0x32C6	0x4611    MOV	R1, R2
0x32C8	0x4A03    LDR	R2, [PC, #12]
0x32CA	0xF7FFFEA5  BL	_I2C1_Init_Advanced+0
;__c2_msp432_i2c.c, 30 :: 		return _MIKROBUS_OK;
0x32CE	0x2000    MOVS	R0, __MIKROBUS_OK
;__c2_msp432_i2c.c, 31 :: 		}
L_end__i2cInit_1:
0x32D0	0xF8DDE000  LDR	LR, [SP, #0]
0x32D4	0xB001    ADD	SP, SP, #4
0x32D6	0x4770    BX	LR
0x32D8	0x4D900000  	__GPIO_MODULE_I2CB1_C1213+0
; end of clicker_2_MSP432__i2cInit_1
_I2C1_Init_Advanced:
;__Lib_I2C_MSP.c, 539 :: 		
; module start address is: 8 (R2)
; clockSource start address is: 4 (R1)
; I2C_ClockSpeed start address is: 0 (R0)
0x3018	0xB081    SUB	SP, SP, #4
0x301A	0xF8CDE000  STR	LR, [SP, #0]
; module end address is: 8 (R2)
; clockSource end address is: 4 (R1)
; I2C_ClockSpeed end address is: 0 (R0)
; I2C_ClockSpeed start address is: 0 (R0)
; clockSource start address is: 4 (R1)
; module start address is: 8 (R2)
;__Lib_I2C_MSP.c, 540 :: 		
0x301E	0x4613    MOV	R3, R2
; module end address is: 8 (R2)
0x3020	0x460A    MOV	R2, R1
; clockSource end address is: 4 (R1)
0x3022	0x4601    MOV	R1, R0
; I2C_ClockSpeed end address is: 0 (R0)
0x3024	0x4803    LDR	R0, [PC, #12]
0x3026	0xF7FEFB7F  BL	__Lib_I2C_MSP_I2Cx_Init_Advanced+0
;__Lib_I2C_MSP.c, 541 :: 		
L_end_I2C1_Init_Advanced:
0x302A	0xF8DDE000  LDR	LR, [SP, #0]
0x302E	0xB001    ADD	SP, SP, #4
0x3030	0x4770    BX	LR
0x3032	0xBF00    NOP
0x3034	0x24004000  	EUSCI_B1_UCB1CTLW0+0
; end of _I2C1_Init_Advanced
__Lib_I2C_MSP_I2Cx_Init_Advanced:
;__Lib_I2C_MSP.c, 740 :: 		
; module start address is: 12 (R3)
; I2C_BASE start address is: 0 (R0)
0x1728	0xB087    SUB	SP, SP, #28
0x172A	0xF8CDE000  STR	LR, [SP, #0]
0x172E	0x4684    MOV	R12, R0
0x1730	0x9105    STR	R1, [SP, #20]
0x1732	0x9206    STR	R2, [SP, #24]
; module end address is: 12 (R3)
; I2C_BASE end address is: 0 (R0)
; I2C_BASE start address is: 48 (R12)
; module start address is: 12 (R3)
;__Lib_I2C_MSP.c, 745 :: 		
0x1734	0x4618    MOV	R0, R3
; module end address is: 12 (R3)
0x1736	0xF7FFFCBB  BL	_GPIO_Alternate_Function_Enable+0
;__Lib_I2C_MSP.c, 747 :: 		
0x173A	0x4660    MOV	R0, R12
0x173C	0xF7FFFD02  BL	__Lib_I2C_MSP_I2C_disableModule+0
;__Lib_I2C_MSP.c, 749 :: 		
0x1740	0x9906    LDR	R1, [SP, #24]
0x1742	0x4660    MOV	R0, R12
0x1744	0xF7FFFD20  BL	__Lib_I2C_MSP_I2C_SetClockSource+0
;__Lib_I2C_MSP.c, 750 :: 		
0x1748	0xF8BC5000  LDRH	R5, [R12, #0]
0x174C	0xF6407401  MOVW	R4, #3841
0x1750	0xEA450404  ORR	R4, R5, R4, LSL #0
0x1754	0xF8AC4000  STRH	R4, [R12, #0]
;__Lib_I2C_MSP.c, 752 :: 		
0x1758	0xAC01    ADD	R4, SP, #4
0x175A	0x4620    MOV	R0, R4
0x175C	0xF7FFFE34  BL	_CS_GetClocksFrequency+0
;__Lib_I2C_MSP.c, 753 :: 		
0x1760	0x9C06    LDR	R4, [SP, #24]
0x1762	0x2C40    CMP	R4, #64
0x1764	0xD105    BNE	L___Lib_I2C_MSP_I2Cx_Init_Advanced103
;__Lib_I2C_MSP.c, 754 :: 		
0x1766	0x9D05    LDR	R5, [SP, #20]
0x1768	0x9C01    LDR	R4, [SP, #4]
0x176A	0xFBB4F4F5  UDIV	R4, R4, R5
; preScalarValue start address is: 0 (R0)
0x176E	0xB2A0    UXTH	R0, R4
; preScalarValue end address is: 0 (R0)
0x1770	0xE009    B	L___Lib_I2C_MSP_I2Cx_Init_Advanced104
L___Lib_I2C_MSP_I2Cx_Init_Advanced103:
;__Lib_I2C_MSP.c, 755 :: 		
0x1772	0x9C06    LDR	R4, [SP, #24]
0x1774	0x2C80    CMP	R4, #128
0x1776	0xD105    BNE	L___Lib_I2C_MSP_I2Cx_Init_Advanced105
;__Lib_I2C_MSP.c, 756 :: 		
0x1778	0x9D05    LDR	R5, [SP, #20]
0x177A	0x9C04    LDR	R4, [SP, #16]
0x177C	0xFBB4F4F5  UDIV	R4, R4, R5
; preScalarValue start address is: 0 (R0)
0x1780	0xB2A0    UXTH	R0, R4
; preScalarValue end address is: 0 (R0)
0x1782	0xE000    B	L___Lib_I2C_MSP_I2Cx_Init_Advanced106
L___Lib_I2C_MSP_I2Cx_Init_Advanced105:
;__Lib_I2C_MSP.c, 758 :: 		
; preScalarValue start address is: 0 (R0)
0x1784	0x2000    MOVS	R0, #0
; preScalarValue end address is: 0 (R0)
L___Lib_I2C_MSP_I2Cx_Init_Advanced106:
; preScalarValue start address is: 0 (R0)
; preScalarValue end address is: 0 (R0)
L___Lib_I2C_MSP_I2Cx_Init_Advanced104:
;__Lib_I2C_MSP.c, 760 :: 		
; preScalarValue start address is: 0 (R0)
0x1786	0xF10C0406  ADD	R4, R12, #6
0x178A	0x8020    STRH	R0, [R4, #0]
; preScalarValue end address is: 0 (R0)
;__Lib_I2C_MSP.c, 762 :: 		
0x178C	0x4C1D    LDR	R4, [PC, #116]
0x178E	0x45A4    CMP	R12, R4
0x1790	0xD106    BNE	L___Lib_I2C_MSP_I2Cx_Init_Advanced107
;__Lib_I2C_MSP.c, 763 :: 		
0x1792	0x4D1D    LDR	R5, [PC, #116]
0x1794	0x4C1D    LDR	R4, [PC, #116]
0x1796	0x6025    STR	R5, [R4, #0]
;__Lib_I2C_MSP.c, 764 :: 		
0x1798	0x4D1D    LDR	R5, [PC, #116]
0x179A	0x4C1E    LDR	R4, [PC, #120]
0x179C	0x6025    STR	R5, [R4, #0]
;__Lib_I2C_MSP.c, 765 :: 		
0x179E	0xE01C    B	L___Lib_I2C_MSP_I2Cx_Init_Advanced108
L___Lib_I2C_MSP_I2Cx_Init_Advanced107:
;__Lib_I2C_MSP.c, 766 :: 		
0x17A0	0x4C1D    LDR	R4, [PC, #116]
0x17A2	0x45A4    CMP	R12, R4
0x17A4	0xD106    BNE	L___Lib_I2C_MSP_I2Cx_Init_Advanced109
;__Lib_I2C_MSP.c, 767 :: 		
0x17A6	0x4D1D    LDR	R5, [PC, #116]
0x17A8	0x4C18    LDR	R4, [PC, #96]
0x17AA	0x6025    STR	R5, [R4, #0]
;__Lib_I2C_MSP.c, 768 :: 		
0x17AC	0x4D1C    LDR	R5, [PC, #112]
0x17AE	0x4C19    LDR	R4, [PC, #100]
0x17B0	0x6025    STR	R5, [R4, #0]
;__Lib_I2C_MSP.c, 769 :: 		
0x17B2	0xE012    B	L___Lib_I2C_MSP_I2Cx_Init_Advanced110
L___Lib_I2C_MSP_I2Cx_Init_Advanced109:
;__Lib_I2C_MSP.c, 770 :: 		
0x17B4	0x4C1B    LDR	R4, [PC, #108]
0x17B6	0x45A4    CMP	R12, R4
0x17B8	0xD106    BNE	L___Lib_I2C_MSP_I2Cx_Init_Advanced111
;__Lib_I2C_MSP.c, 771 :: 		
0x17BA	0x4D1B    LDR	R5, [PC, #108]
0x17BC	0x4C13    LDR	R4, [PC, #76]
0x17BE	0x6025    STR	R5, [R4, #0]
;__Lib_I2C_MSP.c, 772 :: 		
0x17C0	0x4D1A    LDR	R5, [PC, #104]
0x17C2	0x4C14    LDR	R4, [PC, #80]
0x17C4	0x6025    STR	R5, [R4, #0]
;__Lib_I2C_MSP.c, 773 :: 		
0x17C6	0xE008    B	L___Lib_I2C_MSP_I2Cx_Init_Advanced112
L___Lib_I2C_MSP_I2Cx_Init_Advanced111:
;__Lib_I2C_MSP.c, 774 :: 		
0x17C8	0x4C19    LDR	R4, [PC, #100]
0x17CA	0x45A4    CMP	R12, R4
0x17CC	0xD105    BNE	L___Lib_I2C_MSP_I2Cx_Init_Advanced113
;__Lib_I2C_MSP.c, 775 :: 		
0x17CE	0x4D19    LDR	R5, [PC, #100]
0x17D0	0x4C0E    LDR	R4, [PC, #56]
0x17D2	0x6025    STR	R5, [R4, #0]
;__Lib_I2C_MSP.c, 776 :: 		
0x17D4	0x4D18    LDR	R5, [PC, #96]
0x17D6	0x4C0F    LDR	R4, [PC, #60]
0x17D8	0x6025    STR	R5, [R4, #0]
;__Lib_I2C_MSP.c, 777 :: 		
L___Lib_I2C_MSP_I2Cx_Init_Advanced113:
L___Lib_I2C_MSP_I2Cx_Init_Advanced112:
L___Lib_I2C_MSP_I2Cx_Init_Advanced110:
L___Lib_I2C_MSP_I2Cx_Init_Advanced108:
;__Lib_I2C_MSP.c, 779 :: 		
0x17DA	0xF2400101  MOVW	R1, #1
0x17DE	0x4660    MOV	R0, R12
0x17E0	0xF7FFFCDE  BL	__Lib_I2C_MSP_I2C_setMode+0
;__Lib_I2C_MSP.c, 781 :: 		
0x17E4	0x4660    MOV	R0, R12
0x17E6	0xF7FFFCC7  BL	__Lib_I2C_MSP_I2C_enableModule+0
;__Lib_I2C_MSP.c, 783 :: 		
0x17EA	0x2103    MOVS	R1, #3
0x17EC	0x4660    MOV	R0, R12
0x17EE	0xF7FFFCB1  BL	__Lib_I2C_MSP_I2C_clearInterruptFlag+0
;__Lib_I2C_MSP.c, 784 :: 		
0x17F2	0x2102    MOVS	R1, #2
0x17F4	0x4660    MOV	R0, R12
; I2C_BASE end address is: 48 (R12)
0x17F6	0xF7FFFCB7  BL	__Lib_I2C_MSP_I2C_enableInterrupt+0
;__Lib_I2C_MSP.c, 785 :: 		
L_end_I2Cx_Init_Advanced:
0x17FA	0xF8DDE000  LDR	LR, [SP, #0]
0x17FE	0xB007    ADD	SP, SP, #28
0x1800	0x4770    BX	LR
0x1802	0xBF00    NOP
0x1804	0x20004000  	EUSCI_B0_UCB0CTLW0+0
0x1808	0x13A50000  	_I2C0_Read+0
0x180C	0x37942000  	_I2C_Read_Ptr+0
0x1810	0x15290000  	_I2C0_Write+0
0x1814	0x37982000  	_I2C_Write_Ptr+0
0x1818	0x24004000  	EUSCI_B1_UCB1CTLW0+0
0x181C	0x11F50000  	_I2C1_Read+0
0x1820	0x14950000  	_I2C1_Write+0
0x1824	0x28004000  	EUSCI_B2_UCB2CTLW0+0
0x1828	0x11D10000  	_I2C2_Read+0
0x182C	0x14DD0000  	_I2C2_Write+0
0x1830	0x2C004000  	EUSCI_B3_UCB3CTLW0+0
0x1834	0x12190000  	_I2C3_Read+0
0x1838	0x14B90000  	_I2C3_Write+0
; end of __Lib_I2C_MSP_I2Cx_Init_Advanced
_CS_GetClocksFrequency:
;__Lib_System_MSP432P.c, 586 :: 		
; CS_Clocks start address is: 0 (R0)
0x13C8	0xB082    SUB	SP, SP, #8
0x13CA	0xF8CDE000  STR	LR, [SP, #0]
0x13CE	0x4604    MOV	R4, R0
; CS_Clocks end address is: 0 (R0)
; CS_Clocks start address is: 16 (R4)
;__Lib_System_MSP432P.c, 589 :: 		
0x13D0	0x4928    LDR	R1, [PC, #160]
0x13D2	0x6809    LDR	R1, [R1, #0]
0x13D4	0xF40161E0  AND	R1, R1, #1792
0x13D8	0x0A09    LSRS	R1, R1, #8
; lsource start address is: 0 (R0)
0x13DA	0x4608    MOV	R0, R1
;__Lib_System_MSP432P.c, 590 :: 		
0x13DC	0x4925    LDR	R1, [PC, #148]
0x13DE	0x6809    LDR	R1, [R1, #0]
0x13E0	0xF00161E0  AND	R1, R1, #117440512
0x13E4	0x0E09    LSRS	R1, R1, #24
; ldivider start address is: 8 (R2)
0x13E6	0x460A    MOV	R2, R1
;__Lib_System_MSP432P.c, 591 :: 		
0x13E8	0x4621    MOV	R1, R4
0x13EA	0x9101    STR	R1, [SP, #4]
0x13EC	0x4611    MOV	R1, R2
; ldivider end address is: 8 (R2)
; lsource end address is: 0 (R0)
0x13EE	0xF7FFF95B  BL	__Lib_System_MSP432P_CS_ComputeClockFrequency+0
0x13F2	0x9901    LDR	R1, [SP, #4]
0x13F4	0x6008    STR	R0, [R1, #0]
;__Lib_System_MSP432P.c, 593 :: 		
0x13F6	0x491F    LDR	R1, [PC, #124]
0x13F8	0x6809    LDR	R1, [R1, #0]
0x13FA	0xF0010170  AND	R1, R1, #112
0x13FE	0x0909    LSRS	R1, R1, #4
; lsource start address is: 0 (R0)
0x1400	0x4608    MOV	R0, R1
;__Lib_System_MSP432P.c, 594 :: 		
0x1402	0x491C    LDR	R1, [PC, #112]
0x1404	0x6809    LDR	R1, [R1, #0]
0x1406	0xF40101E0  AND	R1, R1, #7340032
0x140A	0x0D09    LSRS	R1, R1, #20
; ldivider start address is: 8 (R2)
0x140C	0x460A    MOV	R2, R1
;__Lib_System_MSP432P.c, 595 :: 		
0x140E	0xF2040108  ADDW	R1, R4, #8
0x1412	0x9101    STR	R1, [SP, #4]
0x1414	0x4611    MOV	R1, R2
; ldivider end address is: 8 (R2)
; lsource end address is: 0 (R0)
0x1416	0xF7FFF947  BL	__Lib_System_MSP432P_CS_ComputeClockFrequency+0
0x141A	0x9901    LDR	R1, [SP, #4]
0x141C	0x6008    STR	R0, [R1, #0]
;__Lib_System_MSP432P.c, 597 :: 		
0x141E	0x4915    LDR	R1, [PC, #84]
0x1420	0x6809    LDR	R1, [R1, #0]
0x1422	0xF0010170  AND	R1, R1, #112
0x1426	0x0909    LSRS	R1, R1, #4
; lsource start address is: 0 (R0)
0x1428	0x4608    MOV	R0, R1
;__Lib_System_MSP432P.c, 598 :: 		
0x142A	0x4912    LDR	R1, [PC, #72]
0x142C	0x6809    LDR	R1, [R1, #0]
0x142E	0xF00141E0  AND	R1, R1, #1879048192
0x1432	0x0F09    LSRS	R1, R1, #28
; ldivider start address is: 8 (R2)
0x1434	0x460A    MOV	R2, R1
;__Lib_System_MSP432P.c, 599 :: 		
0x1436	0xF204010C  ADDW	R1, R4, #12
0x143A	0x9101    STR	R1, [SP, #4]
0x143C	0x4611    MOV	R1, R2
; ldivider end address is: 8 (R2)
; lsource end address is: 0 (R0)
0x143E	0xF7FFF933  BL	__Lib_System_MSP432P_CS_ComputeClockFrequency+0
0x1442	0x9901    LDR	R1, [SP, #4]
0x1444	0x6008    STR	R0, [R1, #0]
;__Lib_System_MSP432P.c, 601 :: 		
0x1446	0x490B    LDR	R1, [PC, #44]
0x1448	0x6809    LDR	R1, [R1, #0]
0x144A	0xF0010107  AND	R1, R1, #7
; lsource start address is: 0 (R0)
0x144E	0x4608    MOV	R0, R1
;__Lib_System_MSP432P.c, 602 :: 		
0x1450	0x4908    LDR	R1, [PC, #32]
0x1452	0x6809    LDR	R1, [R1, #0]
0x1454	0xF40121E0  AND	R1, R1, #458752
0x1458	0x0C09    LSRS	R1, R1, #16
; ldivider start address is: 8 (R2)
0x145A	0x460A    MOV	R2, R1
;__Lib_System_MSP432P.c, 603 :: 		
0x145C	0x1D21    ADDS	R1, R4, #4
; CS_Clocks end address is: 16 (R4)
0x145E	0x9101    STR	R1, [SP, #4]
0x1460	0x4611    MOV	R1, R2
; ldivider end address is: 8 (R2)
; lsource end address is: 0 (R0)
0x1462	0xF7FFF921  BL	__Lib_System_MSP432P_CS_ComputeClockFrequency+0
0x1466	0x9901    LDR	R1, [SP, #4]
0x1468	0x6008    STR	R0, [R1, #0]
;__Lib_System_MSP432P.c, 604 :: 		
L_end_CS_GetClocksFrequency:
0x146A	0xF8DDE000  LDR	LR, [SP, #0]
0x146E	0xB002    ADD	SP, SP, #8
0x1470	0x4770    BX	LR
0x1472	0xBF00    NOP
0x1474	0x04084001  	CS_CSCTL1+0
; end of _CS_GetClocksFrequency
__Lib_System_MSP432P_CS_ComputeClockFrequency:
;__Lib_System_MSP432P.c, 526 :: 		
; divider start address is: 4 (R1)
; source start address is: 0 (R0)
0x06A8	0xB081    SUB	SP, SP, #4
0x06AA	0xF8CDE000  STR	LR, [SP, #0]
0x06AE	0x4602    MOV	R2, R0
; divider end address is: 4 (R1)
; source end address is: 0 (R0)
; source start address is: 8 (R2)
; divider start address is: 4 (R1)
;__Lib_System_MSP432P.c, 529 :: 		
0x06B0	0x4608    MOV	R0, R1
; divider end address is: 4 (R1)
0x06B2	0xF7FFFFDB  BL	__Lib_System_MSP432P_CS_GetDividerValue+0
; calcDivider start address is: 12 (R3)
0x06B6	0xB2C3    UXTB	R3, R0
;__Lib_System_MSP432P.c, 531 :: 		
0x06B8	0xE071    B	L___Lib_System_MSP432P_CS_ComputeClockFrequency48
; source end address is: 8 (R2)
;__Lib_System_MSP432P.c, 533 :: 		
L___Lib_System_MSP432P_CS_ComputeClockFrequency50:
;__Lib_System_MSP432P.c, 534 :: 		
0x06BA	0x4A42    LDR	R2, [PC, #264]
0x06BC	0x6812    LDR	R2, [R2, #0]
0x06BE	0xF0020201  AND	R2, R2, #1
0x06C2	0xB1D2    CBZ	R2, L___Lib_System_MSP432P_CS_ComputeClockFrequency51
;__Lib_System_MSP432P.c, 535 :: 		
0x06C4	0xF2400001  MOVW	R0, #1
0x06C8	0xF7FFFFD8  BL	__Lib_System_MSP432P_CS_ClearInterruptFlag+0
;__Lib_System_MSP432P.c, 536 :: 		
0x06CC	0x4A3D    LDR	R2, [PC, #244]
0x06CE	0x6812    LDR	R2, [R2, #0]
0x06D0	0xF0020201  AND	R2, R2, #1
0x06D4	0xB18A    CBZ	R2, L___Lib_System_MSP432P_CS_ComputeClockFrequency52
;__Lib_System_MSP432P.c, 537 :: 		
0x06D6	0x4A3C    LDR	R2, [PC, #240]
0x06D8	0x6812    LDR	R2, [R2, #0]
0x06DA	0xF4024200  AND	R2, R2, #32768
0x06DE	0xB12A    CBZ	R2, L___Lib_System_MSP432P_CS_ComputeClockFrequency53
;__Lib_System_MSP432P.c, 538 :: 		
0x06E0	0xF44F32FA  MOV	R2, #128000
0x06E4	0xFB92F2F3  SDIV	R2, R2, R3
; calcDivider end address is: 12 (R3)
0x06E8	0x4610    MOV	R0, R2
0x06EA	0xE066    B	L_end_CS_ComputeClockFrequency
L___Lib_System_MSP432P_CS_ComputeClockFrequency53:
;__Lib_System_MSP432P.c, 540 :: 		
; calcDivider start address is: 12 (R3)
0x06EC	0xF2480200  MOVW	R2, #32768
0x06F0	0xFBB2F2F3  UDIV	R2, R2, R3
0x06F4	0xB292    UXTH	R2, R2
; calcDivider end address is: 12 (R3)
0x06F6	0xB290    UXTH	R0, R2
0x06F8	0xE05F    B	L_end_CS_ComputeClockFrequency
;__Lib_System_MSP432P.c, 541 :: 		
L___Lib_System_MSP432P_CS_ComputeClockFrequency52:
;__Lib_System_MSP432P.c, 542 :: 		
; calcDivider start address is: 12 (R3)
L___Lib_System_MSP432P_CS_ComputeClockFrequency51:
;__Lib_System_MSP432P.c, 543 :: 		
0x06FA	0x4A34    LDR	R2, [PC, #208]
0x06FC	0x6812    LDR	R2, [R2, #0]
0x06FE	0xFBB2F2F3  UDIV	R2, R2, R3
; calcDivider end address is: 12 (R3)
0x0702	0x4610    MOV	R0, R2
0x0704	0xE059    B	L_end_CS_ComputeClockFrequency
;__Lib_System_MSP432P.c, 546 :: 		
L___Lib_System_MSP432P_CS_ComputeClockFrequency55:
;__Lib_System_MSP432P.c, 547 :: 		
; calcDivider start address is: 12 (R3)
0x0706	0x4A2F    LDR	R2, [PC, #188]
0x0708	0x6812    LDR	R2, [R2, #0]
0x070A	0xF0020202  AND	R2, R2, #2
0x070E	0xB1D2    CBZ	R2, L___Lib_System_MSP432P_CS_ComputeClockFrequency56
;__Lib_System_MSP432P.c, 548 :: 		
0x0710	0xF2400002  MOVW	R0, #2
0x0714	0xF7FFFFB2  BL	__Lib_System_MSP432P_CS_ClearInterruptFlag+0
;__Lib_System_MSP432P.c, 549 :: 		
0x0718	0x4A2A    LDR	R2, [PC, #168]
0x071A	0x6812    LDR	R2, [R2, #0]
0x071C	0xF0020202  AND	R2, R2, #2
0x0720	0xB18A    CBZ	R2, L___Lib_System_MSP432P_CS_ComputeClockFrequency57
;__Lib_System_MSP432P.c, 550 :: 		
0x0722	0x4A29    LDR	R2, [PC, #164]
0x0724	0x6812    LDR	R2, [R2, #0]
0x0726	0xF4024200  AND	R2, R2, #32768
0x072A	0xB12A    CBZ	R2, L___Lib_System_MSP432P_CS_ComputeClockFrequency58
;__Lib_System_MSP432P.c, 551 :: 		
0x072C	0xF44F32FA  MOV	R2, #128000
0x0730	0xFB92F2F3  SDIV	R2, R2, R3
; calcDivider end address is: 12 (R3)
0x0734	0x4610    MOV	R0, R2
0x0736	0xE040    B	L_end_CS_ComputeClockFrequency
L___Lib_System_MSP432P_CS_ComputeClockFrequency58:
;__Lib_System_MSP432P.c, 553 :: 		
; calcDivider start address is: 12 (R3)
0x0738	0xF2480200  MOVW	R2, #32768
0x073C	0xFBB2F2F3  UDIV	R2, R2, R3
0x0740	0xB292    UXTH	R2, R2
; calcDivider end address is: 12 (R3)
0x0742	0xB290    UXTH	R0, R2
0x0744	0xE039    B	L_end_CS_ComputeClockFrequency
;__Lib_System_MSP432P.c, 554 :: 		
L___Lib_System_MSP432P_CS_ComputeClockFrequency57:
;__Lib_System_MSP432P.c, 555 :: 		
; calcDivider start address is: 12 (R3)
L___Lib_System_MSP432P_CS_ComputeClockFrequency56:
;__Lib_System_MSP432P.c, 556 :: 		
0x0746	0x4A22    LDR	R2, [PC, #136]
0x0748	0x6812    LDR	R2, [R2, #0]
0x074A	0xFBB2F2F3  UDIV	R2, R2, R3
; calcDivider end address is: 12 (R3)
0x074E	0x4610    MOV	R0, R2
0x0750	0xE033    B	L_end_CS_ComputeClockFrequency
;__Lib_System_MSP432P.c, 559 :: 		
L___Lib_System_MSP432P_CS_ComputeClockFrequency60:
;__Lib_System_MSP432P.c, 560 :: 		
; calcDivider start address is: 12 (R3)
0x0752	0x4A20    LDR	R2, [PC, #128]
0x0754	0x6812    LDR	R2, [R2, #0]
0x0756	0xFBB2F2F3  UDIV	R2, R2, R3
; calcDivider end address is: 12 (R3)
0x075A	0x4610    MOV	R0, R2
0x075C	0xE02D    B	L_end_CS_ComputeClockFrequency
;__Lib_System_MSP432P.c, 563 :: 		
L___Lib_System_MSP432P_CS_ComputeClockFrequency61:
;__Lib_System_MSP432P.c, 564 :: 		
; calcDivider start address is: 12 (R3)
0x075E	0x4A1A    LDR	R2, [PC, #104]
0x0760	0x6812    LDR	R2, [R2, #0]
0x0762	0xF4024200  AND	R2, R2, #32768
0x0766	0xB12A    CBZ	R2, L___Lib_System_MSP432P_CS_ComputeClockFrequency62
;__Lib_System_MSP432P.c, 565 :: 		
0x0768	0xF44F32FA  MOV	R2, #128000
0x076C	0xFB92F2F3  SDIV	R2, R2, R3
; calcDivider end address is: 12 (R3)
0x0770	0x4610    MOV	R0, R2
0x0772	0xE022    B	L_end_CS_ComputeClockFrequency
L___Lib_System_MSP432P_CS_ComputeClockFrequency62:
;__Lib_System_MSP432P.c, 567 :: 		
; calcDivider start address is: 12 (R3)
0x0774	0xF2480200  MOVW	R2, #32768
0x0778	0xFBB2F2F3  UDIV	R2, R2, R3
0x077C	0xB292    UXTH	R2, R2
; calcDivider end address is: 12 (R3)
0x077E	0xB290    UXTH	R0, R2
0x0780	0xE01B    B	L_end_CS_ComputeClockFrequency
;__Lib_System_MSP432P.c, 569 :: 		
L___Lib_System_MSP432P_CS_ComputeClockFrequency64:
;__Lib_System_MSP432P.c, 570 :: 		
; calcDivider start address is: 12 (R3)
0x0782	0xF7FFFF27  BL	__Lib_System_MSP432P_CS_getDCOFrequency+0
0x0786	0xFBB0F2F3  UDIV	R2, R0, R3
; calcDivider end address is: 12 (R3)
0x078A	0x4610    MOV	R0, R2
0x078C	0xE015    B	L_end_CS_ComputeClockFrequency
;__Lib_System_MSP432P.c, 572 :: 		
L___Lib_System_MSP432P_CS_ComputeClockFrequency65:
;__Lib_System_MSP432P.c, 573 :: 		
; calcDivider start address is: 12 (R3)
0x078E	0x4A12    LDR	R2, [PC, #72]
0x0790	0x6812    LDR	R2, [R2, #0]
0x0792	0xFBB2F2F3  UDIV	R2, R2, R3
; calcDivider end address is: 12 (R3)
0x0796	0x4610    MOV	R0, R2
0x0798	0xE00F    B	L_end_CS_ComputeClockFrequency
;__Lib_System_MSP432P.c, 575 :: 		
L___Lib_System_MSP432P_CS_ComputeClockFrequency66:
;__Lib_System_MSP432P.c, 576 :: 		
0x079A	0x2000    MOVS	R0, #0
0x079C	0xE00D    B	L_end_CS_ComputeClockFrequency
;__Lib_System_MSP432P.c, 577 :: 		
L___Lib_System_MSP432P_CS_ComputeClockFrequency48:
; calcDivider start address is: 12 (R3)
; source start address is: 8 (R2)
0x079E	0x2A00    CMP	R2, #0
0x07A0	0xF43FAF8B  BEQ	L___Lib_System_MSP432P_CS_ComputeClockFrequency50
0x07A4	0x2A05    CMP	R2, #5
0x07A6	0xD0AE    BEQ	L___Lib_System_MSP432P_CS_ComputeClockFrequency55
0x07A8	0x2A01    CMP	R2, #1
0x07AA	0xD0D2    BEQ	L___Lib_System_MSP432P_CS_ComputeClockFrequency60
0x07AC	0x2A02    CMP	R2, #2
0x07AE	0xD0D6    BEQ	L___Lib_System_MSP432P_CS_ComputeClockFrequency61
0x07B0	0x2A03    CMP	R2, #3
0x07B2	0xD0E6    BEQ	L___Lib_System_MSP432P_CS_ComputeClockFrequency64
0x07B4	0x2A04    CMP	R2, #4
0x07B6	0xD0EA    BEQ	L___Lib_System_MSP432P_CS_ComputeClockFrequency65
; source end address is: 8 (R2)
; calcDivider end address is: 12 (R3)
0x07B8	0xE7EF    B	L___Lib_System_MSP432P_CS_ComputeClockFrequency66
;__Lib_System_MSP432P.c, 578 :: 		
L_end_CS_ComputeClockFrequency:
0x07BA	0xF8DDE000  LDR	LR, [SP, #0]
0x07BE	0xB001    ADD	SP, SP, #4
0x07C0	0x4770    BX	LR
0x07C2	0xBF00    NOP
0x07C4	0x04484001  	CS_CSIFG+0
0x07C8	0x04304001  	CS_CSCLKEN+0
0x07CC	0x37A02000  	__Lib_System_MSP432P_lfxtFreq+0
0x07D0	0x37A42000  	__Lib_System_MSP432P_hfxtFreq+0
0x07D4	0x00982000  	__Lib_System_MSP432P_CS_VLOCLK_FREQUENCY+0
0x07D8	0x009C2000  	__Lib_System_MSP432P_CS_MODCLK_FREQUENCY+0
; end of __Lib_System_MSP432P_CS_ComputeClockFrequency
__Lib_System_MSP432P_CS_GetDividerValue:
;__Lib_System_MSP432P.c, 459 :: 		
; divider start address is: 0 (R0)
0x066C	0xB081    SUB	SP, SP, #4
; divider end address is: 0 (R0)
; divider start address is: 0 (R0)
;__Lib_System_MSP432P.c, 460 :: 		
0x066E	0x2101    MOVS	R1, #1
0x0670	0xB209    SXTH	R1, R1
0x0672	0x4081    LSLS	R1, R0
0x0674	0xB209    SXTH	R1, R1
; divider end address is: 0 (R0)
0x0676	0xB208    SXTH	R0, R1
;__Lib_System_MSP432P.c, 461 :: 		
L_end_CS_GetDividerValue:
0x0678	0xB001    ADD	SP, SP, #4
0x067A	0x4770    BX	LR
; end of __Lib_System_MSP432P_CS_GetDividerValue
__Lib_System_MSP432P_CS_ClearInterruptFlag:
;__Lib_System_MSP432P.c, 469 :: 		
; flags start address is: 0 (R0)
0x067C	0xB081    SUB	SP, SP, #4
; flags end address is: 0 (R0)
; flags start address is: 0 (R0)
;__Lib_System_MSP432P.c, 471 :: 		
0x067E	0x4A07    LDR	R2, [PC, #28]
0x0680	0x4907    LDR	R1, [PC, #28]
0x0682	0x600A    STR	R2, [R1, #0]
;__Lib_System_MSP432P.c, 472 :: 		
0x0684	0x4907    LDR	R1, [PC, #28]
0x0686	0x6809    LDR	R1, [R1, #0]
0x0688	0xEA410200  ORR	R2, R1, R0, LSL #0
; flags end address is: 0 (R0)
0x068C	0x4905    LDR	R1, [PC, #20]
0x068E	0x600A    STR	R2, [R1, #0]
;__Lib_System_MSP432P.c, 474 :: 		
0x0690	0x2201    MOVS	R2, #1
0x0692	0x4903    LDR	R1, [PC, #12]
0x0694	0x600A    STR	R2, [R1, #0]
;__Lib_System_MSP432P.c, 475 :: 		
L_end_CS_ClearInterruptFlag:
0x0696	0xB001    ADD	SP, SP, #4
0x0698	0x4770    BX	LR
0x069A	0xBF00    NOP
0x069C	0x695A0000  	#26970
0x06A0	0x04004001  	CS_CSKEY+0
0x06A4	0x04504001  	CS_CSCLRIFG+0
; end of __Lib_System_MSP432P_CS_ClearInterruptFlag
__Lib_System_MSP432P_CS_getDCOFrequency:
;__Lib_System_MSP432P.c, 483 :: 		
0x05D4	0xB082    SUB	SP, SP, #8
;__Lib_System_MSP432P.c, 486 :: 		
0x05D6	0x4817    LDR	R0, [PC, #92]
0x05D8	0x6800    LDR	R0, [R0, #0]
0x05DA	0xF40021E0  AND	R1, R0, #458752
0x05DE	0xE014    B	L___Lib_System_MSP432P_CS_getDCOFrequency39
;__Lib_System_MSP432P.c, 488 :: 		
L___Lib_System_MSP432P_CS_getDCOFrequency41:
;__Lib_System_MSP432P.c, 489 :: 		
0x05E0	0x4815    LDR	R0, [PC, #84]
0x05E2	0x9001    STR	R0, [SP, #4]
;__Lib_System_MSP432P.c, 490 :: 		
0x05E4	0xE023    B	L___Lib_System_MSP432P_CS_getDCOFrequency40
;__Lib_System_MSP432P.c, 491 :: 		
L___Lib_System_MSP432P_CS_getDCOFrequency42:
;__Lib_System_MSP432P.c, 492 :: 		
0x05E6	0x4815    LDR	R0, [PC, #84]
0x05E8	0x9001    STR	R0, [SP, #4]
;__Lib_System_MSP432P.c, 493 :: 		
0x05EA	0xE020    B	L___Lib_System_MSP432P_CS_getDCOFrequency40
;__Lib_System_MSP432P.c, 494 :: 		
L___Lib_System_MSP432P_CS_getDCOFrequency43:
;__Lib_System_MSP432P.c, 495 :: 		
0x05EC	0x4814    LDR	R0, [PC, #80]
0x05EE	0x9001    STR	R0, [SP, #4]
;__Lib_System_MSP432P.c, 496 :: 		
0x05F0	0xE01D    B	L___Lib_System_MSP432P_CS_getDCOFrequency40
;__Lib_System_MSP432P.c, 497 :: 		
L___Lib_System_MSP432P_CS_getDCOFrequency44:
;__Lib_System_MSP432P.c, 498 :: 		
0x05F2	0x4814    LDR	R0, [PC, #80]
0x05F4	0x9001    STR	R0, [SP, #4]
;__Lib_System_MSP432P.c, 499 :: 		
0x05F6	0xE01A    B	L___Lib_System_MSP432P_CS_getDCOFrequency40
;__Lib_System_MSP432P.c, 500 :: 		
L___Lib_System_MSP432P_CS_getDCOFrequency45:
;__Lib_System_MSP432P.c, 501 :: 		
0x05F8	0x4813    LDR	R0, [PC, #76]
0x05FA	0x9001    STR	R0, [SP, #4]
;__Lib_System_MSP432P.c, 502 :: 		
0x05FC	0xE017    B	L___Lib_System_MSP432P_CS_getDCOFrequency40
;__Lib_System_MSP432P.c, 503 :: 		
L___Lib_System_MSP432P_CS_getDCOFrequency46:
;__Lib_System_MSP432P.c, 504 :: 		
0x05FE	0x4813    LDR	R0, [PC, #76]
0x0600	0x9001    STR	R0, [SP, #4]
;__Lib_System_MSP432P.c, 505 :: 		
0x0602	0xE014    B	L___Lib_System_MSP432P_CS_getDCOFrequency40
;__Lib_System_MSP432P.c, 506 :: 		
L___Lib_System_MSP432P_CS_getDCOFrequency47:
;__Lib_System_MSP432P.c, 507 :: 		
0x0604	0x2000    MOVS	R0, #0
0x0606	0x9001    STR	R0, [SP, #4]
;__Lib_System_MSP432P.c, 508 :: 		
0x0608	0xE011    B	L___Lib_System_MSP432P_CS_getDCOFrequency40
L___Lib_System_MSP432P_CS_getDCOFrequency39:
0x060A	0x2900    CMP	R1, #0
0x060C	0xD0E8    BEQ	L___Lib_System_MSP432P_CS_getDCOFrequency41
0x060E	0xF5B13F80  CMP	R1, #65536
0x0612	0xD0E8    BEQ	L___Lib_System_MSP432P_CS_getDCOFrequency42
0x0614	0xF5B13F00  CMP	R1, #131072
0x0618	0xD0E8    BEQ	L___Lib_System_MSP432P_CS_getDCOFrequency43
0x061A	0xF5B13F40  CMP	R1, #196608
0x061E	0xD0E8    BEQ	L___Lib_System_MSP432P_CS_getDCOFrequency44
0x0620	0xF5B12F80  CMP	R1, #262144
0x0624	0xD0E8    BEQ	L___Lib_System_MSP432P_CS_getDCOFrequency45
0x0626	0xF5B12FA0  CMP	R1, #327680
0x062A	0xD0E8    BEQ	L___Lib_System_MSP432P_CS_getDCOFrequency46
0x062C	0xE7EA    B	L___Lib_System_MSP432P_CS_getDCOFrequency47
L___Lib_System_MSP432P_CS_getDCOFrequency40:
;__Lib_System_MSP432P.c, 510 :: 		
0x062E	0x9801    LDR	R0, [SP, #4]
;__Lib_System_MSP432P.c, 511 :: 		
L_end_CS_getDCOFrequency:
0x0630	0xB002    ADD	SP, SP, #8
0x0632	0x4770    BX	LR
0x0634	0x04044001  	CS_CSCTL0+0
0x0638	0xE3600016  	#1500000
0x063C	0xC6C0002D  	#3000000
0x0640	0x8D80005B  	#6000000
0x0644	0x1B0000B7  	#12000000
0x0648	0x3600016E  	#24000000
0x064C	0x6C0002DC  	#48000000
; end of __Lib_System_MSP432P_CS_getDCOFrequency
_GPIO_Alternate_Function_Enable:
;__Lib_GPIO_MSP.c, 202 :: 		
; module start address is: 0 (R0)
0x10B0	0xB081    SUB	SP, SP, #4
0x10B2	0xF8CDE000  STR	LR, [SP, #0]
; module end address is: 0 (R0)
; module start address is: 0 (R0)
;__Lib_GPIO_MSP.c, 206 :: 		
; cnt start address is: 40 (R10)
0x10B6	0xF2400A00  MOVW	R10, #0
; module end address is: 0 (R0)
; cnt end address is: 40 (R10)
0x10BA	0x4681    MOV	R9, R0
L_GPIO_Alternate_Function_Enable27:
; cnt start address is: 40 (R10)
; module start address is: 36 (R9)
0x10BC	0xF10901D8  ADD	R1, R9, #216
0x10C0	0x7809    LDRB	R1, [R1, #0]
0x10C2	0x458A    CMP	R10, R1
0x10C4	0xD23A    BCS	L_GPIO_Alternate_Function_Enable28
;__Lib_GPIO_MSP.c, 207 :: 		
0x10C6	0x210C    MOVS	R1, #12
0x10C8	0xFB0AF101  MUL	R1, R10, R1
0x10CC	0xEB090101  ADD	R1, R9, R1, LSL #0
; tmpPinDsc start address is: 44 (R11)
0x10D0	0x468B    MOV	R11, R1
;__Lib_GPIO_MSP.c, 209 :: 		
0x10D2	0xF10B0108  ADD	R1, R11, #8
0x10D6	0x7809    LDRB	R1, [R1, #0]
0x10D8	0x291F    CMP	R1, #31
0x10DA	0xD115    BNE	L_GPIO_Alternate_Function_Enable30
;__Lib_GPIO_MSP.c, 210 :: 		
0x10DC	0xF10B0108  ADD	R1, R11, #8
0x10E0	0x7809    LDRB	R1, [R1, #0]
0x10E2	0xB2CC    UXTB	R4, R1
0x10E4	0xF10B0106  ADD	R1, R11, #6
0x10E8	0x8809    LDRH	R1, [R1, #0]
0x10EA	0xB28B    UXTH	R3, R1
0x10EC	0xF10B0104  ADD	R1, R11, #4
0x10F0	0x8809    LDRH	R1, [R1, #0]
0x10F2	0xB28A    UXTH	R2, R1
0x10F4	0xF8DB1000  LDR	R1, [R11, #0]
; tmpPinDsc end address is: 44 (R11)
0x10F8	0x4608    MOV	R0, R1
0x10FA	0xB291    UXTH	R1, R2
0x10FC	0x2200    MOVS	R2, __GPIO_DIR_INPUT
0x10FE	0xB410    PUSH	(R4)
0x1100	0xF7FFFB82  BL	_GPIO_Config+0
0x1104	0xB001    ADD	SP, SP, #4
0x1106	0xE014    B	L_GPIO_Alternate_Function_Enable31
L_GPIO_Alternate_Function_Enable30:
;__Lib_GPIO_MSP.c, 212 :: 		
; tmpPinDsc start address is: 44 (R11)
0x1108	0xF10B0108  ADD	R1, R11, #8
0x110C	0x7809    LDRB	R1, [R1, #0]
0x110E	0xB2CC    UXTB	R4, R1
0x1110	0xF10B0106  ADD	R1, R11, #6
0x1114	0x8809    LDRH	R1, [R1, #0]
0x1116	0xB28B    UXTH	R3, R1
0x1118	0xF10B0104  ADD	R1, R11, #4
0x111C	0x8809    LDRH	R1, [R1, #0]
0x111E	0xB28A    UXTH	R2, R1
0x1120	0xF8DB1000  LDR	R1, [R11, #0]
; tmpPinDsc end address is: 44 (R11)
0x1124	0x4608    MOV	R0, R1
0x1126	0xB291    UXTH	R1, R2
0x1128	0x22FF    MOVS	R2, __GPIO_DIR_NO_CHANGE
0x112A	0xB410    PUSH	(R4)
0x112C	0xF7FFFB6C  BL	_GPIO_Config+0
0x1130	0xB001    ADD	SP, SP, #4
L_GPIO_Alternate_Function_Enable31:
;__Lib_GPIO_MSP.c, 206 :: 		
0x1132	0xF10A0A01  ADD	R10, R10, #1
0x1136	0xFA5FFA8A  UXTB	R10, R10
;__Lib_GPIO_MSP.c, 213 :: 		
; module end address is: 36 (R9)
; cnt end address is: 40 (R10)
0x113A	0xE7BF    B	L_GPIO_Alternate_Function_Enable27
L_GPIO_Alternate_Function_Enable28:
;__Lib_GPIO_MSP.c, 214 :: 		
L_end_GPIO_Alternate_Function_Enable:
0x113C	0xF8DDE000  LDR	LR, [SP, #0]
0x1140	0xB001    ADD	SP, SP, #4
0x1142	0x4770    BX	LR
; end of _GPIO_Alternate_Function_Enable
_GPIO_Config:
;__Lib_GPIO_MSP.c, 112 :: 		
; config start address is: 12 (R3)
; dir start address is: 8 (R2)
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x0808	0xB083    SUB	SP, SP, #12
0x080A	0xF8CDE000  STR	LR, [SP, #0]
0x080E	0xB28D    UXTH	R5, R1
0x0810	0x4601    MOV	R1, R0
0x0812	0xB2D0    UXTB	R0, R2
; config end address is: 12 (R3)
; dir end address is: 8 (R2)
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 4 (R1)
; pin_mask start address is: 20 (R5)
; dir start address is: 0 (R0)
; config start address is: 12 (R3)
; pin_code start address is: 8 (R2)
0x0814	0xF9BD200C  LDRSH	R2, [SP, #12]
;__Lib_GPIO_MSP.c, 117 :: 		
0x0818	0xF0010401  AND	R4, R1, #1
0x081C	0xB114    CBZ	R4, L__GPIO_Config32
;__Lib_GPIO_MSP.c, 118 :: 		
0x081E	0x022F    LSLS	R7, R5, #8
0x0820	0xB2BF    UXTH	R7, R7
; pin_mask end address is: 20 (R5)
; pin_mask start address is: 28 (R7)
; pin_mask end address is: 28 (R7)
0x0822	0xE000    B	L_GPIO_Config0
L__GPIO_Config32:
;__Lib_GPIO_MSP.c, 117 :: 		
0x0824	0xB2AF    UXTH	R7, R5
;__Lib_GPIO_MSP.c, 118 :: 		
L_GPIO_Config0:
;__Lib_GPIO_MSP.c, 120 :: 		
; pin_mask start address is: 28 (R7)
0x0826	0x4C8F    LDR	R4, [PC, #572]
0x0828	0x1B0C    SUB	R4, R1, R4
; port end address is: 4 (R1)
0x082A	0x0964    LSRS	R4, R4, #5
0x082C	0x0165    LSLS	R5, R4, #5
0x082E	0x4C8D    LDR	R4, [PC, #564]
0x0830	0x1964    ADDS	R4, R4, R5
; port start address is: 32 (R8)
0x0832	0x46A0    MOV	R8, R4
;__Lib_GPIO_MSP.c, 123 :: 		
0x0834	0x4C8C    LDR	R4, [PC, #560]
0x0836	0x42A0    CMP	R0, R4
0x0838	0xD107    BNE	L_GPIO_Config1
; dir end address is: 0 (R0)
;__Lib_GPIO_MSP.c, 124 :: 		
0x083A	0xF1080604  ADD	R6, R8, #4
0x083E	0x43FD    MVN	R5, R7
0x0840	0xB2AD    UXTH	R5, R5
0x0842	0x8834    LDRH	R4, [R6, #0]
0x0844	0x402C    ANDS	R4, R5
0x0846	0x8034    STRH	R4, [R6, #0]
0x0848	0xE007    B	L_GPIO_Config2
L_GPIO_Config1:
;__Lib_GPIO_MSP.c, 125 :: 		
; dir start address is: 0 (R0)
0x084A	0x4C88    LDR	R4, [PC, #544]
0x084C	0x42A0    CMP	R0, R4
0x084E	0xD104    BNE	L_GPIO_Config3
; dir end address is: 0 (R0)
;__Lib_GPIO_MSP.c, 126 :: 		
0x0850	0xF1080504  ADD	R5, R8, #4
0x0854	0x882C    LDRH	R4, [R5, #0]
0x0856	0x433C    ORRS	R4, R7
0x0858	0x802C    STRH	R4, [R5, #0]
L_GPIO_Config3:
L_GPIO_Config2:
;__Lib_GPIO_MSP.c, 128 :: 		
0x085A	0xF2400401  MOVW	R4, __GPIO_CFG_RESISTOR_DISABLE
0x085E	0xEA030404  AND	R4, R3, R4, LSL #0
0x0862	0xB2A4    UXTH	R4, R4
0x0864	0xB13C    CBZ	R4, L_GPIO_Config4
;__Lib_GPIO_MSP.c, 129 :: 		
0x0866	0xF1080606  ADD	R6, R8, #6
0x086A	0x43FD    MVN	R5, R7
0x086C	0xB2AD    UXTH	R5, R5
0x086E	0x8834    LDRH	R4, [R6, #0]
0x0870	0x402C    ANDS	R4, R5
0x0872	0x8034    STRH	R4, [R6, #0]
0x0874	0xE00A    B	L_GPIO_Config5
L_GPIO_Config4:
;__Lib_GPIO_MSP.c, 130 :: 		
0x0876	0xF2400402  MOVW	R4, __GPIO_CFG_RESISTOR_ENABLE
0x087A	0xEA030404  AND	R4, R3, R4, LSL #0
0x087E	0xB2A4    UXTH	R4, R4
0x0880	0xB124    CBZ	R4, L_GPIO_Config6
;__Lib_GPIO_MSP.c, 131 :: 		
0x0882	0xF1080506  ADD	R5, R8, #6
0x0886	0x882C    LDRH	R4, [R5, #0]
0x0888	0x433C    ORRS	R4, R7
0x088A	0x802C    STRH	R4, [R5, #0]
L_GPIO_Config6:
L_GPIO_Config5:
;__Lib_GPIO_MSP.c, 133 :: 		
0x088C	0xF2400404  MOVW	R4, __GPIO_CFG_DRIVE_REGULAR
0x0890	0xEA030404  AND	R4, R3, R4, LSL #0
0x0894	0xB2A4    UXTH	R4, R4
0x0896	0xB13C    CBZ	R4, L_GPIO_Config7
;__Lib_GPIO_MSP.c, 134 :: 		
0x0898	0xF1080608  ADD	R6, R8, #8
0x089C	0x43FD    MVN	R5, R7
0x089E	0xB2AD    UXTH	R5, R5
0x08A0	0x8834    LDRH	R4, [R6, #0]
0x08A2	0x402C    ANDS	R4, R5
0x08A4	0x8034    STRH	R4, [R6, #0]
0x08A6	0xE00A    B	L_GPIO_Config8
L_GPIO_Config7:
;__Lib_GPIO_MSP.c, 135 :: 		
0x08A8	0xF2400408  MOVW	R4, __GPIO_CFG_DRIVE_HIGH
0x08AC	0xEA030404  AND	R4, R3, R4, LSL #0
0x08B0	0xB2A4    UXTH	R4, R4
0x08B2	0xB124    CBZ	R4, L_GPIO_Config9
;__Lib_GPIO_MSP.c, 136 :: 		
0x08B4	0xF1080508  ADD	R5, R8, #8
0x08B8	0x882C    LDRH	R4, [R5, #0]
0x08BA	0x433C    ORRS	R4, R7
0x08BC	0x802C    STRH	R4, [R5, #0]
L_GPIO_Config9:
L_GPIO_Config8:
;__Lib_GPIO_MSP.c, 138 :: 		
0x08BE	0xF2400410  MOVW	R4, __GPIO_CFG_INT_LOW2HIGH
0x08C2	0xEA030404  AND	R4, R3, R4, LSL #0
0x08C6	0xB2A4    UXTH	R4, R4
0x08C8	0xB13C    CBZ	R4, L_GPIO_Config10
;__Lib_GPIO_MSP.c, 139 :: 		
0x08CA	0xF1080618  ADD	R6, R8, #24
0x08CE	0x43FD    MVN	R5, R7
0x08D0	0xB2AD    UXTH	R5, R5
0x08D2	0x8834    LDRH	R4, [R6, #0]
0x08D4	0x402C    ANDS	R4, R5
0x08D6	0x8034    STRH	R4, [R6, #0]
0x08D8	0xE00A    B	L_GPIO_Config11
L_GPIO_Config10:
;__Lib_GPIO_MSP.c, 140 :: 		
0x08DA	0xF2400420  MOVW	R4, __GPIO_CFG_INT_HIGH2LOW
0x08DE	0xEA030404  AND	R4, R3, R4, LSL #0
0x08E2	0xB2A4    UXTH	R4, R4
0x08E4	0xB124    CBZ	R4, L_GPIO_Config12
;__Lib_GPIO_MSP.c, 141 :: 		
0x08E6	0xF1080518  ADD	R5, R8, #24
0x08EA	0x882C    LDRH	R4, [R5, #0]
0x08EC	0x433C    ORRS	R4, R7
0x08EE	0x802C    STRH	R4, [R5, #0]
L_GPIO_Config12:
L_GPIO_Config11:
;__Lib_GPIO_MSP.c, 143 :: 		
0x08F0	0xF2400440  MOVW	R4, __GPIO_CFG_INT_DISABLE
0x08F4	0xEA030404  AND	R4, R3, R4, LSL #0
0x08F8	0xB2A4    UXTH	R4, R4
0x08FA	0xB13C    CBZ	R4, L_GPIO_Config13
;__Lib_GPIO_MSP.c, 144 :: 		
0x08FC	0xF108061A  ADD	R6, R8, #26
0x0900	0x43FD    MVN	R5, R7
0x0902	0xB2AD    UXTH	R5, R5
0x0904	0x8834    LDRH	R4, [R6, #0]
0x0906	0x402C    ANDS	R4, R5
0x0908	0x8034    STRH	R4, [R6, #0]
0x090A	0xE00A    B	L_GPIO_Config14
L_GPIO_Config13:
;__Lib_GPIO_MSP.c, 145 :: 		
0x090C	0xF2400480  MOVW	R4, __GPIO_CFG_INT_ENABLE
0x0910	0xEA030404  AND	R4, R3, R4, LSL #0
0x0914	0xB2A4    UXTH	R4, R4
0x0916	0xB124    CBZ	R4, L_GPIO_Config15
;__Lib_GPIO_MSP.c, 146 :: 		
0x0918	0xF108051A  ADD	R5, R8, #26
0x091C	0x882C    LDRH	R4, [R5, #0]
0x091E	0x433C    ORRS	R4, R7
0x0920	0x802C    STRH	R4, [R5, #0]
L_GPIO_Config15:
L_GPIO_Config14:
;__Lib_GPIO_MSP.c, 148 :: 		
0x0922	0xF4037480  AND	R4, R3, #256
0x0926	0xB2A4    UXTH	R4, R4
0x0928	0xB97C    CBNZ	R4, L_GPIO_Config16
; pin_code end address is: 8 (R2)
; config end address is: 12 (R3)
;__Lib_GPIO_MSP.c, 150 :: 		
0x092A	0xF108060A  ADD	R6, R8, #10
0x092E	0x43FD    MVN	R5, R7
0x0930	0xB2AD    UXTH	R5, R5
0x0932	0x8834    LDRH	R4, [R6, #0]
0x0934	0x402C    ANDS	R4, R5
0x0936	0x8034    STRH	R4, [R6, #0]
;__Lib_GPIO_MSP.c, 151 :: 		
0x0938	0xF108060C  ADD	R6, R8, #12
; port end address is: 32 (R8)
0x093C	0x43FD    MVN	R5, R7
0x093E	0xB2AD    UXTH	R5, R5
; pin_mask end address is: 28 (R7)
0x0940	0x8834    LDRH	R4, [R6, #0]
0x0942	0x402C    ANDS	R4, R5
0x0944	0x8034    STRH	R4, [R6, #0]
;__Lib_GPIO_MSP.c, 152 :: 		
0x0946	0x2000    MOVS	R0, #0
0x0948	0xE087    B	L_end_GPIO_Config
;__Lib_GPIO_MSP.c, 153 :: 		
L_GPIO_Config16:
;__Lib_GPIO_MSP.c, 155 :: 		
; config start address is: 12 (R3)
; pin_code start address is: 8 (R2)
; port start address is: 32 (R8)
; pin_mask start address is: 28 (R7)
0x094A	0x2A1F    CMP	R2, #31
0x094C	0xDD01    BLE	L_GPIO_Config17
; pin_mask end address is: 28 (R7)
; port end address is: 32 (R8)
; pin_code end address is: 8 (R2)
; config end address is: 12 (R3)
;__Lib_GPIO_MSP.c, 156 :: 		
0x094E	0x2001    MOVS	R0, #1
0x0950	0xE083    B	L_end_GPIO_Config
L_GPIO_Config17:
;__Lib_GPIO_MSP.c, 160 :: 		
; config start address is: 12 (R3)
; pin_code start address is: 8 (R2)
; port start address is: 32 (R8)
; pin_mask start address is: 28 (R7)
0x0952	0xF7FFFE7D  BL	__Lib_GPIO_MSP_GPIO_PMAP_Unlock+0
;__Lib_GPIO_MSP.c, 161 :: 		
; i start address is: 0 (R0)
0x0956	0x2000    MOVS	R0, #0
; pin_mask end address is: 28 (R7)
; port end address is: 32 (R8)
; i end address is: 0 (R0)
0x0958	0xB2B9    UXTH	R1, R7
0x095A	0xB2C7    UXTB	R7, R0
0x095C	0x4640    MOV	R0, R8
L_GPIO_Config18:
; i start address is: 28 (R7)
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
; port start address is: 0 (R0)
; port end address is: 0 (R0)
; pin_mask start address is: 4 (R1)
; pin_mask end address is: 4 (R1)
; pin_code start address is: 8 (R2)
; pin_code end address is: 8 (R2)
; config start address is: 12 (R3)
; config end address is: 12 (R3)
0x095E	0x2F10    CMP	R7, #16
0x0960	0xF080807A  BCS	L_GPIO_Config19
; port end address is: 0 (R0)
; pin_mask end address is: 4 (R1)
; pin_code end address is: 8 (R2)
; config end address is: 12 (R3)
;__Lib_GPIO_MSP.c, 162 :: 		
; config start address is: 12 (R3)
; pin_code start address is: 8 (R2)
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x0964	0xFA21F407  LSR	R4, R1, R7
0x0968	0xB2A4    UXTH	R4, R4
0x096A	0xF0040401  AND	R4, R4, #1
0x096E	0xB2A4    UXTH	R4, R4
0x0970	0x2C00    CMP	R4, #0
0x0972	0xF000806E  BEQ	L_GPIO_Config21
;__Lib_GPIO_MSP.c, 165 :: 		
0x0976	0xF200060A  ADDW	R6, R0, #10
0x097A	0x43CD    MVN	R5, R1
0x097C	0xB2AD    UXTH	R5, R5
0x097E	0x8834    LDRH	R4, [R6, #0]
0x0980	0x402C    ANDS	R4, R5
0x0982	0x8034    STRH	R4, [R6, #0]
;__Lib_GPIO_MSP.c, 166 :: 		
0x0984	0xF200060C  ADDW	R6, R0, #12
0x0988	0x43CD    MVN	R5, R1
0x098A	0xB2AD    UXTH	R5, R5
0x098C	0x8834    LDRH	R4, [R6, #0]
0x098E	0x402C    ANDS	R4, R5
0x0990	0x8034    STRH	R4, [R6, #0]
;__Lib_GPIO_MSP.c, 168 :: 		
0x0992	0xF4036480  AND	R4, R3, #1024
0x0996	0xB2A4    UXTH	R4, R4
0x0998	0xB12C    CBZ	R4, L_GPIO_Config22
;__Lib_GPIO_MSP.c, 169 :: 		
0x099A	0xF8AD1006  STRH	R1, [SP, #6]
;__Lib_GPIO_MSP.c, 170 :: 		
0x099E	0x2400    MOVS	R4, #0
0x09A0	0xF8AD4008  STRH	R4, [SP, #8]
;__Lib_GPIO_MSP.c, 171 :: 		
0x09A4	0xE00D    B	L_GPIO_Config23
L_GPIO_Config22:
0x09A6	0xF4036400  AND	R4, R3, #2048
0x09AA	0xB2A4    UXTH	R4, R4
0x09AC	0xB12C    CBZ	R4, L_GPIO_Config24
;__Lib_GPIO_MSP.c, 172 :: 		
0x09AE	0x2400    MOVS	R4, #0
0x09B0	0xF8AD4006  STRH	R4, [SP, #6]
;__Lib_GPIO_MSP.c, 173 :: 		
0x09B4	0xF8AD1008  STRH	R1, [SP, #8]
;__Lib_GPIO_MSP.c, 174 :: 		
0x09B8	0xE003    B	L_GPIO_Config25
L_GPIO_Config24:
;__Lib_GPIO_MSP.c, 175 :: 		
0x09BA	0xF8AD1006  STRH	R1, [SP, #6]
;__Lib_GPIO_MSP.c, 176 :: 		
0x09BE	0xF8AD1008  STRH	R1, [SP, #8]
;__Lib_GPIO_MSP.c, 177 :: 		
L_GPIO_Config25:
L_GPIO_Config23:
;__Lib_GPIO_MSP.c, 179 :: 		
0x09C2	0xF200060A  ADDW	R6, R0, #10
0x09C6	0x8835    LDRH	R5, [R6, #0]
0x09C8	0xF8BD4006  LDRH	R4, [SP, #6]
0x09CC	0xEA450404  ORR	R4, R5, R4, LSL #0
0x09D0	0x8034    STRH	R4, [R6, #0]
;__Lib_GPIO_MSP.c, 180 :: 		
0x09D2	0xF200060C  ADDW	R6, R0, #12
0x09D6	0x8835    LDRH	R5, [R6, #0]
0x09D8	0xF8BD4008  LDRH	R4, [SP, #8]
0x09DC	0xEA450404  ORR	R4, R5, R4, LSL #0
0x09E0	0x8034    STRH	R4, [R6, #0]
;__Lib_GPIO_MSP.c, 183 :: 		
0x09E2	0x4C23    LDR	R4, [PC, #140]
0x09E4	0x1B04    SUB	R4, R0, R4
;__Lib_GPIO_MSP.c, 184 :: 		
0x09E6	0x0964    LSRS	R4, R4, #5
0x09E8	0xF8AD4004  STRH	R4, [SP, #4]
;__Lib_GPIO_MSP.c, 186 :: 		
0x09EC	0x4C21    LDR	R4, [PC, #132]
0x09EE	0x42A2    CMP	R2, R4
0x09F0	0xD018    BEQ	L_GPIO_Config26
;__Lib_GPIO_MSP.c, 187 :: 		
0x09F2	0xF8BD4004  LDRH	R4, [SP, #4]
0x09F6	0x00E4    LSLS	R4, R4, #3
0x09F8	0xB2A4    UXTH	R4, R4
0x09FA	0x0065    LSLS	R5, R4, #1
0x09FC	0x4C1E    LDR	R4, [PC, #120]
0x09FE	0x1965    ADDS	R5, R4, R5
0x0A00	0x087C    LSRS	R4, R7, #1
0x0A02	0xB2E4    UXTB	R4, R4
0x0A04	0x0064    LSLS	R4, R4, #1
0x0A06	0x192E    ADDS	R6, R5, R4
0x0A08	0xF0070401  AND	R4, R7, #1
0x0A0C	0xB2E4    UXTB	R4, R4
0x0A0E	0x00E5    LSLS	R5, R4, #3
0x0A10	0xB22D    SXTH	R5, R5
0x0A12	0xF24004FF  MOVW	R4, #255
0x0A16	0x40AC    LSLS	R4, R5
0x0A18	0xB2A4    UXTH	R4, R4
0x0A1A	0x43E5    MVN	R5, R4
0x0A1C	0xB2AD    UXTH	R5, R5
0x0A1E	0x8834    LDRH	R4, [R6, #0]
0x0A20	0x402C    ANDS	R4, R5
0x0A22	0x8034    STRH	R4, [R6, #0]
L_GPIO_Config26:
;__Lib_GPIO_MSP.c, 189 :: 		
0x0A24	0xF8BD4004  LDRH	R4, [SP, #4]
0x0A28	0x00E4    LSLS	R4, R4, #3
0x0A2A	0xB2A4    UXTH	R4, R4
0x0A2C	0x0065    LSLS	R5, R4, #1
0x0A2E	0x4C12    LDR	R4, [PC, #72]
0x0A30	0x1965    ADDS	R5, R4, R5
0x0A32	0x087C    LSRS	R4, R7, #1
0x0A34	0xB2E4    UXTB	R4, R4
0x0A36	0x0064    LSLS	R4, R4, #1
0x0A38	0x192E    ADDS	R6, R5, R4
0x0A3A	0xF0070401  AND	R4, R7, #1
0x0A3E	0xB2E4    UXTB	R4, R4
0x0A40	0x00E5    LSLS	R5, R4, #3
0x0A42	0xB22D    SXTH	R5, R5
0x0A44	0xB294    UXTH	R4, R2
0x0A46	0xFA04F505  LSL	R5, R4, R5
0x0A4A	0xB2AD    UXTH	R5, R5
0x0A4C	0x8834    LDRH	R4, [R6, #0]
0x0A4E	0x432C    ORRS	R4, R5
0x0A50	0x8034    STRH	R4, [R6, #0]
;__Lib_GPIO_MSP.c, 190 :: 		
L_GPIO_Config21:
;__Lib_GPIO_MSP.c, 161 :: 		
0x0A52	0x1C7F    ADDS	R7, R7, #1
0x0A54	0xB2FF    UXTB	R7, R7
;__Lib_GPIO_MSP.c, 191 :: 		
; port end address is: 0 (R0)
; pin_mask end address is: 4 (R1)
; pin_code end address is: 8 (R2)
; config end address is: 12 (R3)
; i end address is: 28 (R7)
0x0A56	0xE782    B	L_GPIO_Config18
L_GPIO_Config19:
;__Lib_GPIO_MSP.c, 193 :: 		
0x0A58	0x2000    MOVS	R0, #0
;__Lib_GPIO_MSP.c, 194 :: 		
L_end_GPIO_Config:
0x0A5A	0xF8DDE000  LDR	LR, [SP, #0]
0x0A5E	0xB003    ADD	SP, SP, #12
0x0A60	0x4770    BX	LR
0x0A62	0xBF00    NOP
0x0A64	0x4C004000  	#1073761280
0x0A68	0x00000000  	__GPIO_DIR_INPUT
0x0A6C	0x00010000  	__GPIO_DIR_OUTPUT
0x0A70	0x4C004000  	DIO_PAIN+0
0x0A74	0x00000000  	__GPIO_PM_NONE
0x0A78	0x50084000  	PMAP_P1MAP01+0
; end of _GPIO_Config
__Lib_GPIO_MSP_GPIO_PMAP_Unlock:
;__Lib_GPIO_MSP.c, 80 :: 		
0x0650	0xB081    SUB	SP, SP, #4
;__Lib_GPIO_MSP.c, 82 :: 		
0x0652	0xF6425152  MOVW	R1, #11602
0x0656	0x4803    LDR	R0, [PC, #12]
0x0658	0x8001    STRH	R1, [R0, #0]
;__Lib_GPIO_MSP.c, 83 :: 		
0x065A	0x2102    MOVS	R1, #2
0x065C	0x4802    LDR	R0, [PC, #8]
0x065E	0x8001    STRH	R1, [R0, #0]
;__Lib_GPIO_MSP.c, 84 :: 		
L_end_GPIO_PMAP_Unlock:
0x0660	0xB001    ADD	SP, SP, #4
0x0662	0x4770    BX	LR
0x0664	0x50004000  	PMAP_PMAPKEYID+0
0x0668	0x50024000  	PMAP_PMAPCTL+0
; end of __Lib_GPIO_MSP_GPIO_PMAP_Unlock
__Lib_I2C_MSP_I2C_disableModule:
;__Lib_I2C_MSP.c, 77 :: 		
; I2C_BASE start address is: 0 (R0)
0x1144	0xB081    SUB	SP, SP, #4
; I2C_BASE end address is: 0 (R0)
; I2C_BASE start address is: 0 (R0)
;__Lib_I2C_MSP.c, 78 :: 		
0x1146	0x2201    MOVS	R2, #1
0x1148	0x8801    LDRH	R1, [R0, #0]
0x114A	0xF3620100  BFI	R1, R2, #0, #1
0x114E	0x8001    STRH	R1, [R0, #0]
; I2C_BASE end address is: 0 (R0)
;__Lib_I2C_MSP.c, 79 :: 		
L_end_I2C_disableModule:
0x1150	0xB001    ADD	SP, SP, #4
0x1152	0x4770    BX	LR
; end of __Lib_I2C_MSP_I2C_disableModule
__Lib_I2C_MSP_I2C_SetClockSource:
;__Lib_I2C_MSP.c, 85 :: 		
; clockSource start address is: 4 (R1)
; I2C_BASE start address is: 0 (R0)
0x1188	0xB081    SUB	SP, SP, #4
; clockSource end address is: 4 (R1)
; I2C_BASE end address is: 0 (R0)
; I2C_BASE start address is: 0 (R0)
; clockSource start address is: 4 (R1)
;__Lib_I2C_MSP.c, 86 :: 		
0x118A	0x8803    LDRH	R3, [R0, #0]
0x118C	0xF64F723F  MOVW	R2, #65343
0x1190	0xEA030202  AND	R2, R3, R2, LSL #0
0x1194	0x8002    STRH	R2, [R0, #0]
;__Lib_I2C_MSP.c, 87 :: 		
0x1196	0x8802    LDRH	R2, [R0, #0]
0x1198	0x430A    ORRS	R2, R1
; clockSource end address is: 4 (R1)
0x119A	0x8002    STRH	R2, [R0, #0]
; I2C_BASE end address is: 0 (R0)
;__Lib_I2C_MSP.c, 88 :: 		
L_end_I2C_SetClockSource:
0x119C	0xB001    ADD	SP, SP, #4
0x119E	0x4770    BX	LR
; end of __Lib_I2C_MSP_I2C_SetClockSource
__Lib_I2C_MSP_I2C_setMode:
;__Lib_I2C_MSP.c, 99 :: 		
; mode start address is: 4 (R1)
; I2C_BASE start address is: 0 (R0)
0x11A0	0xB081    SUB	SP, SP, #4
; mode end address is: 4 (R1)
; I2C_BASE end address is: 0 (R0)
; I2C_BASE start address is: 0 (R0)
; mode start address is: 4 (R1)
;__Lib_I2C_MSP.c, 100 :: 		
0x11A2	0xB28B    UXTH	R3, R1
; mode end address is: 4 (R1)
0x11A4	0x8802    LDRH	R2, [R0, #0]
0x11A6	0xF3631204  BFI	R2, R3, #4, #1
0x11AA	0x8002    STRH	R2, [R0, #0]
; I2C_BASE end address is: 0 (R0)
;__Lib_I2C_MSP.c, 101 :: 		
L_end_I2C_setMode:
0x11AC	0xB001    ADD	SP, SP, #4
0x11AE	0x4770    BX	LR
; end of __Lib_I2C_MSP_I2C_setMode
__Lib_I2C_MSP_I2C_enableModule:
;__Lib_I2C_MSP.c, 81 :: 		
; I2C_BASE start address is: 0 (R0)
0x1178	0xB081    SUB	SP, SP, #4
; I2C_BASE end address is: 0 (R0)
; I2C_BASE start address is: 0 (R0)
;__Lib_I2C_MSP.c, 82 :: 		
0x117A	0x2200    MOVS	R2, #0
0x117C	0x8801    LDRH	R1, [R0, #0]
0x117E	0xF3620100  BFI	R1, R2, #0, #1
0x1182	0x8001    STRH	R1, [R0, #0]
; I2C_BASE end address is: 0 (R0)
;__Lib_I2C_MSP.c, 83 :: 		
L_end_I2C_enableModule:
0x1184	0xB001    ADD	SP, SP, #4
0x1186	0x4770    BX	LR
; end of __Lib_I2C_MSP_I2C_enableModule
__Lib_I2C_MSP_I2C_clearInterruptFlag:
;__Lib_I2C_MSP.c, 103 :: 		
; mask start address is: 4 (R1)
; I2C_BASE start address is: 0 (R0)
0x1154	0xB081    SUB	SP, SP, #4
; mask end address is: 4 (R1)
; I2C_BASE end address is: 0 (R0)
; I2C_BASE start address is: 0 (R0)
; mask start address is: 4 (R1)
;__Lib_I2C_MSP.c, 104 :: 		
0x1156	0xF200042C  ADDW	R4, R0, #44
; I2C_BASE end address is: 0 (R0)
0x115A	0x43CB    MVN	R3, R1
0x115C	0xB29B    UXTH	R3, R3
; mask end address is: 4 (R1)
0x115E	0x8822    LDRH	R2, [R4, #0]
0x1160	0x401A    ANDS	R2, R3
0x1162	0x8022    STRH	R2, [R4, #0]
;__Lib_I2C_MSP.c, 105 :: 		
L_end_I2C_clearInterruptFlag:
0x1164	0xB001    ADD	SP, SP, #4
0x1166	0x4770    BX	LR
; end of __Lib_I2C_MSP_I2C_clearInterruptFlag
__Lib_I2C_MSP_I2C_enableInterrupt:
;__Lib_I2C_MSP.c, 107 :: 		
; mask start address is: 4 (R1)
; I2C_BASE start address is: 0 (R0)
0x1168	0xB081    SUB	SP, SP, #4
; mask end address is: 4 (R1)
; I2C_BASE end address is: 0 (R0)
; I2C_BASE start address is: 0 (R0)
; mask start address is: 4 (R1)
;__Lib_I2C_MSP.c, 108 :: 		
0x116A	0xF200032A  ADDW	R3, R0, #42
; I2C_BASE end address is: 0 (R0)
0x116E	0x881A    LDRH	R2, [R3, #0]
0x1170	0x430A    ORRS	R2, R1
; mask end address is: 4 (R1)
0x1172	0x801A    STRH	R2, [R3, #0]
;__Lib_I2C_MSP.c, 109 :: 		
L_end_I2C_enableInterrupt:
0x1174	0xB001    ADD	SP, SP, #4
0x1176	0x4770    BX	LR
; end of __Lib_I2C_MSP_I2C_enableInterrupt
clicker_2_MSP432__i2cInit_2:
;__c2_msp432_i2c.c, 33 :: 		static T_mikrobus_ret _i2cInit_2(const uint32_t* cfg)
; cfg start address is: 0 (R0)
0x3CB0	0xB081    SUB	SP, SP, #4
0x3CB2	0xF8CDE000  STR	LR, [SP, #0]
; cfg end address is: 0 (R0)
; cfg start address is: 0 (R0)
;__c2_msp432_i2c.c, 35 :: 		I2C1_Init_Advanced((unsigned long) cfg[0],(unsigned long) cfg[1], &_GPIO_MODULE_I2CB1_C1213 );
0x3CB6	0x1D01    ADDS	R1, R0, #4
0x3CB8	0x680A    LDR	R2, [R1, #0]
0x3CBA	0x6801    LDR	R1, [R0, #0]
; cfg end address is: 0 (R0)
0x3CBC	0x4608    MOV	R0, R1
0x3CBE	0x4611    MOV	R1, R2
0x3CC0	0x4A03    LDR	R2, [PC, #12]
0x3CC2	0xF7FFF9A9  BL	_I2C1_Init_Advanced+0
;__c2_msp432_i2c.c, 36 :: 		return _MIKROBUS_OK;
0x3CC6	0x2000    MOVS	R0, __MIKROBUS_OK
;__c2_msp432_i2c.c, 37 :: 		}
L_end__i2cInit_2:
0x3CC8	0xF8DDE000  LDR	LR, [SP, #0]
0x3CCC	0xB001    ADD	SP, SP, #4
0x3CCE	0x4770    BX	LR
0x3CD0	0x4D900000  	__GPIO_MODULE_I2CB1_C1213+0
; end of clicker_2_MSP432__i2cInit_2
_mikrobus_logInit:
;clicker_2_MSP432.c, 282 :: 		T_mikrobus_ret mikrobus_logInit(T_log_bus port, const uint32_t baud)
; baud start address is: 4 (R1)
; port start address is: 0 (R0)
0x3F98	0xB081    SUB	SP, SP, #4
0x3F9A	0xF8CDE000  STR	LR, [SP, #0]
; baud end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; baud start address is: 4 (R1)
;clicker_2_MSP432.c, 284 :: 		switch( port )
0x3F9E	0xE00D    B	L_mikrobus_logInit88
; port end address is: 0 (R0)
;clicker_2_MSP432.c, 287 :: 		case _MIKROBUS1 : return _log_init1( baud );
L_mikrobus_logInit90:
0x3FA0	0x4608    MOV	R0, R1
; baud end address is: 4 (R1)
0x3FA2	0xF7FFFD77  BL	clicker_2_MSP432__log_init1+0
0x3FA6	0xE010    B	L_end_mikrobus_logInit
;clicker_2_MSP432.c, 290 :: 		case _MIKROBUS2: return _log_init2( baud );
L_mikrobus_logInit91:
; baud start address is: 4 (R1)
0x3FA8	0x4608    MOV	R0, R1
; baud end address is: 4 (R1)
0x3FAA	0xF7FFFDED  BL	clicker_2_MSP432__log_init2+0
0x3FAE	0xE00C    B	L_end_mikrobus_logInit
;clicker_2_MSP432.c, 305 :: 		case _LOG_USBUART : return _log_initUart( baud );
L_mikrobus_logInit92:
; baud start address is: 4 (R1)
0x3FB0	0x4608    MOV	R0, R1
; baud end address is: 4 (R1)
0x3FB2	0xF7FFFE1F  BL	clicker_2_MSP432__log_initUart+0
0x3FB6	0xE008    B	L_end_mikrobus_logInit
;clicker_2_MSP432.c, 313 :: 		default : return _MIKROBUS_ERR_BUS;
L_mikrobus_logInit93:
0x3FB8	0x2001    MOVS	R0, #1
0x3FBA	0xE006    B	L_end_mikrobus_logInit
;clicker_2_MSP432.c, 314 :: 		}
L_mikrobus_logInit88:
; baud start address is: 4 (R1)
; port start address is: 0 (R0)
0x3FBC	0x2800    CMP	R0, #0
0x3FBE	0xD0EF    BEQ	L_mikrobus_logInit90
0x3FC0	0x2801    CMP	R0, #1
0x3FC2	0xD0F1    BEQ	L_mikrobus_logInit91
0x3FC4	0x2810    CMP	R0, #16
0x3FC6	0xD0F3    BEQ	L_mikrobus_logInit92
; port end address is: 0 (R0)
; baud end address is: 4 (R1)
0x3FC8	0xE7F6    B	L_mikrobus_logInit93
;clicker_2_MSP432.c, 316 :: 		}
L_end_mikrobus_logInit:
0x3FCA	0xF8DDE000  LDR	LR, [SP, #0]
0x3FCE	0xB001    ADD	SP, SP, #4
0x3FD0	0x4770    BX	LR
; end of _mikrobus_logInit
clicker_2_MSP432__log_init1:
;__c2_msp432_log.c, 23 :: 		static T_mikrobus_ret _log_init1(uint32_t baud)
; baud start address is: 0 (R0)
0x3A94	0xB081    SUB	SP, SP, #4
0x3A96	0xF8CDE000  STR	LR, [SP, #0]
; baud end address is: 0 (R0)
; baud start address is: 0 (R0)
;__c2_msp432_log.c, 25 :: 		UART2_Init( baud );
; baud end address is: 0 (R0)
0x3A9A	0xF7FEF84B  BL	_UART2_Init+0
;__c2_msp432_log.c, 26 :: 		logger = UART2_Write;
0x3A9E	0x4A04    LDR	R2, [PC, #16]
0x3AA0	0x4904    LDR	R1, [PC, #16]
0x3AA2	0x600A    STR	R2, [R1, #0]
;__c2_msp432_log.c, 27 :: 		return 0;
0x3AA4	0x2000    MOVS	R0, #0
;__c2_msp432_log.c, 28 :: 		}
L_end__log_init1:
0x3AA6	0xF8DDE000  LDR	LR, [SP, #0]
0x3AAA	0xB001    ADD	SP, SP, #4
0x3AAC	0x4770    BX	LR
0x3AAE	0xBF00    NOP
0x3AB0	0x2FC50000  	_UART2_Write+0
0x3AB4	0x00A02000  	_logger+0
; end of clicker_2_MSP432__log_init1
_UART2_Init:
;__Lib_UART_MSP.c, 797 :: 		
; baudRate start address is: 0 (R0)
0x1B34	0xB081    SUB	SP, SP, #4
0x1B36	0xF8CDE000  STR	LR, [SP, #0]
0x1B3A	0x4684    MOV	R12, R0
; baudRate end address is: 0 (R0)
; baudRate start address is: 48 (R12)
;__Lib_UART_MSP.c, 798 :: 		
0x1B3C	0x4A0B    LDR	R2, [PC, #44]
0x1B3E	0x490C    LDR	R1, [PC, #48]
0x1B40	0x600A    STR	R2, [R1, #0]
;__Lib_UART_MSP.c, 799 :: 		
0x1B42	0x4A0C    LDR	R2, [PC, #48]
0x1B44	0x490C    LDR	R1, [PC, #48]
0x1B46	0x600A    STR	R2, [R1, #0]
;__Lib_UART_MSP.c, 800 :: 		
0x1B48	0x4A0C    LDR	R2, [PC, #48]
0x1B4A	0x490D    LDR	R1, [PC, #52]
0x1B4C	0x600A    STR	R2, [R1, #0]
;__Lib_UART_MSP.c, 801 :: 		
0x1B4E	0x4A0D    LDR	R2, [PC, #52]
0x1B50	0x490D    LDR	R1, [PC, #52]
0x1B52	0x600A    STR	R2, [R1, #0]
;__Lib_UART_MSP.c, 803 :: 		
0x1B54	0x480D    LDR	R0, [PC, #52]
0x1B56	0xF7FFFAAB  BL	_GPIO_Alternate_Function_Enable+0
;__Lib_UART_MSP.c, 804 :: 		
0x1B5A	0x4661    MOV	R1, R12
; baudRate end address is: 48 (R12)
0x1B5C	0x480C    LDR	R0, [PC, #48]
0x1B5E	0xF7FFFEFD  BL	__Lib_UART_MSP_UARTx_Init+0
;__Lib_UART_MSP.c, 805 :: 		
L_end_UART2_Init:
0x1B62	0xF8DDE000  LDR	LR, [SP, #0]
0x1B66	0xB001    ADD	SP, SP, #4
0x1B68	0x4770    BX	LR
0x1B6A	0xBF00    NOP
0x1B6C	0x2FC50000  	_UART2_Write+0
0x1B70	0x37A82000  	_UART_Wr_Ptr+0
0x1B74	0xFFFFFFFF  	_UART2_Read+0
0x1B78	0x37AC2000  	_UART_Rd_Ptr+0
0x1B7C	0xFFFFFFFF  	_UART2_Data_Ready+0
0x1B80	0x37B02000  	_UART_Rdy_Ptr+0
0x1B84	0xFFFFFFFF  	_UART2_Tx_Idle+0
0x1B88	0x37B42000  	_UART_Tx_Idle_Ptr+0
0x1B8C	0x4AFC0000  	__GPIO_MODULE_UARTA2_B23+0
0x1B90	0x18004000  	EUSCI_A2_UCA2CTLW0+0
; end of _UART2_Init
__Lib_UART_MSP_UARTx_Init:
;__Lib_UART_MSP.c, 295 :: 		
; baudRate start address is: 4 (R1)
; uartBase start address is: 0 (R0)
0x195C	0xB081    SUB	SP, SP, #4
0x195E	0xF8CDE000  STR	LR, [SP, #0]
0x1962	0x4607    MOV	R7, R0
0x1964	0x460C    MOV	R4, R1
; baudRate end address is: 4 (R1)
; uartBase end address is: 0 (R0)
; uartBase start address is: 28 (R7)
; baudRate start address is: 16 (R4)
;__Lib_UART_MSP.c, 297 :: 		
0x1966	0x4638    MOV	R0, R7
0x1968	0xF7FFFDCA  BL	__Lib_UART_MSP_UARTx_Disable+0
;__Lib_UART_MSP.c, 299 :: 		
0x196C	0xF2400180  MOVW	R1, #128
0x1970	0x4638    MOV	R0, R7
0x1972	0xF7FFFDCD  BL	__Lib_UART_MSP_UARTx_SetClockSource+0
;__Lib_UART_MSP.c, 301 :: 		
0x1976	0xF2400100  MOVW	R1, #0
0x197A	0x4638    MOV	R0, R7
0x197C	0xF7FFFD7C  BL	__Lib_UART_MSP_UARTx_SetSB+0
;__Lib_UART_MSP.c, 303 :: 		
0x1980	0xF2400100  MOVW	R1, #0
0x1984	0x4638    MOV	R0, R7
0x1986	0xF7FFFC13  BL	__Lib_UART_MSP_UARTx_SetStopBits+0
;__Lib_UART_MSP.c, 305 :: 		
0x198A	0xF2400100  MOVW	R1, #0
0x198E	0x4638    MOV	R0, R7
0x1990	0xF7FFFB68  BL	__Lib_UART_MSP_UARTx_SetParity+0
;__Lib_UART_MSP.c, 307 :: 		
0x1994	0xF2400100  MOVW	R1, #0
0x1998	0x4638    MOV	R0, R7
0x199A	0xF7FFFB51  BL	__Lib_UART_MSP_UARTx_SetMode+0
;__Lib_UART_MSP.c, 309 :: 		
0x199E	0xF2400100  MOVW	R1, #0
0x19A2	0x4638    MOV	R0, R7
0x19A4	0xF7FFFDDC  BL	__Lib_UART_MSP_UARTx_SetDataLength+0
;__Lib_UART_MSP.c, 311 :: 		
0x19A8	0x4621    MOV	R1, R4
; baudRate end address is: 16 (R4)
0x19AA	0x4638    MOV	R0, R7
0x19AC	0xF7FFFDE8  BL	__Lib_UART_MSP_UARTx_SetBaudRate+0
;__Lib_UART_MSP.c, 313 :: 		
0x19B0	0x4638    MOV	R0, R7
; uartBase end address is: 28 (R7)
0x19B2	0xF7FFFDCB  BL	__Lib_UART_MSP_UARTx_Enable+0
;__Lib_UART_MSP.c, 314 :: 		
L_end_UARTx_Init:
0x19B6	0xF8DDE000  LDR	LR, [SP, #0]
0x19BA	0xB001    ADD	SP, SP, #4
0x19BC	0x4770    BX	LR
; end of __Lib_UART_MSP_UARTx_Init
__Lib_UART_MSP_UARTx_Disable:
;__Lib_UART_MSP.c, 89 :: 		
; uartBase start address is: 0 (R0)
0x1500	0xB081    SUB	SP, SP, #4
; uartBase end address is: 0 (R0)
; uartBase start address is: 0 (R0)
;__Lib_UART_MSP.c, 90 :: 		
0x1502	0x8801    LDRH	R1, [R0, #0]
0x1504	0xF0410101  ORR	R1, R1, #1
0x1508	0x8001    STRH	R1, [R0, #0]
; uartBase end address is: 0 (R0)
;__Lib_UART_MSP.c, 91 :: 		
L_end_UARTx_Disable:
0x150A	0xB001    ADD	SP, SP, #4
0x150C	0x4770    BX	LR
; end of __Lib_UART_MSP_UARTx_Disable
__Lib_UART_MSP_UARTx_SetClockSource:
;__Lib_UART_MSP.c, 114 :: 		
; clockSource start address is: 4 (R1)
; uartBase start address is: 0 (R0)
0x1510	0xB081    SUB	SP, SP, #4
; clockSource end address is: 4 (R1)
; uartBase end address is: 0 (R0)
; uartBase start address is: 0 (R0)
; clockSource start address is: 4 (R1)
;__Lib_UART_MSP.c, 115 :: 		
0x1512	0x8803    LDRH	R3, [R0, #0]
0x1514	0xF64F723F  MOVW	R2, #65343
0x1518	0xEA030202  AND	R2, R3, R2, LSL #0
0x151C	0x8002    STRH	R2, [R0, #0]
;__Lib_UART_MSP.c, 116 :: 		
0x151E	0x8802    LDRH	R2, [R0, #0]
0x1520	0x430A    ORRS	R2, R1
; clockSource end address is: 4 (R1)
0x1522	0x8002    STRH	R2, [R0, #0]
; uartBase end address is: 0 (R0)
;__Lib_UART_MSP.c, 117 :: 		
L_end_UARTx_SetClockSource:
0x1524	0xB001    ADD	SP, SP, #4
0x1526	0x4770    BX	LR
; end of __Lib_UART_MSP_UARTx_SetClockSource
__Lib_UART_MSP_UARTx_SetSB:
;__Lib_UART_MSP.c, 128 :: 		
; sb start address is: 4 (R1)
; uartBase start address is: 0 (R0)
0x1478	0xB081    SUB	SP, SP, #4
; sb end address is: 4 (R1)
; uartBase end address is: 0 (R0)
; uartBase start address is: 0 (R0)
; sb start address is: 4 (R1)
;__Lib_UART_MSP.c, 129 :: 		
0x147A	0xB931    CBNZ	R1, L___Lib_UART_MSP_UARTx_SetSB8
; sb end address is: 4 (R1)
;__Lib_UART_MSP.c, 130 :: 		
0x147C	0x8803    LDRH	R3, [R0, #0]
0x147E	0xF64D72FF  MOVW	R2, #57343
0x1482	0xEA030202  AND	R2, R3, R2, LSL #0
0x1486	0x8002    STRH	R2, [R0, #0]
; uartBase end address is: 0 (R0)
0x1488	0xE002    B	L___Lib_UART_MSP_UARTx_SetSB9
L___Lib_UART_MSP_UARTx_SetSB8:
;__Lib_UART_MSP.c, 132 :: 		
; sb start address is: 4 (R1)
; uartBase start address is: 0 (R0)
0x148A	0x8802    LDRH	R2, [R0, #0]
0x148C	0x430A    ORRS	R2, R1
; sb end address is: 4 (R1)
0x148E	0x8002    STRH	R2, [R0, #0]
; uartBase end address is: 0 (R0)
L___Lib_UART_MSP_UARTx_SetSB9:
;__Lib_UART_MSP.c, 133 :: 		
L_end_UARTx_SetSB:
0x1490	0xB001    ADD	SP, SP, #4
0x1492	0x4770    BX	LR
; end of __Lib_UART_MSP_UARTx_SetSB
__Lib_UART_MSP_UARTx_SetStopBits:
;__Lib_UART_MSP.c, 144 :: 		
; stopBits start address is: 4 (R1)
; uartBase start address is: 0 (R0)
0x11B0	0xB081    SUB	SP, SP, #4
; stopBits end address is: 4 (R1)
; uartBase end address is: 0 (R0)
; uartBase start address is: 0 (R0)
; stopBits start address is: 4 (R1)
;__Lib_UART_MSP.c, 145 :: 		
0x11B2	0xF5B16F00  CMP	R1, #2048
0x11B6	0xD103    BNE	L___Lib_UART_MSP_UARTx_SetStopBits10
;__Lib_UART_MSP.c, 146 :: 		
0x11B8	0x8802    LDRH	R2, [R0, #0]
0x11BA	0x430A    ORRS	R2, R1
; stopBits end address is: 4 (R1)
0x11BC	0x8002    STRH	R2, [R0, #0]
; uartBase end address is: 0 (R0)
0x11BE	0xE005    B	L___Lib_UART_MSP_UARTx_SetStopBits11
L___Lib_UART_MSP_UARTx_SetStopBits10:
;__Lib_UART_MSP.c, 148 :: 		
; uartBase start address is: 0 (R0)
0x11C0	0x8803    LDRH	R3, [R0, #0]
0x11C2	0xF24F72FF  MOVW	R2, #63487
0x11C6	0xEA030202  AND	R2, R3, R2, LSL #0
0x11CA	0x8002    STRH	R2, [R0, #0]
; uartBase end address is: 0 (R0)
L___Lib_UART_MSP_UARTx_SetStopBits11:
;__Lib_UART_MSP.c, 149 :: 		
L_end_UARTx_SetStopBits:
0x11CC	0xB001    ADD	SP, SP, #4
0x11CE	0x4770    BX	LR
; end of __Lib_UART_MSP_UARTx_SetStopBits
__Lib_UART_MSP_UARTx_SetParity:
;__Lib_UART_MSP.c, 161 :: 		
; parity start address is: 4 (R1)
; uartBase start address is: 0 (R0)
0x1064	0xB081    SUB	SP, SP, #4
; parity end address is: 4 (R1)
; uartBase end address is: 0 (R0)
; uartBase start address is: 0 (R0)
; parity start address is: 4 (R1)
;__Lib_UART_MSP.c, 162 :: 		
0x1066	0xE019    B	L___Lib_UART_MSP_UARTx_SetParity12
; parity end address is: 4 (R1)
;__Lib_UART_MSP.c, 163 :: 		
L___Lib_UART_MSP_UARTx_SetParity14:
;__Lib_UART_MSP.c, 164 :: 		
0x1068	0x8803    LDRH	R3, [R0, #0]
0x106A	0xF64772FF  MOVW	R2, #32767
0x106E	0xEA030202  AND	R2, R3, R2, LSL #0
0x1072	0x8002    STRH	R2, [R0, #0]
; uartBase end address is: 0 (R0)
;__Lib_UART_MSP.c, 165 :: 		
0x1074	0xE019    B	L___Lib_UART_MSP_UARTx_SetParity13
;__Lib_UART_MSP.c, 168 :: 		
L___Lib_UART_MSP_UARTx_SetParity15:
;__Lib_UART_MSP.c, 169 :: 		
; parity start address is: 4 (R1)
; uartBase start address is: 0 (R0)
0x1076	0x8802    LDRH	R2, [R0, #0]
0x1078	0xF4424200  ORR	R2, R2, #32768
0x107C	0x8002    STRH	R2, [R0, #0]
;__Lib_UART_MSP.c, 170 :: 		
0x107E	0x8802    LDRH	R2, [R0, #0]
0x1080	0x430A    ORRS	R2, R1
; parity end address is: 4 (R1)
0x1082	0x8002    STRH	R2, [R0, #0]
; uartBase end address is: 0 (R0)
;__Lib_UART_MSP.c, 171 :: 		
0x1084	0xE011    B	L___Lib_UART_MSP_UARTx_SetParity13
;__Lib_UART_MSP.c, 174 :: 		
L___Lib_UART_MSP_UARTx_SetParity16:
;__Lib_UART_MSP.c, 175 :: 		
; uartBase start address is: 0 (R0)
0x1086	0x8802    LDRH	R2, [R0, #0]
0x1088	0xF4424200  ORR	R2, R2, #32768
0x108C	0x8002    STRH	R2, [R0, #0]
;__Lib_UART_MSP.c, 176 :: 		
0x108E	0x8803    LDRH	R3, [R0, #0]
0x1090	0xF64B72FF  MOVW	R2, #49151
0x1094	0xEA030202  AND	R2, R3, R2, LSL #0
0x1098	0x8002    STRH	R2, [R0, #0]
; uartBase end address is: 0 (R0)
;__Lib_UART_MSP.c, 177 :: 		
0x109A	0xE006    B	L___Lib_UART_MSP_UARTx_SetParity13
;__Lib_UART_MSP.c, 179 :: 		
L___Lib_UART_MSP_UARTx_SetParity12:
; parity start address is: 4 (R1)
; uartBase start address is: 0 (R0)
0x109C	0x2900    CMP	R1, #0
0x109E	0xD0E3    BEQ	L___Lib_UART_MSP_UARTx_SetParity14
0x10A0	0xF5B14F80  CMP	R1, #16384
0x10A4	0xD0E7    BEQ	L___Lib_UART_MSP_UARTx_SetParity15
0x10A6	0x2900    CMP	R1, #0
0x10A8	0xD0ED    BEQ	L___Lib_UART_MSP_UARTx_SetParity16
; uartBase end address is: 0 (R0)
; parity end address is: 4 (R1)
L___Lib_UART_MSP_UARTx_SetParity13:
;__Lib_UART_MSP.c, 180 :: 		
L_end_UARTx_SetParity:
0x10AA	0xB001    ADD	SP, SP, #4
0x10AC	0x4770    BX	LR
; end of __Lib_UART_MSP_UARTx_SetParity
__Lib_UART_MSP_UARTx_SetMode:
;__Lib_UART_MSP.c, 191 :: 		
; mode start address is: 4 (R1)
; uartBase start address is: 0 (R0)
0x1040	0xB081    SUB	SP, SP, #4
; mode end address is: 4 (R1)
; uartBase end address is: 0 (R0)
; uartBase start address is: 0 (R0)
; mode start address is: 4 (R1)
;__Lib_UART_MSP.c, 192 :: 		
0x1042	0xF5B17F80  CMP	R1, #256
0x1046	0xD104    BNE	L___Lib_UART_MSP_UARTx_SetMode17
; mode end address is: 4 (R1)
;__Lib_UART_MSP.c, 193 :: 		
0x1048	0x8802    LDRH	R2, [R0, #0]
0x104A	0xF4427280  ORR	R2, R2, #256
0x104E	0x8002    STRH	R2, [R0, #0]
; uartBase end address is: 0 (R0)
0x1050	0xE005    B	L___Lib_UART_MSP_UARTx_SetMode18
L___Lib_UART_MSP_UARTx_SetMode17:
;__Lib_UART_MSP.c, 195 :: 		
; uartBase start address is: 0 (R0)
0x1052	0x8803    LDRH	R3, [R0, #0]
0x1054	0xF64F62FF  MOVW	R2, #65279
0x1058	0xEA030202  AND	R2, R3, R2, LSL #0
0x105C	0x8002    STRH	R2, [R0, #0]
; uartBase end address is: 0 (R0)
L___Lib_UART_MSP_UARTx_SetMode18:
;__Lib_UART_MSP.c, 196 :: 		
L_end_UARTx_SetMode:
0x105E	0xB001    ADD	SP, SP, #4
0x1060	0x4770    BX	LR
; end of __Lib_UART_MSP_UARTx_SetMode
__Lib_UART_MSP_UARTx_SetDataLength:
;__Lib_UART_MSP.c, 207 :: 		
; dataLength start address is: 4 (R1)
; uartBase start address is: 0 (R0)
0x1560	0xB081    SUB	SP, SP, #4
; dataLength end address is: 4 (R1)
; uartBase end address is: 0 (R0)
; uartBase start address is: 0 (R0)
; dataLength start address is: 4 (R1)
;__Lib_UART_MSP.c, 208 :: 		
0x1562	0xF5B15F80  CMP	R1, #4096
0x1566	0xD103    BNE	L___Lib_UART_MSP_UARTx_SetDataLength19
;__Lib_UART_MSP.c, 209 :: 		
0x1568	0x8802    LDRH	R2, [R0, #0]
0x156A	0x430A    ORRS	R2, R1
; dataLength end address is: 4 (R1)
0x156C	0x8002    STRH	R2, [R0, #0]
; uartBase end address is: 0 (R0)
0x156E	0xE005    B	L___Lib_UART_MSP_UARTx_SetDataLength20
L___Lib_UART_MSP_UARTx_SetDataLength19:
;__Lib_UART_MSP.c, 211 :: 		
; uartBase start address is: 0 (R0)
0x1570	0x8803    LDRH	R3, [R0, #0]
0x1572	0xF64E72FF  MOVW	R2, #61439
0x1576	0xEA030202  AND	R2, R3, R2, LSL #0
0x157A	0x8002    STRH	R2, [R0, #0]
; uartBase end address is: 0 (R0)
L___Lib_UART_MSP_UARTx_SetDataLength20:
;__Lib_UART_MSP.c, 212 :: 		
L_end_UARTx_SetDataLength:
0x157C	0xB001    ADD	SP, SP, #4
0x157E	0x4770    BX	LR
; end of __Lib_UART_MSP_UARTx_SetDataLength
__Lib_UART_MSP_UARTx_SetBaudRate:
;__Lib_UART_MSP.c, 240 :: 		
; baudRate start address is: 4 (R1)
; uartBase start address is: 0 (R0)
0x1580	0xB088    SUB	SP, SP, #32
0x1582	0xF8CDE000  STR	LR, [SP, #0]
0x1586	0x4605    MOV	R5, R0
0x1588	0x460E    MOV	R6, R1
; baudRate end address is: 4 (R1)
; uartBase end address is: 0 (R0)
; uartBase start address is: 20 (R5)
; baudRate start address is: 24 (R6)
;__Lib_UART_MSP.c, 250 :: 		
0x158A	0xAA04    ADD	R2, SP, #16
0x158C	0x4610    MOV	R0, R2
0x158E	0xF7FFFF1B  BL	_CS_GetClocksFrequency+0
;__Lib_UART_MSP.c, 252 :: 		
0x1592	0xAA04    ADD	R2, SP, #16
0x1594	0x4611    MOV	R1, R2
0x1596	0x4628    MOV	R0, R5
0x1598	0xF7FFFC6E  BL	__Lib_UART_MSP_UARTx_GetFreq+0
; uartFreq start address is: 0 (R0)
;__Lib_UART_MSP.c, 254 :: 		
0x159C	0xEE000A90  VMOV	S1, R0
0x15A0	0xEEF80A60  VCVT.F32.U32	S1, S1
; uartFreq end address is: 0 (R0)
0x15A4	0xEE006A10  VMOV	S0, R6
0x15A8	0xEEB80A40  VCVT.F32.U32	S0, S0
; baudRate end address is: 24 (R6)
0x15AC	0xEE800A80  VDIV.F32	S0, S1, S0
; Nf start address is: 8 (S2)
0x15B0	0xEEB01A40  VMOV.F32	S2, S0
;__Lib_UART_MSP.c, 256 :: 		
0x15B4	0xAA01    ADD	R2, SP, #4
0x15B6	0x4610    MOV	R0, R2
0x15B8	0xF7FFFCEA  BL	__Lib_UART_MSP__modf+0
;__Lib_UART_MSP.c, 258 :: 		
0x15BC	0xEDDD0A01  VLDR.32	S1, [SP, #4]
0x15C0	0xEEFC0A60  VCVT.U32.F32	S1, S1
0x15C4	0xEE102A90  VMOV	R2, S1
0x15C8	0xB292    UXTH	R2, R2
; idiv start address is: 4 (R1)
0x15CA	0xB291    UXTH	R1, R2
;__Lib_UART_MSP.c, 259 :: 		
0x15CC	0x4A41    LDR	R2, [PC, #260]
0x15CE	0xEE002A90  VMOV	S1, R2
0x15D2	0xEE200A20  VMUL.F32	S0, S0, S1
0x15D6	0xEEBC0A40  VCVT.U32.F32	S0, S0
0x15DA	0xEE100A10  VMOV	R0, S0
0x15DE	0xB280    UXTH	R0, R0
; imod start address is: 0 (R0)
;__Lib_UART_MSP.c, 262 :: 		
0x15E0	0xF2050408  ADDW	R4, R5, #8
0x15E4	0x8823    LDRH	R3, [R4, #0]
0x15E6	0xF64F72FE  MOVW	R2, #65534
0x15EA	0xEA030202  AND	R2, R3, R2, LSL #0
0x15EE	0x8022    STRH	R2, [R4, #0]
;__Lib_UART_MSP.c, 263 :: 		
0x15F0	0x2910    CMP	R1, #16
0x15F2	0xD92E    BLS	L___Lib_UART_MSP_UARTx_SetBaudRate28
; idiv end address is: 4 (R1)
;__Lib_UART_MSP.c, 265 :: 		
0x15F4	0xF2050308  ADDW	R3, R5, #8
0x15F8	0x881A    LDRH	R2, [R3, #0]
0x15FA	0xF0420201  ORR	R2, R2, #1
0x15FE	0x801A    STRH	R2, [R3, #0]
;__Lib_UART_MSP.c, 266 :: 		
0x1600	0xEEB30A00  VMOV.F32	S0, #16
0x1604	0xEE810A00  VDIV.F32	S0, S2, S0
0x1608	0xEEBC0A40  VCVT.U32.F32	S0, S0
0x160C	0xEE102A10  VMOV	R2, S0
0x1610	0xB292    UXTH	R2, R2
0x1612	0xF8AD2008  STRH	R2, [SP, #8]
;__Lib_UART_MSP.c, 267 :: 		
0x1616	0xEEB30A00  VMOV.F32	S0, #16
0x161A	0xEEC10A00  VDIV.F32	S1, S2, S0
0x161E	0xEEB30A00  VMOV.F32	S0, #16
0x1622	0xEE810A00  VDIV.F32	S0, S2, S0
; Nf end address is: 8 (S2)
0x1626	0xEEBC0A40  VCVT.U32.F32	S0, S0
0x162A	0xEE102A10  VMOV	R2, S0
0x162E	0xB292    UXTH	R2, R2
0x1630	0xEE002A10  VMOV	S0, R2
0x1634	0xEEB80A40  VCVT.F32.U32	S0, S0
0x1638	0xEE700AC0  VSUB.F32	S1, S1, S0
0x163C	0xEEB30A00  VMOV.F32	S0, #16
0x1640	0xEE200A80  VMUL.F32	S0, S1, S0
0x1644	0xEEBC0A40  VCVT.U32.F32	S0, S0
0x1648	0xEE102A10  VMOV	R2, S0
0x164C	0xB292    UXTH	R2, R2
0x164E	0xF8AD200A  STRH	R2, [SP, #10]
;__Lib_UART_MSP.c, 268 :: 		
L___Lib_UART_MSP_UARTx_SetBaudRate28:
;__Lib_UART_MSP.c, 270 :: 		
0x1652	0xB920    CBNZ	R0, L___Lib_UART_MSP_UARTx_SetBaudRate29
; imod end address is: 0 (R0)
;__Lib_UART_MSP.c, 271 :: 		
0x1654	0x2200    MOVS	R2, #0
0x1656	0xF8AD200C  STRH	R2, [SP, #12]
0x165A	0x4628    MOV	R0, R5
0x165C	0xE016    B	L___Lib_UART_MSP_UARTx_SetBaudRate30
L___Lib_UART_MSP_UARTx_SetBaudRate29:
;__Lib_UART_MSP.c, 273 :: 		
; i start address is: 16 (R4)
; imod start address is: 0 (R0)
0x165E	0x2401    MOVS	R4, #1
; uartBase end address is: 20 (R5)
; i end address is: 16 (R4)
0x1660	0x4629    MOV	R1, R5
L___Lib_UART_MSP_UARTx_SetBaudRate31:
; i start address is: 16 (R4)
; imod start address is: 0 (R0)
; imod end address is: 0 (R0)
; uartBase start address is: 4 (R1)
0x1662	0x2C24    CMP	R4, #36
0x1664	0xD211    BCS	L___Lib_UART_MSP_UARTx_SetBaudRate32
; imod end address is: 0 (R0)
;__Lib_UART_MSP.c, 274 :: 		
; imod start address is: 0 (R0)
0x1666	0x0063    LSLS	R3, R4, #1
0x1668	0x4A1B    LDR	R2, [PC, #108]
0x166A	0x18D2    ADDS	R2, R2, R3
0x166C	0x8812    LDRH	R2, [R2, #0]
0x166E	0x4290    CMP	R0, R2
0x1670	0xD208    BCS	L___Lib_UART_MSP_UARTx_SetBaudRate34
; imod end address is: 0 (R0)
;__Lib_UART_MSP.c, 275 :: 		
0x1672	0x1E62    SUBS	R2, R4, #1
0x1674	0xB212    SXTH	R2, R2
; i end address is: 16 (R4)
0x1676	0x0053    LSLS	R3, R2, #1
0x1678	0x4A18    LDR	R2, [PC, #96]
0x167A	0x18D2    ADDS	R2, R2, R3
0x167C	0x8812    LDRH	R2, [R2, #0]
0x167E	0xF8AD200C  STRH	R2, [SP, #12]
;__Lib_UART_MSP.c, 276 :: 		
0x1682	0xE002    B	L___Lib_UART_MSP_UARTx_SetBaudRate32
;__Lib_UART_MSP.c, 277 :: 		
L___Lib_UART_MSP_UARTx_SetBaudRate34:
;__Lib_UART_MSP.c, 273 :: 		
; i start address is: 16 (R4)
; imod start address is: 0 (R0)
0x1684	0x1C64    ADDS	R4, R4, #1
0x1686	0xB2E4    UXTB	R4, R4
;__Lib_UART_MSP.c, 278 :: 		
; imod end address is: 0 (R0)
; i end address is: 16 (R4)
0x1688	0xE7EB    B	L___Lib_UART_MSP_UARTx_SetBaudRate31
L___Lib_UART_MSP_UARTx_SetBaudRate32:
;__Lib_UART_MSP.c, 279 :: 		
0x168A	0x4608    MOV	R0, R1
; uartBase end address is: 4 (R1)
L___Lib_UART_MSP_UARTx_SetBaudRate30:
;__Lib_UART_MSP.c, 281 :: 		
; uartBase start address is: 0 (R0)
0x168C	0x1D83    ADDS	R3, R0, #6
0x168E	0x2200    MOVS	R2, #0
0x1690	0x801A    STRH	R2, [R3, #0]
;__Lib_UART_MSP.c, 282 :: 		
0x1692	0x1D84    ADDS	R4, R0, #6
0x1694	0x8823    LDRH	R3, [R4, #0]
0x1696	0xF8BD2008  LDRH	R2, [SP, #8]
0x169A	0xEA430202  ORR	R2, R3, R2, LSL #0
0x169E	0x8022    STRH	R2, [R4, #0]
;__Lib_UART_MSP.c, 284 :: 		
0x16A0	0xF2000308  ADDW	R3, R0, #8
0x16A4	0x881A    LDRH	R2, [R3, #0]
0x16A6	0xF0020201  AND	R2, R2, #1
0x16AA	0x801A    STRH	R2, [R3, #0]
;__Lib_UART_MSP.c, 285 :: 		
0x16AC	0xF2000408  ADDW	R4, R0, #8
; uartBase end address is: 0 (R0)
0x16B0	0xF8BD200C  LDRH	R2, [SP, #12]
0x16B4	0x0213    LSLS	R3, R2, #8
0x16B6	0xB29B    UXTH	R3, R3
0x16B8	0xF8BD200A  LDRH	R2, [SP, #10]
0x16BC	0x0112    LSLS	R2, R2, #4
0x16BE	0xB292    UXTH	R2, R2
0x16C0	0x4313    ORRS	R3, R2
0x16C2	0xB29B    UXTH	R3, R3
0x16C4	0x8822    LDRH	R2, [R4, #0]
0x16C6	0x431A    ORRS	R2, R3
0x16C8	0x8022    STRH	R2, [R4, #0]
;__Lib_UART_MSP.c, 286 :: 		
L_end_UARTx_SetBaudRate:
0x16CA	0xF8DDE000  LDR	LR, [SP, #0]
0x16CE	0xB008    ADD	SP, SP, #32
0x16D0	0x4770    BX	LR
0x16D2	0xBF00    NOP
0x16D4	0x4000461C  	#1176256512
0x16D8	0x4FAC0000  	__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+0
0x16DC	0x4F640000  	__Lib_UART_MSP__UART_UCBRSx_TABLE+0
; end of __Lib_UART_MSP_UARTx_SetBaudRate
__Lib_UART_MSP_UARTx_GetFreq:
;__Lib_UART_MSP.c, 221 :: 		
; clocks start address is: 4 (R1)
; uartBase start address is: 0 (R0)
0x0E78	0xB081    SUB	SP, SP, #4
; clocks end address is: 4 (R1)
; uartBase end address is: 0 (R0)
; uartBase start address is: 0 (R0)
; clocks start address is: 4 (R1)
;__Lib_UART_MSP.c, 224 :: 		
0x0E7A	0x8802    LDRH	R2, [R0, #0]
; uartBase end address is: 0 (R0)
0x0E7C	0xF00202C0  AND	R2, R2, #192
0x0E80	0xB292    UXTH	R2, R2
0x0E82	0x0992    LSRS	R2, R2, #6
0x0E84	0xB292    UXTH	R2, R2
; clockSource start address is: 0 (R0)
0x0E86	0xB290    UXTH	R0, R2
;__Lib_UART_MSP.c, 225 :: 		
0x0E88	0xB90A    CBNZ	R2, L___Lib_UART_MSP_UARTx_GetFreq21
; clocks end address is: 4 (R1)
; clockSource end address is: 0 (R0)
;__Lib_UART_MSP.c, 226 :: 		
0x0E8A	0x2000    MOVS	R0, #0
0x0E8C	0xE00E    B	L_end_UARTx_GetFreq
L___Lib_UART_MSP_UARTx_GetFreq21:
;__Lib_UART_MSP.c, 227 :: 		
; clockSource start address is: 0 (R0)
; clocks start address is: 4 (R1)
0x0E8E	0x2801    CMP	R0, #1
0x0E90	0xD102    BNE	L___Lib_UART_MSP_UARTx_GetFreq23
; clockSource end address is: 0 (R0)
;__Lib_UART_MSP.c, 228 :: 		
0x0E92	0x680A    LDR	R2, [R1, #0]
; clocks end address is: 4 (R1)
0x0E94	0x4610    MOV	R0, R2
0x0E96	0xE009    B	L_end_UARTx_GetFreq
L___Lib_UART_MSP_UARTx_GetFreq23:
;__Lib_UART_MSP.c, 229 :: 		
; clockSource start address is: 0 (R0)
; clocks start address is: 4 (R1)
0x0E98	0x2802    CMP	R0, #2
0x0E9A	0xD002    BEQ	L___Lib_UART_MSP_UARTx_GetFreq68
0x0E9C	0x2803    CMP	R0, #3
0x0E9E	0xD000    BEQ	L___Lib_UART_MSP_UARTx_GetFreq67
; clocks end address is: 4 (R1)
; clockSource end address is: 0 (R0)
0x0EA0	0xE004    B	L___Lib_UART_MSP_UARTx_GetFreq27
L___Lib_UART_MSP_UARTx_GetFreq68:
; clocks start address is: 4 (R1)
L___Lib_UART_MSP_UARTx_GetFreq67:
;__Lib_UART_MSP.c, 230 :: 		
0x0EA2	0xF201020C  ADDW	R2, R1, #12
; clocks end address is: 4 (R1)
0x0EA6	0x6812    LDR	R2, [R2, #0]
0x0EA8	0x4610    MOV	R0, R2
0x0EAA	0xE7FF    B	L_end_UARTx_GetFreq
L___Lib_UART_MSP_UARTx_GetFreq27:
;__Lib_UART_MSP.c, 231 :: 		
L_end_UARTx_GetFreq:
0x0EAC	0xB001    ADD	SP, SP, #4
0x0EAE	0x4770    BX	LR
; end of __Lib_UART_MSP_UARTx_GetFreq
__Lib_UART_MSP__modf:
;__Lib_UART_MSP.c, 63 :: 		
; iptr start address is: 0 (R0)
0x0F90	0xB082    SUB	SP, SP, #8
0x0F92	0xED8D0A01  VSTR.32	S0, [SP, #4]
; iptr end address is: 0 (R0)
; iptr start address is: 0 (R0)
;__Lib_UART_MSP.c, 67 :: 		
0x0F96	0xED9D0A01  VLDR.32	S0, [SP, #4]
0x0F9A	0xEEB50AC0  VCMPE.F32	S0, #0.0
0x0F9E	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x0FA2	0xDB0A    BLT	L___Lib_UART_MSP__modf1
0x0FA4	0xEDDD0A01  VLDR.32	S1, [SP, #4]
0x0FA8	0xEEB70A00  VMOV.F32	S0, #1
0x0FAC	0xEEF40AC0  VCMPE.F32	S1, S0
0x0FB0	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x0FB4	0xDA01    BGE	L___Lib_UART_MSP__modf1
0x0FB6	0x2101    MOVS	R1, #1
0x0FB8	0xE000    B	L___Lib_UART_MSP__modf0
L___Lib_UART_MSP__modf1:
0x0FBA	0x2100    MOVS	R1, #0
L___Lib_UART_MSP__modf0:
; bbb start address is: 4 (R1)
;__Lib_UART_MSP.c, 68 :: 		
0x0FBC	0xB989    CBNZ	R1, L___Lib_UART_MSP__modf65
; bbb end address is: 4 (R1)
0x0FBE	0xEDDD0A01  VLDR.32	S1, [SP, #4]
0x0FC2	0xEEBF0A00  VMOV.F32	S0, #-1
0x0FC6	0xEEF40AC0  VCMPE.F32	S1, S0
0x0FCA	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x0FCE	0xDD07    BLE	L___Lib_UART_MSP__modf64
0x0FD0	0xED9D0A01  VLDR.32	S0, [SP, #4]
0x0FD4	0xEEB50AC0  VCMPE.F32	S0, #0.0
0x0FD8	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x0FDC	0xDC00    BGT	L___Lib_UART_MSP__modf63
0x0FDE	0xE000    B	L___Lib_UART_MSP__modf61
L___Lib_UART_MSP__modf64:
L___Lib_UART_MSP__modf63:
0x0FE0	0xE008    B	L___Lib_UART_MSP__modf6
L___Lib_UART_MSP__modf61:
L___Lib_UART_MSP__modf65:
;__Lib_UART_MSP.c, 69 :: 		
0x0FE2	0xF04F0100  MOV	R1, #0
0x0FE6	0xEE001A10  VMOV	S0, R1
0x0FEA	0xED000A00  VSTR.32	S0, [R0, #0]
; iptr end address is: 0 (R0)
;__Lib_UART_MSP.c, 70 :: 		
0x0FEE	0xED9D0A01  VLDR.32	S0, [SP, #4]
0x0FF2	0xE023    B	L_end__modf
;__Lib_UART_MSP.c, 71 :: 		
L___Lib_UART_MSP__modf6:
;__Lib_UART_MSP.c, 73 :: 		
; iptr start address is: 0 (R0)
0x0FF4	0xA901    ADD	R1, SP, #4
0x0FF6	0x6809    LDR	R1, [R1, #0]
0x0FF8	0x0DC9    LSRS	R1, R1, #23
0x0FFA	0xF00101FF  AND	R1, R1, #255
0x0FFE	0x397F    SUBS	R1, #127
;__Lib_UART_MSP.c, 74 :: 		
0x1000	0xB289    UXTH	R1, R1
0x1002	0x2918    CMP	R1, #24
0x1004	0xD908    BLS	L___Lib_UART_MSP__modf7
;__Lib_UART_MSP.c, 75 :: 		
0x1006	0xED9D0A01  VLDR.32	S0, [SP, #4]
0x100A	0xED000A00  VSTR.32	S0, [R0, #0]
; iptr end address is: 0 (R0)
;__Lib_UART_MSP.c, 76 :: 		
0x100E	0xF04F0100  MOV	R1, #0
0x1012	0xEE001A10  VMOV	S0, R1
0x1016	0xE011    B	L_end__modf
;__Lib_UART_MSP.c, 77 :: 		
L___Lib_UART_MSP__modf7:
;__Lib_UART_MSP.c, 78 :: 		
; iptr start address is: 0 (R0)
0x1018	0xED9D0A01  VLDR.32	S0, [SP, #4]
0x101C	0xEEBD0A40  VCVT.S32.F32	S0, S0
0x1020	0xEE101A10  VMOV	R1, S0
0x1024	0xEE001A10  VMOV	S0, R1
0x1028	0xEEB80AC0  VCVT.F32.S32	S0, S0
0x102C	0xED000A00  VSTR.32	S0, [R0, #0]
;__Lib_UART_MSP.c, 80 :: 		
0x1030	0xED500A00  VLDR.32	S1, [R0, #0]
; iptr end address is: 0 (R0)
0x1034	0xED9D0A01  VLDR.32	S0, [SP, #4]
0x1038	0xEE300A60  VSUB.F32	S0, S0, S1
;__Lib_UART_MSP.c, 81 :: 		
L_end__modf:
0x103C	0xB002    ADD	SP, SP, #8
0x103E	0x4770    BX	LR
; end of __Lib_UART_MSP__modf
__Lib_UART_MSP_UARTx_Enable:
;__Lib_UART_MSP.c, 99 :: 		
; uartBase start address is: 0 (R0)
0x154C	0xB081    SUB	SP, SP, #4
; uartBase end address is: 0 (R0)
; uartBase start address is: 0 (R0)
;__Lib_UART_MSP.c, 100 :: 		
0x154E	0x8802    LDRH	R2, [R0, #0]
0x1550	0xF64F71FE  MOVW	R1, #65534
0x1554	0xEA020101  AND	R1, R2, R1, LSL #0
0x1558	0x8001    STRH	R1, [R0, #0]
; uartBase end address is: 0 (R0)
;__Lib_UART_MSP.c, 101 :: 		
L_end_UARTx_Enable:
0x155A	0xB001    ADD	SP, SP, #4
0x155C	0x4770    BX	LR
; end of __Lib_UART_MSP_UARTx_Enable
clicker_2_MSP432__log_init2:
;__c2_msp432_log.c, 30 :: 		static T_mikrobus_ret _log_init2(uint32_t baud)
; baud start address is: 0 (R0)
0x3B88	0xB081    SUB	SP, SP, #4
0x3B8A	0xF8CDE000  STR	LR, [SP, #0]
; baud end address is: 0 (R0)
; baud start address is: 0 (R0)
;__c2_msp432_log.c, 32 :: 		UART1_Init( baud );
; baud end address is: 0 (R0)
0x3B8E	0xF7FDFF2B  BL	_UART1_Init+0
;__c2_msp432_log.c, 33 :: 		logger = UART1_Write;
0x3B92	0x4A04    LDR	R2, [PC, #16]
0x3B94	0x4904    LDR	R1, [PC, #16]
0x3B96	0x600A    STR	R2, [R1, #0]
;__c2_msp432_log.c, 34 :: 		return 0;
0x3B98	0x2000    MOVS	R0, #0
;__c2_msp432_log.c, 35 :: 		}
L_end__log_init2:
0x3B9A	0xF8DDE000  LDR	LR, [SP, #0]
0x3B9E	0xB001    ADD	SP, SP, #4
0x3BA0	0x4770    BX	LR
0x3BA2	0xBF00    NOP
0x3BA4	0x2FE10000  	_UART1_Write+0
0x3BA8	0x00A02000  	_logger+0
; end of clicker_2_MSP432__log_init2
_UART1_Init:
;__Lib_UART_MSP.c, 675 :: 		
; baudRate start address is: 0 (R0)
0x19E8	0xB081    SUB	SP, SP, #4
0x19EA	0xF8CDE000  STR	LR, [SP, #0]
0x19EE	0x4684    MOV	R12, R0
; baudRate end address is: 0 (R0)
; baudRate start address is: 48 (R12)
;__Lib_UART_MSP.c, 676 :: 		
0x19F0	0x4A0B    LDR	R2, [PC, #44]
0x19F2	0x490C    LDR	R1, [PC, #48]
0x19F4	0x600A    STR	R2, [R1, #0]
;__Lib_UART_MSP.c, 677 :: 		
0x19F6	0x4A0C    LDR	R2, [PC, #48]
0x19F8	0x490C    LDR	R1, [PC, #48]
0x19FA	0x600A    STR	R2, [R1, #0]
;__Lib_UART_MSP.c, 678 :: 		
0x19FC	0x4A0C    LDR	R2, [PC, #48]
0x19FE	0x490D    LDR	R1, [PC, #52]
0x1A00	0x600A    STR	R2, [R1, #0]
;__Lib_UART_MSP.c, 679 :: 		
0x1A02	0x4A0D    LDR	R2, [PC, #52]
0x1A04	0x490D    LDR	R1, [PC, #52]
0x1A06	0x600A    STR	R2, [R1, #0]
;__Lib_UART_MSP.c, 681 :: 		
0x1A08	0x480D    LDR	R0, [PC, #52]
0x1A0A	0xF7FFFB51  BL	_GPIO_Alternate_Function_Enable+0
;__Lib_UART_MSP.c, 682 :: 		
0x1A0E	0x4661    MOV	R1, R12
; baudRate end address is: 48 (R12)
0x1A10	0x480C    LDR	R0, [PC, #48]
0x1A12	0xF7FFFFA3  BL	__Lib_UART_MSP_UARTx_Init+0
;__Lib_UART_MSP.c, 683 :: 		
L_end_UART1_Init:
0x1A16	0xF8DDE000  LDR	LR, [SP, #0]
0x1A1A	0xB001    ADD	SP, SP, #4
0x1A1C	0x4770    BX	LR
0x1A1E	0xBF00    NOP
0x1A20	0x2FE10000  	_UART1_Write+0
0x1A24	0x37A82000  	_UART_Wr_Ptr+0
0x1A28	0xFFFFFFFF  	_UART1_Read+0
0x1A2C	0x37AC2000  	_UART_Rd_Ptr+0
0x1A30	0xFFFFFFFF  	_UART1_Data_Ready+0
0x1A34	0x37B02000  	_UART_Rdy_Ptr+0
0x1A38	0xFFFFFFFF  	_UART1_Tx_Idle+0
0x1A3C	0x37B42000  	_UART_Tx_Idle_Ptr+0
0x1A40	0x4BD80000  	__GPIO_MODULE_UARTA1_A1011+0
0x1A44	0x14004000  	EUSCI_A1_UCA1CTLW0+0
; end of _UART1_Init
clicker_2_MSP432__log_initUart:
;__c2_msp432_log.c, 37 :: 		static T_mikrobus_ret _log_initUart(uint32_t baud)
; baud start address is: 0 (R0)
0x3BF4	0xB081    SUB	SP, SP, #4
0x3BF6	0xF8CDE000  STR	LR, [SP, #0]
; baud end address is: 0 (R0)
; baud start address is: 0 (R0)
;__c2_msp432_log.c, 39 :: 		UART0_Init( baud );
; baud end address is: 0 (R0)
0x3BFA	0xF7FDFFD9  BL	_UART0_Init+0
;__c2_msp432_log.c, 40 :: 		logger = UART0_Write;
0x3BFE	0x4A04    LDR	R2, [PC, #16]
0x3C00	0x4904    LDR	R1, [PC, #16]
0x3C02	0x600A    STR	R2, [R1, #0]
;__c2_msp432_log.c, 41 :: 		return 0;
0x3C04	0x2000    MOVS	R0, #0
;__c2_msp432_log.c, 42 :: 		}
L_end__log_initUart:
0x3C06	0xF8DDE000  LDR	LR, [SP, #0]
0x3C0A	0xB001    ADD	SP, SP, #4
0x3C0C	0x4770    BX	LR
0x3C0E	0xBF00    NOP
0x3C10	0x30850000  	_UART0_Write+0
0x3C14	0x00A02000  	_logger+0
; end of clicker_2_MSP432__log_initUart
_UART0_Init:
;__Lib_UART_MSP.c, 553 :: 		
; baudRate start address is: 0 (R0)
0x1BB0	0xB081    SUB	SP, SP, #4
0x1BB2	0xF8CDE000  STR	LR, [SP, #0]
0x1BB6	0x4684    MOV	R12, R0
; baudRate end address is: 0 (R0)
; baudRate start address is: 48 (R12)
;__Lib_UART_MSP.c, 554 :: 		
0x1BB8	0x4A0B    LDR	R2, [PC, #44]
0x1BBA	0x490C    LDR	R1, [PC, #48]
0x1BBC	0x600A    STR	R2, [R1, #0]
;__Lib_UART_MSP.c, 555 :: 		
0x1BBE	0x4A0C    LDR	R2, [PC, #48]
0x1BC0	0x490C    LDR	R1, [PC, #48]
0x1BC2	0x600A    STR	R2, [R1, #0]
;__Lib_UART_MSP.c, 556 :: 		
0x1BC4	0x4A0C    LDR	R2, [PC, #48]
0x1BC6	0x490D    LDR	R1, [PC, #52]
0x1BC8	0x600A    STR	R2, [R1, #0]
;__Lib_UART_MSP.c, 557 :: 		
0x1BCA	0x4A0D    LDR	R2, [PC, #52]
0x1BCC	0x490D    LDR	R1, [PC, #52]
0x1BCE	0x600A    STR	R2, [R1, #0]
;__Lib_UART_MSP.c, 559 :: 		
0x1BD0	0x480D    LDR	R0, [PC, #52]
0x1BD2	0xF7FFFA6D  BL	_GPIO_Alternate_Function_Enable+0
;__Lib_UART_MSP.c, 560 :: 		
0x1BD6	0x4661    MOV	R1, R12
; baudRate end address is: 48 (R12)
0x1BD8	0x480C    LDR	R0, [PC, #48]
0x1BDA	0xF7FFFEBF  BL	__Lib_UART_MSP_UARTx_Init+0
;__Lib_UART_MSP.c, 561 :: 		
L_end_UART0_Init:
0x1BDE	0xF8DDE000  LDR	LR, [SP, #0]
0x1BE2	0xB001    ADD	SP, SP, #4
0x1BE4	0x4770    BX	LR
0x1BE6	0xBF00    NOP
0x1BE8	0x30850000  	_UART0_Write+0
0x1BEC	0x37A82000  	_UART_Wr_Ptr+0
0x1BF0	0xFFFFFFFF  	_UART0_Read+0
0x1BF4	0x37AC2000  	_UART_Rd_Ptr+0
0x1BF8	0xFFFFFFFF  	_UART0_Data_Ready+0
0x1BFC	0x37B02000  	_UART_Rdy_Ptr+0
0x1C00	0xFFFFFFFF  	_UART0_Tx_Idle+0
0x1C04	0x37B42000  	_UART_Tx_Idle_Ptr+0
0x1C08	0x4CB40000  	__GPIO_MODULE_UARTA0_A23+0
0x1C0C	0x10004000  	EUSCI_A0_UCA0CTLW0+0
; end of _UART0_Init
_mikrobus_logWrite:
;clicker_2_MSP432.c, 318 :: 		T_mikrobus_ret mikrobus_logWrite(uint8_t* data_, T_log_format format)
; format start address is: 4 (R1)
; data_ start address is: 0 (R0)
0x4034	0xB083    SUB	SP, SP, #12
0x4036	0xF8CDE000  STR	LR, [SP, #0]
0x403A	0x4602    MOV	R2, R0
; format end address is: 4 (R1)
; data_ end address is: 0 (R0)
; data_ start address is: 8 (R2)
; format start address is: 4 (R1)
;clicker_2_MSP432.c, 320 :: 		uint8_t *ptr = data_;
; ptr start address is: 0 (R0)
0x403C	0x4610    MOV	R0, R2
; data_ end address is: 8 (R2)
;clicker_2_MSP432.c, 321 :: 		uint8_t row = 13;
0x403E	0x220D    MOVS	R2, #13
0x4040	0xF88D2008  STRB	R2, [SP, #8]
0x4044	0x220A    MOVS	R2, #10
0x4046	0xF88D2009  STRB	R2, [SP, #9]
;clicker_2_MSP432.c, 322 :: 		uint8_t line = 10;
;clicker_2_MSP432.c, 323 :: 		switch( format )
0x404A	0xE01F    B	L_mikrobus_logWrite94
; format end address is: 4 (R1)
;clicker_2_MSP432.c, 325 :: 		case _LOG_BYTE :
L_mikrobus_logWrite96:
;clicker_2_MSP432.c, 326 :: 		_log_write( ptr );
; ptr end address is: 0 (R0)
0x404C	0xF7FFFE54  BL	clicker_2_MSP432__log_write+0
;clicker_2_MSP432.c, 327 :: 		break;
0x4050	0xE023    B	L_mikrobus_logWrite95
;clicker_2_MSP432.c, 328 :: 		case _LOG_TEXT :
L_mikrobus_logWrite97:
;clicker_2_MSP432.c, 329 :: 		while( *ptr )
; ptr start address is: 0 (R0)
L_mikrobus_logWrite98:
; ptr end address is: 0 (R0)
; ptr start address is: 0 (R0)
0x4052	0x7802    LDRB	R2, [R0, #0]
0x4054	0xB12A    CBZ	R2, L_mikrobus_logWrite99
;clicker_2_MSP432.c, 331 :: 		_log_write( ptr );
0x4056	0x9001    STR	R0, [SP, #4]
0x4058	0xF7FFFE4E  BL	clicker_2_MSP432__log_write+0
0x405C	0x9801    LDR	R0, [SP, #4]
;clicker_2_MSP432.c, 332 :: 		ptr++;
0x405E	0x1C40    ADDS	R0, R0, #1
;clicker_2_MSP432.c, 333 :: 		}
; ptr end address is: 0 (R0)
0x4060	0xE7F7    B	L_mikrobus_logWrite98
L_mikrobus_logWrite99:
;clicker_2_MSP432.c, 334 :: 		break;
0x4062	0xE01A    B	L_mikrobus_logWrite95
;clicker_2_MSP432.c, 335 :: 		case _LOG_LINE :
L_mikrobus_logWrite100:
;clicker_2_MSP432.c, 336 :: 		while( *ptr )
; ptr start address is: 0 (R0)
L_mikrobus_logWrite101:
; ptr end address is: 0 (R0)
; ptr start address is: 0 (R0)
0x4064	0x7802    LDRB	R2, [R0, #0]
0x4066	0xB12A    CBZ	R2, L_mikrobus_logWrite102
;clicker_2_MSP432.c, 338 :: 		_log_write( ptr );
0x4068	0x9001    STR	R0, [SP, #4]
0x406A	0xF7FFFE45  BL	clicker_2_MSP432__log_write+0
0x406E	0x9801    LDR	R0, [SP, #4]
;clicker_2_MSP432.c, 339 :: 		ptr++;
0x4070	0x1C40    ADDS	R0, R0, #1
;clicker_2_MSP432.c, 340 :: 		}
; ptr end address is: 0 (R0)
0x4072	0xE7F7    B	L_mikrobus_logWrite101
L_mikrobus_logWrite102:
;clicker_2_MSP432.c, 341 :: 		_log_write( &row );
0x4074	0xAA02    ADD	R2, SP, #8
0x4076	0x4610    MOV	R0, R2
0x4078	0xF7FFFE3E  BL	clicker_2_MSP432__log_write+0
;clicker_2_MSP432.c, 342 :: 		_log_write( &line );
0x407C	0xF10D0209  ADD	R2, SP, #9
0x4080	0x4610    MOV	R0, R2
0x4082	0xF7FFFE39  BL	clicker_2_MSP432__log_write+0
;clicker_2_MSP432.c, 343 :: 		break;
0x4086	0xE008    B	L_mikrobus_logWrite95
;clicker_2_MSP432.c, 344 :: 		default :
L_mikrobus_logWrite103:
;clicker_2_MSP432.c, 345 :: 		return _MIKROBUS_ERR_LOG;
0x4088	0x2006    MOVS	R0, #6
0x408A	0xE007    B	L_end_mikrobus_logWrite
;clicker_2_MSP432.c, 346 :: 		}
L_mikrobus_logWrite94:
; ptr start address is: 0 (R0)
; format start address is: 4 (R1)
0x408C	0x2900    CMP	R1, #0
0x408E	0xD0DD    BEQ	L_mikrobus_logWrite96
0x4090	0x2901    CMP	R1, #1
0x4092	0xD0DE    BEQ	L_mikrobus_logWrite97
0x4094	0x2902    CMP	R1, #2
0x4096	0xD0E5    BEQ	L_mikrobus_logWrite100
; format end address is: 4 (R1)
; ptr end address is: 0 (R0)
0x4098	0xE7F6    B	L_mikrobus_logWrite103
L_mikrobus_logWrite95:
;clicker_2_MSP432.c, 347 :: 		return 0;
0x409A	0x2000    MOVS	R0, #0
;clicker_2_MSP432.c, 348 :: 		}
L_end_mikrobus_logWrite:
0x409C	0xF8DDE000  LDR	LR, [SP, #0]
0x40A0	0xB003    ADD	SP, SP, #12
0x40A2	0x4770    BX	LR
; end of _mikrobus_logWrite
clicker_2_MSP432__log_write:
;__c2_msp432_log.c, 17 :: 		static T_mikrobus_ret _log_write(uint8_t *data_)
; data_ start address is: 0 (R0)
0x3CF8	0xB081    SUB	SP, SP, #4
0x3CFA	0xF8CDE000  STR	LR, [SP, #0]
; data_ end address is: 0 (R0)
; data_ start address is: 0 (R0)
;__c2_msp432_log.c, 19 :: 		logger( *data_ );
0x3CFE	0x7801    LDRB	R1, [R0, #0]
; data_ end address is: 0 (R0)
0x3D00	0xB2CC    UXTB	R4, R1
0x3D02	0xB2A0    UXTH	R0, R4
0x3D04	0x4C03    LDR	R4, [PC, #12]
0x3D06	0x6824    LDR	R4, [R4, #0]
0x3D08	0x47A0    BLX	R4
;__c2_msp432_log.c, 20 :: 		return 0;
0x3D0A	0x2000    MOVS	R0, #0
;__c2_msp432_log.c, 21 :: 		}
L_end__log_write:
0x3D0C	0xF8DDE000  LDR	LR, [SP, #0]
0x3D10	0xB001    ADD	SP, SP, #4
0x3D12	0x4770    BX	LR
0x3D14	0x00A02000  	_logger+0
; end of clicker_2_MSP432__log_write
_UART0_Write:
;__Lib_UART_MSP.c, 483 :: 		
; _data start address is: 0 (R0)
0x3084	0xB081    SUB	SP, SP, #4
0x3086	0xF8CDE000  STR	LR, [SP, #0]
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_UART_MSP.c, 484 :: 		
0x308A	0xB281    UXTH	R1, R0
; _data end address is: 0 (R0)
0x308C	0x4803    LDR	R0, [PC, #12]
0x308E	0xF7FEFC4D  BL	__Lib_UART_MSP_UARTx_Write+0
;__Lib_UART_MSP.c, 485 :: 		
L_end_UART0_Write:
0x3092	0xF8DDE000  LDR	LR, [SP, #0]
0x3096	0xB001    ADD	SP, SP, #4
0x3098	0x4770    BX	LR
0x309A	0xBF00    NOP
0x309C	0x10004000  	EUSCI_A0_UCA0CTLW0+0
; end of _UART0_Write
__Lib_UART_MSP_UARTx_Write:
;__Lib_UART_MSP.c, 372 :: 		
; _data start address is: 4 (R1)
; uartBase start address is: 0 (R0)
0x192C	0xB081    SUB	SP, SP, #4
; _data end address is: 4 (R1)
; uartBase end address is: 0 (R0)
; uartBase start address is: 0 (R0)
; _data start address is: 4 (R1)
0x192E	0xF8AD1000  STRH	R1, [SP, #0]
; uartBase end address is: 0 (R0)
; _data end address is: 4 (R1)
0x1932	0x4601    MOV	R1, R0
0x1934	0xF8BD0000  LDRH	R0, [SP, #0]
;__Lib_UART_MSP.c, 373 :: 		
L___Lib_UART_MSP_UARTx_Write35:
; _data start address is: 0 (R0)
; uartBase start address is: 4 (R1)
0x1938	0xF201020A  ADDW	R2, R1, #10
0x193C	0x8812    LDRH	R2, [R2, #0]
0x193E	0xF0020201  AND	R2, R2, #1
0x1942	0xB292    UXTH	R2, R2
0x1944	0xB102    CBZ	R2, L___Lib_UART_MSP_UARTx_Write36
0x1946	0xE7F7    B	L___Lib_UART_MSP_UARTx_Write35
L___Lib_UART_MSP_UARTx_Write36:
;__Lib_UART_MSP.c, 374 :: 		
0x1948	0xF201020E  ADDW	R2, R1, #14
; uartBase end address is: 4 (R1)
0x194C	0x8010    STRH	R0, [R2, #0]
; _data end address is: 0 (R0)
;__Lib_UART_MSP.c, 375 :: 		
L_end_UARTx_Write:
0x194E	0xB001    ADD	SP, SP, #4
0x1950	0x4770    BX	LR
; end of __Lib_UART_MSP_UARTx_Write
_UART1_Write:
;__Lib_UART_MSP.c, 606 :: 		
; _data start address is: 0 (R0)
0x2FE0	0xB081    SUB	SP, SP, #4
0x2FE2	0xF8CDE000  STR	LR, [SP, #0]
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_UART_MSP.c, 607 :: 		
0x2FE6	0xB281    UXTH	R1, R0
; _data end address is: 0 (R0)
0x2FE8	0x4803    LDR	R0, [PC, #12]
0x2FEA	0xF7FEFC9F  BL	__Lib_UART_MSP_UARTx_Write+0
;__Lib_UART_MSP.c, 608 :: 		
L_end_UART1_Write:
0x2FEE	0xF8DDE000  LDR	LR, [SP, #0]
0x2FF2	0xB001    ADD	SP, SP, #4
0x2FF4	0x4770    BX	LR
0x2FF6	0xBF00    NOP
0x2FF8	0x14004000  	EUSCI_A1_UCA1CTLW0+0
; end of _UART1_Write
_UART2_Write:
;__Lib_UART_MSP.c, 728 :: 		
; _data start address is: 0 (R0)
0x2FC4	0xB081    SUB	SP, SP, #4
0x2FC6	0xF8CDE000  STR	LR, [SP, #0]
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_UART_MSP.c, 729 :: 		
0x2FCA	0xB281    UXTH	R1, R0
; _data end address is: 0 (R0)
0x2FCC	0x4803    LDR	R0, [PC, #12]
0x2FCE	0xF7FEFCAD  BL	__Lib_UART_MSP_UARTx_Write+0
;__Lib_UART_MSP.c, 730 :: 		
L_end_UART2_Write:
0x2FD2	0xF8DDE000  LDR	LR, [SP, #0]
0x2FD6	0xB001    ADD	SP, SP, #4
0x2FD8	0x4770    BX	LR
0x2FDA	0xBF00    NOP
0x2FDC	0x18004000  	EUSCI_A2_UCA2CTLW0+0
; end of _UART2_Write
_UART3_Write:
;__Lib_UART_MSP.c, 850 :: 		
; _data start address is: 0 (R0)
0x2FFC	0xB081    SUB	SP, SP, #4
0x2FFE	0xF8CDE000  STR	LR, [SP, #0]
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_UART_MSP.c, 851 :: 		
0x3002	0xB281    UXTH	R1, R0
; _data end address is: 0 (R0)
0x3004	0x4803    LDR	R0, [PC, #12]
0x3006	0xF7FEFC91  BL	__Lib_UART_MSP_UARTx_Write+0
;__Lib_UART_MSP.c, 852 :: 		
L_end_UART3_Write:
0x300A	0xF8DDE000  LDR	LR, [SP, #0]
0x300E	0xB001    ADD	SP, SP, #4
0x3010	0x4770    BX	LR
0x3012	0xBF00    NOP
0x3014	0x1C004000  	EUSCI_A3_UCA3CTLW0+0
; end of _UART3_Write
_applicationInit:
;Click_IR_Grid2_MSP.c, 44 :: 		void applicationInit()
0x40FC	0xB081    SUB	SP, SP, #4
0x40FE	0xF8CDE000  STR	LR, [SP, #0]
;Click_IR_Grid2_MSP.c, 46 :: 		irgrid2_i2cDriverInit( (T_IRGRID2_P)&_MIKROBUS1_GPIO, (T_IRGRID2_P)&_MIKROBUS1_I2C, 0x33 );
0x4102	0x2233    MOVS	R2, #51
0x4104	0x4907    LDR	R1, [PC, #28]
0x4106	0x4808    LDR	R0, [PC, #32]
0x4108	0xF7FFFFCC  BL	_irgrid2_i2cDriverInit+0
;Click_IR_Grid2_MSP.c, 47 :: 		irgrid2_init();
0x410C	0xF7FFFF7A  BL	_irgrid2_init+0
;Click_IR_Grid2_MSP.c, 48 :: 		mikrobus_logWrite("--- Start measurement ---", _LOG_LINE);
0x4110	0x4806    LDR	R0, [PC, #24]
0x4112	0x2102    MOVS	R1, #2
0x4114	0xF7FFFF8E  BL	_mikrobus_logWrite+0
;Click_IR_Grid2_MSP.c, 49 :: 		Delay_100ms();
0x4118	0xF7FFFDE2  BL	_Delay_100ms+0
;Click_IR_Grid2_MSP.c, 50 :: 		}
L_end_applicationInit:
0x411C	0xF8DDE000  LDR	LR, [SP, #0]
0x4120	0xB001    ADD	SP, SP, #4
0x4122	0x4770    BX	LR
0x4124	0x3CD40000  	__MIKROBUS1_I2C+0
0x4128	0x4F040000  	__MIKROBUS1_GPIO+0
0x412C	0x00002000  	?lstr2_Click_IR_Grid2_MSP+0
; end of _applicationInit
_irgrid2_i2cDriverInit:
;__irgrid2_driver.c, 890 :: 		void irgrid2_i2cDriverInit(T_IRGRID2_P gpioObj, T_IRGRID2_P i2cObj, uint8_t slave)
; slave start address is: 8 (R2)
; i2cObj start address is: 4 (R1)
; gpioObj start address is: 0 (R0)
0x40A4	0xB081    SUB	SP, SP, #4
0x40A6	0xF8CDE000  STR	LR, [SP, #0]
0x40AA	0x4604    MOV	R4, R0
; slave end address is: 8 (R2)
; i2cObj end address is: 4 (R1)
; gpioObj end address is: 0 (R0)
; gpioObj start address is: 16 (R4)
; i2cObj start address is: 4 (R1)
; slave start address is: 8 (R2)
;__irgrid2_driver.c, 892 :: 		_slaveAddress = slave;
0x40AC	0x4B05    LDR	R3, [PC, #20]
0x40AE	0x701A    STRB	R2, [R3, #0]
; slave end address is: 8 (R2)
;__irgrid2_driver.c, 893 :: 		hal_i2cMap( (T_HAL_P)i2cObj );
0x40B0	0x4608    MOV	R0, R1
; i2cObj end address is: 4 (R1)
0x40B2	0xF7FFFD01  BL	__irgrid2_driver_hal_i2cMap+0
;__irgrid2_driver.c, 894 :: 		hal_gpioMap( (T_HAL_P)gpioObj );
0x40B6	0x4620    MOV	R0, R4
; gpioObj end address is: 16 (R4)
0x40B8	0xF7FFFD0A  BL	__irgrid2_driver_hal_gpioMap+0
;__irgrid2_driver.c, 895 :: 		}
L_end_irgrid2_i2cDriverInit:
0x40BC	0xF8DDE000  LDR	LR, [SP, #0]
0x40C0	0xB001    ADD	SP, SP, #4
0x40C2	0x4770    BX	LR
0x40C4	0x00952000  	__irgrid2_driver__slaveAddress+0
; end of _irgrid2_i2cDriverInit
__irgrid2_driver_hal_i2cMap:
;__hal_msp432.c, 79 :: 		static void hal_i2cMap(T_HAL_P i2cObj)
; i2cObj start address is: 0 (R0)
; i2cObj end address is: 0 (R0)
; i2cObj start address is: 0 (R0)
;__hal_msp432.c, 83 :: 		fp_i2cWrite    = tmp->i2cWrite;
0x3AB8	0x6802    LDR	R2, [R0, #0]
0x3ABA	0x4903    LDR	R1, [PC, #12]
0x3ABC	0x600A    STR	R2, [R1, #0]
;__hal_msp432.c, 84 :: 		fp_i2cRead     = tmp->i2cRead;
0x3ABE	0x1D01    ADDS	R1, R0, #4
; i2cObj end address is: 0 (R0)
0x3AC0	0x680A    LDR	R2, [R1, #0]
0x3AC2	0x4902    LDR	R1, [PC, #8]
0x3AC4	0x600A    STR	R2, [R1, #0]
;__hal_msp432.c, 85 :: 		}
L_end_hal_i2cMap:
0x3AC6	0x4770    BX	LR
0x3AC8	0x0D082000  	__irgrid2_driver_fp_i2cWrite+0
0x3ACC	0x0D0C2000  	__irgrid2_driver_fp_i2cRead+0
; end of __irgrid2_driver_hal_i2cMap
__irgrid2_driver_hal_gpioMap:
;__irgrid2_hal.c, 321 :: 		static void hal_gpioMap(T_HAL_P gpioObj)
;__irgrid2_hal.c, 397 :: 		}
L_end_hal_gpioMap:
0x3AD0	0x4770    BX	LR
; end of __irgrid2_driver_hal_gpioMap
_irgrid2_init:
;__irgrid2_driver.c, 1020 :: 		void irgrid2_init()
0x4004	0xB081    SUB	SP, SP, #4
0x4006	0xF8CDE000  STR	LR, [SP, #0]
;__irgrid2_driver.c, 1024 :: 		irgrid2_readEEPROM(eeMLX90640);
0x400A	0x4808    LDR	R0, [PC, #32]
0x400C	0xF7FFF8B0  BL	_irgrid2_readEEPROM+0
;__irgrid2_driver.c, 1025 :: 		irgrid2_ExtractParameters(eeMLX90640, &mlx90640);
0x4010	0x4907    LDR	R1, [PC, #28]
0x4012	0x4806    LDR	R0, [PC, #24]
0x4014	0xF7FFFE00  BL	_irgrid2_ExtractParameters+0
;__irgrid2_driver.c, 1026 :: 		irgrid2_setRefreshRate( 0x03 );
0x4018	0x2003    MOVS	R0, #3
0x401A	0xF7FFFDC7  BL	_irgrid2_setRefreshRate+0
;__irgrid2_driver.c, 1027 :: 		Delay_100ms();
0x401E	0xF7FFFE5F  BL	_Delay_100ms+0
;__irgrid2_driver.c, 1028 :: 		}
L_end_irgrid2_init:
0x4022	0xF8DDE000  LDR	LR, [SP, #0]
0x4026	0xB001    ADD	SP, SP, #4
0x4028	0x4770    BX	LR
0x402A	0xBF00    NOP
0x402C	0x37B82000  	irgrid2_init_eeMLX90640_L0+0
0x4030	0x0D102000  	__irgrid2_driver_mlx90640+0
; end of _irgrid2_init
_irgrid2_readEEPROM:
;__irgrid2_driver.c, 972 :: 		void irgrid2_readEEPROM(uint16_t *eeData)
; eeData start address is: 0 (R0)
0x3170	0xB081    SUB	SP, SP, #4
0x3172	0xF8CDE000  STR	LR, [SP, #0]
; eeData end address is: 0 (R0)
; eeData start address is: 0 (R0)
;__irgrid2_driver.c, 974 :: 		irgrid2_readData(0x2400, 832, eeData);
0x3176	0x4602    MOV	R2, R0
; eeData end address is: 0 (R0)
0x3178	0xF2403140  MOVW	R1, #832
0x317C	0xF2424000  MOVW	R0, #9216
0x3180	0xF7FFFF8E  BL	_irgrid2_readData+0
;__irgrid2_driver.c, 975 :: 		}
L_end_irgrid2_readEEPROM:
0x3184	0xF8DDE000  LDR	LR, [SP, #0]
0x3188	0xB001    ADD	SP, SP, #4
0x318A	0x4770    BX	LR
; end of _irgrid2_readEEPROM
_irgrid2_readData:
;__irgrid2_driver.c, 943 :: 		void irgrid2_readData(uint16_t startAddr, uint16_t nBytes, uint16_t *dataOUT)
; startAddr start address is: 0 (R0)
0x30A0	0xF2AD6D94  SUBW	SP, SP, #1684
0x30A4	0xF8CDE000  STR	LR, [SP, #0]
0x30A8	0xF8AD1688  STRH	R1, [SP, #1672]
0x30AC	0xF8CD268C  STR	R2, [SP, #1676]
; startAddr end address is: 0 (R0)
; startAddr start address is: 0 (R0)
;__irgrid2_driver.c, 946 :: 		uint8_t readReg[ 1664 ] = {0};
0x30B0	0xF10D0B06  ADD	R11, SP, #6
0x30B4	0xF50B6AD0  ADD	R10, R11, #1664
0x30B8	0xF8DFC0AC  LDR	R12, [PC, #172]
0x30BC	0xF001F814  BL	___CC2DW+0
;__irgrid2_driver.c, 947 :: 		uint16_t cnt = 0;
;__irgrid2_driver.c, 948 :: 		uint16_t dataCnt = 0;
;__irgrid2_driver.c, 949 :: 		uint16_t nMemAddressRead = 0;
;__irgrid2_driver.c, 950 :: 		uint16_t i = 0;
;__irgrid2_driver.c, 952 :: 		nMemAddressRead = 2 * nBytes;
0x30C0	0xF8BD3688  LDRH	R3, [SP, #1672]
0x30C4	0x005B    LSLS	R3, R3, #1
0x30C6	0xF8AD3690  STRH	R3, [SP, #1680]
;__irgrid2_driver.c, 954 :: 		writeReg[ 0 ] = (uint8_t)(startAddr >> 8);
0x30CA	0xAC01    ADD	R4, SP, #4
0x30CC	0x0A03    LSRS	R3, R0, #8
0x30CE	0xB2DB    UXTB	R3, R3
0x30D0	0x7023    STRB	R3, [R4, #0]
;__irgrid2_driver.c, 955 :: 		writeReg[ 1 ] = (uint8_t)(startAddr & 0x00FF);
0x30D2	0x1C64    ADDS	R4, R4, #1
0x30D4	0xF00003FF  AND	R3, R0, #255
; startAddr end address is: 0 (R0)
0x30D8	0xB2DB    UXTB	R3, R3
0x30DA	0x7023    STRB	R3, [R4, #0]
;__irgrid2_driver.c, 957 :: 		hal_i2cStart();
0x30DC	0xF7FEFC3A  BL	__irgrid2_driver_hal_i2cStart+0
;__irgrid2_driver.c, 958 :: 		hal_i2cWrite(_slaveAddress, writeReg, 2, END_MODE_RESTART);
0x30E0	0xAC01    ADD	R4, SP, #4
0x30E2	0x4B22    LDR	R3, [PC, #136]
0x30E4	0x781B    LDRB	R3, [R3, #0]
0x30E6	0x2202    MOVS	R2, #2
0x30E8	0x4621    MOV	R1, R4
0x30EA	0xB2D8    UXTB	R0, R3
0x30EC	0x2300    MOVS	R3, #0
0x30EE	0xF7FEFC67  BL	__irgrid2_driver_hal_i2cWrite+0
;__irgrid2_driver.c, 959 :: 		Delay_10ms();
0x30F2	0xF7FEFB0D  BL	_Delay_10ms+0
;__irgrid2_driver.c, 960 :: 		hal_i2cRead(_slaveAddress, readReg, nMemAddressRead, END_MODE_STOP);
0x30F6	0xF10D0406  ADD	R4, SP, #6
0x30FA	0x4B1C    LDR	R3, [PC, #112]
0x30FC	0x781B    LDRB	R3, [R3, #0]
0x30FE	0xF8BD2690  LDRH	R2, [SP, #1680]
0x3102	0x4621    MOV	R1, R4
0x3104	0xB2D8    UXTB	R0, R3
0x3106	0x2301    MOVS	R3, #1
0x3108	0xF7FEFAEA  BL	__irgrid2_driver_hal_i2cRead+0
;__irgrid2_driver.c, 962 :: 		for(cnt=0; cnt < nBytes; cnt++)
; cnt start address is: 4 (R1)
0x310C	0x2100    MOVS	R1, #0
; cnt end address is: 4 (R1)
0x310E	0xB288    UXTH	R0, R1
L_irgrid2_readData155:
; cnt start address is: 0 (R0)
0x3110	0xF8BD3688  LDRH	R3, [SP, #1672]
0x3114	0x4298    CMP	R0, R3
0x3116	0xD221    BCS	L_irgrid2_readData156
;__irgrid2_driver.c, 964 :: 		i = cnt << 1;
0x3118	0x0045    LSLS	R5, R0, #1
0x311A	0xB2AD    UXTH	R5, R5
; i start address is: 4 (R1)
0x311C	0xB2A9    UXTH	R1, R5
;__irgrid2_driver.c, 965 :: 		dataOUT[cnt] = readReg[ i ];
0x311E	0x0044    LSLS	R4, R0, #1
0x3120	0xF8DD368C  LDR	R3, [SP, #1676]
0x3124	0x191C    ADDS	R4, R3, R4
0x3126	0xF10D0606  ADD	R6, SP, #6
0x312A	0x1973    ADDS	R3, R6, R5
0x312C	0x781B    LDRB	R3, [R3, #0]
0x312E	0x8023    STRH	R3, [R4, #0]
;__irgrid2_driver.c, 966 :: 		dataOUT[cnt] <<= 8;
0x3130	0x0044    LSLS	R4, R0, #1
0x3132	0xF8DD368C  LDR	R3, [SP, #1676]
0x3136	0x191C    ADDS	R4, R3, R4
0x3138	0x8823    LDRH	R3, [R4, #0]
0x313A	0x021B    LSLS	R3, R3, #8
0x313C	0x8023    STRH	R3, [R4, #0]
;__irgrid2_driver.c, 967 :: 		dataOUT[cnt] |= readReg[ i + 1 ];
0x313E	0x0044    LSLS	R4, R0, #1
0x3140	0xF8DD368C  LDR	R3, [SP, #1676]
0x3144	0x191D    ADDS	R5, R3, R4
0x3146	0x1C4B    ADDS	R3, R1, #1
0x3148	0xB29B    UXTH	R3, R3
; i end address is: 4 (R1)
0x314A	0x18F3    ADDS	R3, R6, R3
0x314C	0x781C    LDRB	R4, [R3, #0]
0x314E	0x882B    LDRH	R3, [R5, #0]
0x3150	0x4323    ORRS	R3, R4
0x3152	0x802B    STRH	R3, [R5, #0]
;__irgrid2_driver.c, 962 :: 		for(cnt=0; cnt < nBytes; cnt++)
0x3154	0x1C43    ADDS	R3, R0, #1
; cnt end address is: 0 (R0)
; cnt start address is: 4 (R1)
0x3156	0xB299    UXTH	R1, R3
;__irgrid2_driver.c, 968 :: 		}
0x3158	0xB288    UXTH	R0, R1
; cnt end address is: 4 (R1)
0x315A	0xE7D9    B	L_irgrid2_readData155
L_irgrid2_readData156:
;__irgrid2_driver.c, 969 :: 		}
L_end_irgrid2_readData:
0x315C	0xF8DDE000  LDR	LR, [SP, #0]
0x3160	0xF20D6D94  ADDW	SP, SP, #1684
0x3164	0x4770    BX	LR
0x3166	0xBF00    NOP
0x3168	0x447C0000  	?ICSirgrid2_readData_readReg_L0+0
0x316C	0x00952000  	__irgrid2_driver__slaveAddress+0
; end of _irgrid2_readData
__irgrid2_driver_hal_i2cStart:
;__hal_msp432.c, 87 :: 		static int hal_i2cStart()
;__hal_msp432.c, 89 :: 		int res = 0;
; res start address is: 0 (R0)
0x1954	0xF2400000  MOVW	R0, #0
0x1958	0xB200    SXTH	R0, R0
;__hal_msp432.c, 90 :: 		return res;
; res end address is: 0 (R0)
;__hal_msp432.c, 91 :: 		}
L_end_hal_i2cStart:
0x195A	0x4770    BX	LR
; end of __irgrid2_driver_hal_i2cStart
__irgrid2_driver_hal_i2cWrite:
;__hal_msp432.c, 93 :: 		static int hal_i2cWrite(uint8_t slaveAddress, uint8_t *pBuf, uint16_t nBytes, uint8_t endMode)
; endMode start address is: 12 (R3)
; nBytes start address is: 8 (R2)
; pBuf start address is: 4 (R1)
; slaveAddress start address is: 0 (R0)
0x19C0	0xB082    SUB	SP, SP, #8
0x19C2	0xF8CDE000  STR	LR, [SP, #0]
; endMode end address is: 12 (R3)
; nBytes end address is: 8 (R2)
; pBuf end address is: 4 (R1)
; slaveAddress end address is: 0 (R0)
; slaveAddress start address is: 0 (R0)
; pBuf start address is: 4 (R1)
; nBytes start address is: 8 (R2)
; endMode start address is: 12 (R3)
;__hal_msp432.c, 95 :: 		int res = 0;
0x19C6	0xF2400400  MOVW	R4, #0
0x19CA	0xF8AD4004  STRH	R4, [SP, #4]
;__hal_msp432.c, 97 :: 		res |= fp_i2cWrite(slaveAddress, ptr, nBytes, endMode);
; endMode end address is: 12 (R3)
; nBytes end address is: 8 (R2)
; pBuf end address is: 4 (R1)
; slaveAddress end address is: 0 (R0)
0x19CE	0x4C05    LDR	R4, [PC, #20]
0x19D0	0x6824    LDR	R4, [R4, #0]
0x19D2	0x47A0    BLX	R4
0x19D4	0xF9BD4004  LDRSH	R4, [SP, #4]
0x19D8	0x4304    ORRS	R4, R0
;__hal_msp432.c, 98 :: 		return res;
0x19DA	0xB220    SXTH	R0, R4
;__hal_msp432.c, 99 :: 		}
L_end_hal_i2cWrite:
0x19DC	0xF8DDE000  LDR	LR, [SP, #0]
0x19E0	0xB002    ADD	SP, SP, #8
0x19E2	0x4770    BX	LR
0x19E4	0x0D082000  	__irgrid2_driver_fp_i2cWrite+0
; end of __irgrid2_driver_hal_i2cWrite
_I2C0_Write:
;__Lib_I2C_MSP.c, 498 :: 		
; END_mode start address is: 12 (R3)
; count start address is: 8 (R2)
; buf start address is: 4 (R1)
; slave_address start address is: 0 (R0)
0x1528	0xB081    SUB	SP, SP, #4
0x152A	0xF8CDE000  STR	LR, [SP, #0]
; END_mode end address is: 12 (R3)
; count end address is: 8 (R2)
; buf end address is: 4 (R1)
; slave_address end address is: 0 (R0)
; slave_address start address is: 0 (R0)
; buf start address is: 4 (R1)
; count start address is: 8 (R2)
; END_mode start address is: 12 (R3)
;__Lib_I2C_MSP.c, 499 :: 		
0x152E	0xB408    PUSH	(R3)
; count end address is: 8 (R2)
0x1530	0x4613    MOV	R3, R2
0x1532	0x460A    MOV	R2, R1
; buf end address is: 4 (R1)
0x1534	0xB2C1    UXTB	R1, R0
; slave_address end address is: 0 (R0)
0x1536	0x4804    LDR	R0, [PC, #16]
; END_mode end address is: 12 (R3)
0x1538	0xF7FFFBBC  BL	__Lib_I2C_MSP_I2Cx_Write+0
0x153C	0xB001    ADD	SP, SP, #4
;__Lib_I2C_MSP.c, 500 :: 		
L_end_I2C0_Write:
0x153E	0xF8DDE000  LDR	LR, [SP, #0]
0x1542	0xB001    ADD	SP, SP, #4
0x1544	0x4770    BX	LR
0x1546	0xBF00    NOP
0x1548	0x20004000  	EUSCI_B0_UCB0CTLW0+0
; end of _I2C0_Write
__Lib_I2C_MSP_I2Cx_Write:
;__Lib_I2C_MSP.c, 263 :: 		
; slave_address start address is: 4 (R1)
; I2C_BASE start address is: 0 (R0)
0x0CB4	0xB087    SUB	SP, SP, #28
0x0CB6	0xF8CDE000  STR	LR, [SP, #0]
0x0CBA	0xF88D1004  STRB	R1, [SP, #4]
0x0CBE	0x4601    MOV	R1, R0
0x0CC0	0xF89D0004  LDRB	R0, [SP, #4]
0x0CC4	0x9205    STR	R2, [SP, #20]
0x0CC6	0x9306    STR	R3, [SP, #24]
; slave_address end address is: 4 (R1)
; I2C_BASE end address is: 0 (R0)
; I2C_BASE start address is: 4 (R1)
; slave_address start address is: 0 (R0)
0x0CC8	0x9C07    LDR	R4, [SP, #28]
0x0CCA	0x9407    STR	R4, [SP, #28]
;__Lib_I2C_MSP.c, 266 :: 		
0x0CCC	0x4C4C    LDR	R4, [PC, #304]
0x0CCE	0x42A1    CMP	R1, R4
0x0CD0	0xD10A    BNE	L___Lib_I2C_MSP_I2Cx_Write45
;__Lib_I2C_MSP.c, 267 :: 		
0x0CD2	0x4D4C    LDR	R5, [PC, #304]
0x0CD4	0x682C    LDR	R4, [R5, #0]
0x0CD6	0x9403    STR	R4, [SP, #12]
0x0CD8	0x462C    MOV	R4, R5
0x0CDA	0x6824    LDR	R4, [R4, #0]
0x0CDC	0x9404    STR	R4, [SP, #16]
;__Lib_I2C_MSP.c, 268 :: 		
0x0CDE	0x4C4A    LDR	R4, [PC, #296]
0x0CE0	0x6825    LDR	R5, [R4, #0]
0x0CE2	0x4C4A    LDR	R4, [PC, #296]
0x0CE4	0x6025    STR	R5, [R4, #0]
;__Lib_I2C_MSP.c, 269 :: 		
0x0CE6	0xE028    B	L___Lib_I2C_MSP_I2Cx_Write46
L___Lib_I2C_MSP_I2Cx_Write45:
;__Lib_I2C_MSP.c, 270 :: 		
0x0CE8	0x4C49    LDR	R4, [PC, #292]
0x0CEA	0x42A1    CMP	R1, R4
0x0CEC	0xD10A    BNE	L___Lib_I2C_MSP_I2Cx_Write47
;__Lib_I2C_MSP.c, 271 :: 		
0x0CEE	0x4D49    LDR	R5, [PC, #292]
0x0CF0	0x682C    LDR	R4, [R5, #0]
0x0CF2	0x9403    STR	R4, [SP, #12]
0x0CF4	0x462C    MOV	R4, R5
0x0CF6	0x6824    LDR	R4, [R4, #0]
0x0CF8	0x9404    STR	R4, [SP, #16]
;__Lib_I2C_MSP.c, 272 :: 		
0x0CFA	0x4C47    LDR	R4, [PC, #284]
0x0CFC	0x6825    LDR	R5, [R4, #0]
0x0CFE	0x4C43    LDR	R4, [PC, #268]
0x0D00	0x6025    STR	R5, [R4, #0]
;__Lib_I2C_MSP.c, 273 :: 		
0x0D02	0xE01A    B	L___Lib_I2C_MSP_I2Cx_Write48
L___Lib_I2C_MSP_I2Cx_Write47:
;__Lib_I2C_MSP.c, 274 :: 		
0x0D04	0x4C45    LDR	R4, [PC, #276]
0x0D06	0x42A1    CMP	R1, R4
0x0D08	0xD10A    BNE	L___Lib_I2C_MSP_I2Cx_Write49
;__Lib_I2C_MSP.c, 275 :: 		
0x0D0A	0x4D45    LDR	R5, [PC, #276]
0x0D0C	0x682C    LDR	R4, [R5, #0]
0x0D0E	0x9403    STR	R4, [SP, #12]
0x0D10	0x462C    MOV	R4, R5
0x0D12	0x6824    LDR	R4, [R4, #0]
0x0D14	0x9404    STR	R4, [SP, #16]
;__Lib_I2C_MSP.c, 276 :: 		
0x0D16	0x4C43    LDR	R4, [PC, #268]
0x0D18	0x6825    LDR	R5, [R4, #0]
0x0D1A	0x4C3C    LDR	R4, [PC, #240]
0x0D1C	0x6025    STR	R5, [R4, #0]
;__Lib_I2C_MSP.c, 277 :: 		
0x0D1E	0xE00C    B	L___Lib_I2C_MSP_I2Cx_Write50
L___Lib_I2C_MSP_I2Cx_Write49:
;__Lib_I2C_MSP.c, 278 :: 		
0x0D20	0x4C41    LDR	R4, [PC, #260]
0x0D22	0x42A1    CMP	R1, R4
0x0D24	0xD109    BNE	L___Lib_I2C_MSP_I2Cx_Write51
;__Lib_I2C_MSP.c, 279 :: 		
0x0D26	0x4D41    LDR	R5, [PC, #260]
0x0D28	0x682C    LDR	R4, [R5, #0]
0x0D2A	0x9403    STR	R4, [SP, #12]
0x0D2C	0x462C    MOV	R4, R5
0x0D2E	0x6824    LDR	R4, [R4, #0]
0x0D30	0x9404    STR	R4, [SP, #16]
;__Lib_I2C_MSP.c, 280 :: 		
0x0D32	0x4C3F    LDR	R4, [PC, #252]
0x0D34	0x6825    LDR	R5, [R4, #0]
0x0D36	0x4C35    LDR	R4, [PC, #212]
0x0D38	0x6025    STR	R5, [R4, #0]
;__Lib_I2C_MSP.c, 281 :: 		
L___Lib_I2C_MSP_I2Cx_Write51:
L___Lib_I2C_MSP_I2Cx_Write50:
L___Lib_I2C_MSP_I2Cx_Write48:
L___Lib_I2C_MSP_I2Cx_Write46:
;__Lib_I2C_MSP.c, 283 :: 		
0x0D3A	0x9101    STR	R1, [SP, #4]
; slave_address end address is: 0 (R0)
0x0D3C	0x9102    STR	R1, [SP, #8]
0x0D3E	0xB2C1    UXTB	R1, R0
0x0D40	0x9802    LDR	R0, [SP, #8]
0x0D42	0xF7FFFABB  BL	__Lib_I2C_MSP_I2C_setSlaveAddress+0
0x0D46	0x9901    LDR	R1, [SP, #4]
;__Lib_I2C_MSP.c, 284 :: 		
0x0D48	0x4C3A    LDR	R4, [PC, #232]
0x0D4A	0x7824    LDRB	R4, [R4, #0]
0x0D4C	0xB954    CBNZ	R4, L___Lib_I2C_MSP_I2Cx_Write52
;__Lib_I2C_MSP.c, 285 :: 		
0x0D4E	0x9101    STR	R1, [SP, #4]
0x0D50	0x4608    MOV	R0, R1
0x0D52	0x2101    MOVS	R1, #1
0x0D54	0xF7FFFB68  BL	__Lib_I2C_MSP_I2Cx_Start+0
0x0D58	0x9901    LDR	R1, [SP, #4]
0x0D5A	0xB108    CBZ	R0, L___Lib_I2C_MSP_I2Cx_Write53
; I2C_BASE end address is: 4 (R1)
;__Lib_I2C_MSP.c, 286 :: 		
0x0D5C	0x2001    MOVS	R0, #1
0x0D5E	0xE04B    B	L_end_I2Cx_Write
L___Lib_I2C_MSP_I2Cx_Write53:
;__Lib_I2C_MSP.c, 287 :: 		
; I2C_BASE start address is: 4 (R1)
0x0D60	0x460D    MOV	R5, R1
0x0D62	0xE01F    B	L___Lib_I2C_MSP_I2Cx_Write54
L___Lib_I2C_MSP_I2Cx_Write52:
;__Lib_I2C_MSP.c, 289 :: 		
0x0D64	0x2501    MOVS	R5, #1
0x0D66	0x880C    LDRH	R4, [R1, #0]
0x0D68	0xF3651404  BFI	R4, R5, #4, #1
0x0D6C	0x800C    STRH	R4, [R1, #0]
; I2C_BASE end address is: 4 (R1)
0x0D6E	0x4608    MOV	R0, R1
;__Lib_I2C_MSP.c, 290 :: 		
L___Lib_I2C_MSP_I2Cx_Write55:
; I2C_BASE start address is: 0 (R0)
0x0D70	0x8805    LDRH	R5, [R0, #0]
0x0D72	0xF3C50480  UBFX	R4, R5, #2, #1
0x0D76	0xB16C    CBZ	R4, L___Lib_I2C_MSP_I2Cx_Write56
;__Lib_I2C_MSP.c, 291 :: 		
0x0D78	0x9C04    LDR	R4, [SP, #16]
0x0D7A	0xB154    CBZ	R4, L___Lib_I2C_MSP_I2Cx_Write57
;__Lib_I2C_MSP.c, 292 :: 		
0x0D7C	0x9C03    LDR	R4, [SP, #12]
0x0D7E	0xB92C    CBNZ	R4, L___Lib_I2C_MSP_I2Cx_Write58
; I2C_BASE end address is: 0 (R0)
;__Lib_I2C_MSP.c, 293 :: 		
0x0D80	0x2007    MOVS	R0, #7
0x0D82	0x4C22    LDR	R4, [PC, #136]
0x0D84	0x6824    LDR	R4, [R4, #0]
0x0D86	0x47A0    BLX	R4
;__Lib_I2C_MSP.c, 294 :: 		
0x0D88	0x2001    MOVS	R0, #1
0x0D8A	0xE035    B	L_end_I2Cx_Write
;__Lib_I2C_MSP.c, 295 :: 		
L___Lib_I2C_MSP_I2Cx_Write58:
;__Lib_I2C_MSP.c, 296 :: 		
; I2C_BASE start address is: 0 (R0)
0x0D8C	0x9C03    LDR	R4, [SP, #12]
0x0D8E	0x1E64    SUBS	R4, R4, #1
0x0D90	0x9403    STR	R4, [SP, #12]
;__Lib_I2C_MSP.c, 297 :: 		
L___Lib_I2C_MSP_I2Cx_Write57:
;__Lib_I2C_MSP.c, 298 :: 		
0x0D92	0xE7ED    B	L___Lib_I2C_MSP_I2Cx_Write55
L___Lib_I2C_MSP_I2Cx_Write56:
;__Lib_I2C_MSP.c, 299 :: 		
0x0D94	0x8804    LDRH	R4, [R0, #0]
0x0D96	0xF0440402  ORR	R4, R4, #2
0x0D9A	0x8004    STRH	R4, [R0, #0]
;__Lib_I2C_MSP.c, 300 :: 		
0x0D9C	0x2500    MOVS	R5, #0
0x0D9E	0x4C25    LDR	R4, [PC, #148]
0x0DA0	0x7025    STRB	R5, [R4, #0]
; I2C_BASE end address is: 0 (R0)
0x0DA2	0x4605    MOV	R5, R0
;__Lib_I2C_MSP.c, 301 :: 		
L___Lib_I2C_MSP_I2Cx_Write54:
;__Lib_I2C_MSP.c, 303 :: 		
; I2C_BASE start address is: 20 (R5)
; i start address is: 24 (R6)
0x0DA4	0x2600    MOVS	R6, #0
; I2C_BASE end address is: 20 (R5)
; i end address is: 24 (R6)
0x0DA6	0x462A    MOV	R2, R5
0x0DA8	0x4631    MOV	R1, R6
L___Lib_I2C_MSP_I2Cx_Write59:
; i start address is: 4 (R1)
; I2C_BASE start address is: 8 (R2)
0x0DAA	0x9C06    LDR	R4, [SP, #24]
0x0DAC	0x42A1    CMP	R1, R4
0x0DAE	0xD214    BCS	L___Lib_I2C_MSP_I2Cx_Write60
;__Lib_I2C_MSP.c, 304 :: 		
0x0DB0	0x9C05    LDR	R4, [SP, #20]
0x0DB2	0x1864    ADDS	R4, R4, R1
0x0DB4	0x7824    LDRB	R4, [R4, #0]
0x0DB6	0x9201    STR	R2, [SP, #4]
0x0DB8	0x9102    STR	R1, [SP, #8]
0x0DBA	0xB2E1    UXTB	R1, R4
0x0DBC	0x4610    MOV	R0, R2
0x0DBE	0xF7FFFAAB  BL	__Lib_I2C_MSP_I2Cx_WriteByte+0
0x0DC2	0x9902    LDR	R1, [SP, #8]
0x0DC4	0x9A01    LDR	R2, [SP, #4]
0x0DC6	0xB120    CBZ	R0, L___Lib_I2C_MSP_I2Cx_Write62
; i end address is: 4 (R1)
;__Lib_I2C_MSP.c, 305 :: 		
0x0DC8	0x4610    MOV	R0, R2
; I2C_BASE end address is: 8 (R2)
0x0DCA	0xF7FFFA93  BL	__Lib_I2C_MSP_I2Cx_Stop+0
;__Lib_I2C_MSP.c, 306 :: 		
0x0DCE	0x2001    MOVS	R0, #1
0x0DD0	0xE012    B	L_end_I2Cx_Write
;__Lib_I2C_MSP.c, 307 :: 		
L___Lib_I2C_MSP_I2Cx_Write62:
;__Lib_I2C_MSP.c, 303 :: 		
; I2C_BASE start address is: 8 (R2)
; i start address is: 4 (R1)
0x0DD2	0x1C4C    ADDS	R4, R1, #1
; i end address is: 4 (R1)
; i start address is: 24 (R6)
0x0DD4	0x4626    MOV	R6, R4
;__Lib_I2C_MSP.c, 308 :: 		
; i end address is: 24 (R6)
0x0DD6	0x4631    MOV	R1, R6
0x0DD8	0xE7E7    B	L___Lib_I2C_MSP_I2Cx_Write59
L___Lib_I2C_MSP_I2Cx_Write60:
;__Lib_I2C_MSP.c, 310 :: 		
0x0DDA	0x9C07    LDR	R4, [SP, #28]
0x0DDC	0x2C01    CMP	R4, #1
0x0DDE	0xD107    BNE	L___Lib_I2C_MSP_I2Cx_Write63
;__Lib_I2C_MSP.c, 311 :: 		
0x0DE0	0x4610    MOV	R0, R2
; I2C_BASE end address is: 8 (R2)
0x0DE2	0xF7FFFA87  BL	__Lib_I2C_MSP_I2Cx_Stop+0
0x0DE6	0x2800    CMP	R0, #0
0x0DE8	0xD001    BEQ	L___Lib_I2C_MSP_I2Cx_Write64
;__Lib_I2C_MSP.c, 312 :: 		
0x0DEA	0x2001    MOVS	R0, #1
0x0DEC	0xE004    B	L_end_I2Cx_Write
L___Lib_I2C_MSP_I2Cx_Write64:
;__Lib_I2C_MSP.c, 313 :: 		
0x0DEE	0xE002    B	L___Lib_I2C_MSP_I2Cx_Write65
L___Lib_I2C_MSP_I2Cx_Write63:
;__Lib_I2C_MSP.c, 315 :: 		
0x0DF0	0x2501    MOVS	R5, #1
0x0DF2	0x4C10    LDR	R4, [PC, #64]
0x0DF4	0x7025    STRB	R5, [R4, #0]
;__Lib_I2C_MSP.c, 316 :: 		
L___Lib_I2C_MSP_I2Cx_Write65:
;__Lib_I2C_MSP.c, 318 :: 		
0x0DF6	0x2000    MOVS	R0, #0
;__Lib_I2C_MSP.c, 319 :: 		
L_end_I2Cx_Write:
0x0DF8	0xF8DDE000  LDR	LR, [SP, #0]
0x0DFC	0xB007    ADD	SP, SP, #28
0x0DFE	0x4770    BX	LR
0x0E00	0x20004000  	EUSCI_B0_UCB0CTLW0+0
0x0E04	0x00842000  	__Lib_I2C_MSP__I2C0_TIMEOUT+0
0x0E08	0x37842000  	_I2C0_timeout_Ptr+0
0x0E0C	0x37802000  	__Lib_I2C_MSP_I2C_Timeout_Ptr+0
0x0E10	0x24004000  	EUSCI_B1_UCB1CTLW0+0
0x0E14	0x00882000  	__Lib_I2C_MSP__I2C1_TIMEOUT+0
0x0E18	0x37882000  	_I2C1_timeout_Ptr+0
0x0E1C	0x28004000  	EUSCI_B2_UCB2CTLW0+0
0x0E20	0x008C2000  	__Lib_I2C_MSP__I2C2_TIMEOUT+0
0x0E24	0x378C2000  	_I2C2_timeout_Ptr+0
0x0E28	0x2C004000  	EUSCI_B3_UCB3CTLW0+0
0x0E2C	0x00902000  	__Lib_I2C_MSP__I2C3_TIMEOUT+0
0x0E30	0x37902000  	_I2C3_timeout_Ptr+0
0x0E34	0x00942000  	__Lib_I2C_MSP__DELAY_RESTART+0
; end of __Lib_I2C_MSP_I2Cx_Write
clicker_2_MSP432__setAN_1:
;__c2_msp432_gpio.c, 43 :: 		static void _setAN_1  (uint8_t value) 	{ DIO_P6OUT.B0 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x025C	0x4901    LDR	R1, [PC, #4]
0x025E	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setAN_1:
0x0260	0x4770    BX	LR
0x0262	0xBF00    NOP
0x0264	0x88604209  	DIO_P6OUT+0
; end of clicker_2_MSP432__setAN_1
clicker_2_MSP432__setRST_1:
;__c2_msp432_gpio.c, 44 :: 		static void _setRST_1 (uint8_t value) 	{ DIO_P5OUT.B6 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x0250	0x4901    LDR	R1, [PC, #4]
0x0252	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setRST_1:
0x0254	0x4770    BX	LR
0x0256	0xBF00    NOP
0x0258	0x88584209  	DIO_P5OUT+0
; end of clicker_2_MSP432__setRST_1
clicker_2_MSP432__setCS_1:
;__c2_msp432_gpio.c, 45 :: 		static void _setCS_1  (uint8_t value) 	{ DIO_P5OUT.B0 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x0244	0x4901    LDR	R1, [PC, #4]
0x0246	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setCS_1:
0x0248	0x4770    BX	LR
0x024A	0xBF00    NOP
0x024C	0x88404209  	DIO_P5OUT+0
; end of clicker_2_MSP432__setCS_1
clicker_2_MSP432__setSCK_1:
;__c2_msp432_gpio.c, 46 :: 		static void _setSCK_1 (uint8_t value) 	{ DIO_P1OUT.B5 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x0268	0x4901    LDR	R1, [PC, #4]
0x026A	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setSCK_1:
0x026C	0x4770    BX	LR
0x026E	0xBF00    NOP
0x0270	0x80544209  	DIO_P1OUT+0
; end of clicker_2_MSP432__setSCK_1
clicker_2_MSP432__setMISO_1:
;__c2_msp432_gpio.c, 47 :: 		static void _setMISO_1(uint8_t value) 	{ DIO_P1OUT.B7 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x028C	0x4901    LDR	R1, [PC, #4]
0x028E	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setMISO_1:
0x0290	0x4770    BX	LR
0x0292	0xBF00    NOP
0x0294	0x805C4209  	DIO_P1OUT+0
; end of clicker_2_MSP432__setMISO_1
clicker_2_MSP432__setMOSI_1:
;__c2_msp432_gpio.c, 48 :: 		static void _setMOSI_1(uint8_t value) 	{ DIO_P1OUT.B6 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x0280	0x4901    LDR	R1, [PC, #4]
0x0282	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setMOSI_1:
0x0284	0x4770    BX	LR
0x0286	0xBF00    NOP
0x0288	0x80584209  	DIO_P1OUT+0
; end of clicker_2_MSP432__setMOSI_1
clicker_2_MSP432__setPWM_1:
;__c2_msp432_gpio.c, 49 :: 		static void _setPWM_1 (uint8_t value) 	{ DIO_P2OUT.B7 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x0274	0x4901    LDR	R1, [PC, #4]
0x0276	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setPWM_1:
0x0278	0x4770    BX	LR
0x027A	0xBF00    NOP
0x027C	0x807C4209  	DIO_P2OUT+0
; end of clicker_2_MSP432__setPWM_1
clicker_2_MSP432__setINT_1:
;__c2_msp432_gpio.c, 50 :: 		static void _setINT_1 (uint8_t value) 	{ DIO_P2OUT.B4 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x0208	0x4901    LDR	R1, [PC, #4]
0x020A	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setINT_1:
0x020C	0x4770    BX	LR
0x020E	0xBF00    NOP
0x0210	0x80704209  	DIO_P2OUT+0
; end of clicker_2_MSP432__setINT_1
clicker_2_MSP432__setRX_1:
;__c2_msp432_gpio.c, 51 :: 		static void _setRX_1  (uint8_t value) 	{ DIO_P3OUT.B2 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x01FC	0x4901    LDR	R1, [PC, #4]
0x01FE	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setRX_1:
0x0200	0x4770    BX	LR
0x0202	0xBF00    NOP
0x0204	0x84484209  	DIO_P3OUT+0
; end of clicker_2_MSP432__setRX_1
clicker_2_MSP432__setTX_1:
;__c2_msp432_gpio.c, 52 :: 		static void _setTX_1  (uint8_t value) 	{ DIO_P3OUT.B3 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x01F0	0x4901    LDR	R1, [PC, #4]
0x01F2	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setTX_1:
0x01F4	0x4770    BX	LR
0x01F6	0xBF00    NOP
0x01F8	0x844C4209  	DIO_P3OUT+0
; end of clicker_2_MSP432__setTX_1
clicker_2_MSP432__setSCL_1:
;__c2_msp432_gpio.c, 53 :: 		static void _setSCL_1 (uint8_t value) 	{ DIO_P6OUT.B5 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x0214	0x4901    LDR	R1, [PC, #4]
0x0216	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setSCL_1:
0x0218	0x4770    BX	LR
0x021A	0xBF00    NOP
0x021C	0x88744209  	DIO_P6OUT+0
; end of clicker_2_MSP432__setSCL_1
clicker_2_MSP432__setSDA_1:
;__c2_msp432_gpio.c, 54 :: 		static void _setSDA_1 (uint8_t value) 	{ DIO_P6OUT.B4 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x0238	0x4901    LDR	R1, [PC, #4]
0x023A	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setSDA_1:
0x023C	0x4770    BX	LR
0x023E	0xBF00    NOP
0x0240	0x88704209  	DIO_P6OUT+0
; end of clicker_2_MSP432__setSDA_1
clicker_2_MSP432__setAN_2:
;__c2_msp432_gpio.c, 68 :: 		static void _setAN_2  (uint8_t value) 	{ DIO_P4OUT.B3 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x022C	0x4901    LDR	R1, [PC, #4]
0x022E	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setAN_2:
0x0230	0x4770    BX	LR
0x0232	0xBF00    NOP
0x0234	0x846C4209  	DIO_P4OUT+0
; end of clicker_2_MSP432__setAN_2
clicker_2_MSP432__setRST_2:
;__c2_msp432_gpio.c, 69 :: 		static void _setRST_2 (uint8_t value) 	{ DIO_P6OUT.B7 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x0220	0x4901    LDR	R1, [PC, #4]
0x0222	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setRST_2:
0x0224	0x4770    BX	LR
0x0226	0xBF00    NOP
0x0228	0x887C4209  	DIO_P6OUT+0
; end of clicker_2_MSP432__setRST_2
clicker_2_MSP432__setCS_2:
;__c2_msp432_gpio.c, 70 :: 		static void _setCS_2  (uint8_t value) 	{ DIO_P5OUT.B2 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x0598	0x4901    LDR	R1, [PC, #4]
0x059A	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setCS_2:
0x059C	0x4770    BX	LR
0x059E	0xBF00    NOP
0x05A0	0x88484209  	DIO_P5OUT+0
; end of clicker_2_MSP432__setCS_2
clicker_2_MSP432__setSCK_2:
;__c2_msp432_gpio.c, 71 :: 		static void _setSCK_2 (uint8_t value) 	{ DIO_P1OUT.B5 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x058C	0x4901    LDR	R1, [PC, #4]
0x058E	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setSCK_2:
0x0590	0x4770    BX	LR
0x0592	0xBF00    NOP
0x0594	0x80544209  	DIO_P1OUT+0
; end of clicker_2_MSP432__setSCK_2
clicker_2_MSP432__setMISO_2:
;__c2_msp432_gpio.c, 72 :: 		static void _setMISO_2(uint8_t value) 	{ DIO_P1OUT.B7 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x0580	0x4901    LDR	R1, [PC, #4]
0x0582	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setMISO_2:
0x0584	0x4770    BX	LR
0x0586	0xBF00    NOP
0x0588	0x805C4209  	DIO_P1OUT+0
; end of clicker_2_MSP432__setMISO_2
clicker_2_MSP432__setMOSI_2:
;__c2_msp432_gpio.c, 73 :: 		static void _setMOSI_2(uint8_t value) 	{ DIO_P1OUT.B6 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x05A4	0x4901    LDR	R1, [PC, #4]
0x05A6	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setMOSI_2:
0x05A8	0x4770    BX	LR
0x05AA	0xBF00    NOP
0x05AC	0x80584209  	DIO_P1OUT+0
; end of clicker_2_MSP432__setMOSI_2
clicker_2_MSP432__setPWM_2:
;__c2_msp432_gpio.c, 74 :: 		static void _setPWM_2 (uint8_t value) 	{ DIO_P2OUT.B6 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x05C8	0x4901    LDR	R1, [PC, #4]
0x05CA	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setPWM_2:
0x05CC	0x4770    BX	LR
0x05CE	0xBF00    NOP
0x05D0	0x80784209  	DIO_P2OUT+0
; end of clicker_2_MSP432__setPWM_2
clicker_2_MSP432__setINT_2:
;__c2_msp432_gpio.c, 75 :: 		static void _setINT_2 (uint8_t value) 	{ DIO_P6OUT.B6 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x05BC	0x4901    LDR	R1, [PC, #4]
0x05BE	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setINT_2:
0x05C0	0x4770    BX	LR
0x05C2	0xBF00    NOP
0x05C4	0x88784209  	DIO_P6OUT+0
; end of clicker_2_MSP432__setINT_2
clicker_2_MSP432__setRX_2:
;__c2_msp432_gpio.c, 76 :: 		static void _setRX_2  (uint8_t value) 	{ DIO_P2OUT.B2 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x05B0	0x4901    LDR	R1, [PC, #4]
0x05B2	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setRX_2:
0x05B4	0x4770    BX	LR
0x05B6	0xBF00    NOP
0x05B8	0x80684209  	DIO_P2OUT+0
; end of clicker_2_MSP432__setRX_2
clicker_2_MSP432__setTX_2:
;__c2_msp432_gpio.c, 77 :: 		static void _setTX_2  (uint8_t value) 	{ DIO_P2OUT.B3 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x02B0	0x4901    LDR	R1, [PC, #4]
0x02B2	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setTX_2:
0x02B4	0x4770    BX	LR
0x02B6	0xBF00    NOP
0x02B8	0x806C4209  	DIO_P2OUT+0
; end of clicker_2_MSP432__setTX_2
clicker_2_MSP432__setSCL_2:
;__c2_msp432_gpio.c, 78 :: 		static void _setSCL_2 (uint8_t value) 	{ DIO_P6OUT.B5 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x02A4	0x4901    LDR	R1, [PC, #4]
0x02A6	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setSCL_2:
0x02A8	0x4770    BX	LR
0x02AA	0xBF00    NOP
0x02AC	0x88744209  	DIO_P6OUT+0
; end of clicker_2_MSP432__setSCL_2
clicker_2_MSP432__setSDA_2:
;__c2_msp432_gpio.c, 79 :: 		static void _setSDA_2 (uint8_t value) 	{ DIO_P6OUT.B4 = value; }
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
0x0298	0x4901    LDR	R1, [PC, #4]
0x029A	0x7008    STRB	R0, [R1, #0]
; value end address is: 0 (R0)
L_end__setSDA_2:
0x029C	0x4770    BX	LR
0x029E	0xBF00    NOP
0x02A0	0x88704209  	DIO_P6OUT+0
; end of clicker_2_MSP432__setSDA_2
__Lib_I2C_MSP_I2C_setSlaveAddress:
;__Lib_I2C_MSP.c, 90 :: 		
; slaveAddress start address is: 4 (R1)
; I2C_BASE start address is: 0 (R0)
0x02BC	0xB081    SUB	SP, SP, #4
; slaveAddress end address is: 4 (R1)
; I2C_BASE end address is: 0 (R0)
; I2C_BASE start address is: 0 (R0)
; slaveAddress start address is: 4 (R1)
;__Lib_I2C_MSP.c, 91 :: 		
0x02BE	0xF2000214  ADDW	R2, R0, #20
0x02C2	0x8812    LDRH	R2, [R2, #0]
;__Lib_I2C_MSP.c, 92 :: 		
0x02C4	0x428A    CMP	R2, R1
0x02C6	0xD00F    BEQ	L___Lib_I2C_MSP_I2C_setSlaveAddress118
0x02C8	0xF2000216  ADDW	R2, R0, #22
0x02CC	0x8812    LDRH	R2, [R2, #0]
0x02CE	0x428A    CMP	R2, R1
0x02D0	0xD00A    BEQ	L___Lib_I2C_MSP_I2C_setSlaveAddress117
;__Lib_I2C_MSP.c, 93 :: 		
0x02D2	0xF2000218  ADDW	R2, R0, #24
0x02D6	0x8812    LDRH	R2, [R2, #0]
0x02D8	0x428A    CMP	R2, R1
0x02DA	0xD005    BEQ	L___Lib_I2C_MSP_I2C_setSlaveAddress116
;__Lib_I2C_MSP.c, 94 :: 		
0x02DC	0xF200021A  ADDW	R2, R0, #26
0x02E0	0x8812    LDRH	R2, [R2, #0]
0x02E2	0x428A    CMP	R2, R1
0x02E4	0xD000    BEQ	L___Lib_I2C_MSP_I2C_setSlaveAddress115
0x02E6	0xE000    B	L___Lib_I2C_MSP_I2C_setSlaveAddress2
; I2C_BASE end address is: 0 (R0)
; slaveAddress end address is: 4 (R1)
;__Lib_I2C_MSP.c, 92 :: 		
L___Lib_I2C_MSP_I2C_setSlaveAddress118:
L___Lib_I2C_MSP_I2C_setSlaveAddress117:
;__Lib_I2C_MSP.c, 93 :: 		
L___Lib_I2C_MSP_I2C_setSlaveAddress116:
;__Lib_I2C_MSP.c, 94 :: 		
L___Lib_I2C_MSP_I2C_setSlaveAddress115:
0x02E8	0xE002    B	L_end_I2C_setSlaveAddress
L___Lib_I2C_MSP_I2C_setSlaveAddress2:
;__Lib_I2C_MSP.c, 96 :: 		
; slaveAddress start address is: 4 (R1)
; I2C_BASE start address is: 0 (R0)
0x02EA	0xF2000220  ADDW	R2, R0, #32
; I2C_BASE end address is: 0 (R0)
0x02EE	0x8011    STRH	R1, [R2, #0]
; slaveAddress end address is: 4 (R1)
;__Lib_I2C_MSP.c, 97 :: 		
L_end_I2C_setSlaveAddress:
0x02F0	0xB001    ADD	SP, SP, #4
0x02F2	0x4770    BX	LR
; end of __Lib_I2C_MSP_I2C_setSlaveAddress
__Lib_I2C_MSP_I2Cx_Start:
;__Lib_I2C_MSP.c, 159 :: 		
; mode start address is: 4 (R1)
; I2C_BASE start address is: 0 (R0)
0x0428	0xB085    SUB	SP, SP, #20
0x042A	0xF8CDE000  STR	LR, [SP, #0]
0x042E	0xB2CC    UXTB	R4, R1
0x0430	0x4601    MOV	R1, R0
; mode end address is: 4 (R1)
; I2C_BASE end address is: 0 (R0)
; I2C_BASE start address is: 4 (R1)
; mode start address is: 16 (R4)
;__Lib_I2C_MSP.c, 162 :: 		
0x0432	0x4A46    LDR	R2, [PC, #280]
0x0434	0x4291    CMP	R1, R2
0x0436	0xD10A    BNE	L___Lib_I2C_MSP_I2Cx_Start14
;__Lib_I2C_MSP.c, 163 :: 		
0x0438	0x4B45    LDR	R3, [PC, #276]
0x043A	0x681A    LDR	R2, [R3, #0]
0x043C	0x9203    STR	R2, [SP, #12]
0x043E	0x461A    MOV	R2, R3
0x0440	0x6812    LDR	R2, [R2, #0]
0x0442	0x9204    STR	R2, [SP, #16]
;__Lib_I2C_MSP.c, 164 :: 		
0x0444	0x4A43    LDR	R2, [PC, #268]
0x0446	0x6813    LDR	R3, [R2, #0]
0x0448	0x4A43    LDR	R2, [PC, #268]
0x044A	0x6013    STR	R3, [R2, #0]
;__Lib_I2C_MSP.c, 165 :: 		
0x044C	0xE028    B	L___Lib_I2C_MSP_I2Cx_Start15
L___Lib_I2C_MSP_I2Cx_Start14:
;__Lib_I2C_MSP.c, 166 :: 		
0x044E	0x4A43    LDR	R2, [PC, #268]
0x0450	0x4291    CMP	R1, R2
0x0452	0xD10A    BNE	L___Lib_I2C_MSP_I2Cx_Start16
;__Lib_I2C_MSP.c, 167 :: 		
0x0454	0x4B42    LDR	R3, [PC, #264]
0x0456	0x681A    LDR	R2, [R3, #0]
0x0458	0x9203    STR	R2, [SP, #12]
0x045A	0x461A    MOV	R2, R3
0x045C	0x6812    LDR	R2, [R2, #0]
0x045E	0x9204    STR	R2, [SP, #16]
;__Lib_I2C_MSP.c, 168 :: 		
0x0460	0x4A40    LDR	R2, [PC, #256]
0x0462	0x6813    LDR	R3, [R2, #0]
0x0464	0x4A3C    LDR	R2, [PC, #240]
0x0466	0x6013    STR	R3, [R2, #0]
;__Lib_I2C_MSP.c, 169 :: 		
0x0468	0xE01A    B	L___Lib_I2C_MSP_I2Cx_Start17
L___Lib_I2C_MSP_I2Cx_Start16:
;__Lib_I2C_MSP.c, 170 :: 		
0x046A	0x4A3F    LDR	R2, [PC, #252]
0x046C	0x4291    CMP	R1, R2
0x046E	0xD10A    BNE	L___Lib_I2C_MSP_I2Cx_Start18
;__Lib_I2C_MSP.c, 171 :: 		
0x0470	0x4B3E    LDR	R3, [PC, #248]
0x0472	0x681A    LDR	R2, [R3, #0]
0x0474	0x9203    STR	R2, [SP, #12]
0x0476	0x461A    MOV	R2, R3
0x0478	0x6812    LDR	R2, [R2, #0]
0x047A	0x9204    STR	R2, [SP, #16]
;__Lib_I2C_MSP.c, 172 :: 		
0x047C	0x4A3C    LDR	R2, [PC, #240]
0x047E	0x6813    LDR	R3, [R2, #0]
0x0480	0x4A35    LDR	R2, [PC, #212]
0x0482	0x6013    STR	R3, [R2, #0]
;__Lib_I2C_MSP.c, 173 :: 		
0x0484	0xE00C    B	L___Lib_I2C_MSP_I2Cx_Start19
L___Lib_I2C_MSP_I2Cx_Start18:
;__Lib_I2C_MSP.c, 174 :: 		
0x0486	0x4A3B    LDR	R2, [PC, #236]
0x0488	0x4291    CMP	R1, R2
0x048A	0xD109    BNE	L___Lib_I2C_MSP_I2Cx_Start20
;__Lib_I2C_MSP.c, 175 :: 		
0x048C	0x4B3A    LDR	R3, [PC, #232]
0x048E	0x681A    LDR	R2, [R3, #0]
0x0490	0x9203    STR	R2, [SP, #12]
0x0492	0x461A    MOV	R2, R3
0x0494	0x6812    LDR	R2, [R2, #0]
0x0496	0x9204    STR	R2, [SP, #16]
;__Lib_I2C_MSP.c, 176 :: 		
0x0498	0x4A38    LDR	R2, [PC, #224]
0x049A	0x6813    LDR	R3, [R2, #0]
0x049C	0x4A2E    LDR	R2, [PC, #184]
0x049E	0x6013    STR	R3, [R2, #0]
;__Lib_I2C_MSP.c, 177 :: 		
L___Lib_I2C_MSP_I2Cx_Start20:
L___Lib_I2C_MSP_I2Cx_Start19:
L___Lib_I2C_MSP_I2Cx_Start17:
L___Lib_I2C_MSP_I2Cx_Start15:
;__Lib_I2C_MSP.c, 179 :: 		
0x04A0	0xF88D4004  STRB	R4, [SP, #4]
0x04A4	0x9102    STR	R1, [SP, #8]
0x04A6	0x4608    MOV	R0, R1
0x04A8	0xF7FFFE36  BL	__Lib_I2C_MSP_I2Cx_Wait_For_Idle+0
0x04AC	0x9902    LDR	R1, [SP, #8]
0x04AE	0xF89D4004  LDRB	R4, [SP, #4]
0x04B2	0xB108    CBZ	R0, L___Lib_I2C_MSP_I2Cx_Start21
; I2C_BASE end address is: 4 (R1)
; mode end address is: 16 (R4)
;__Lib_I2C_MSP.c, 180 :: 		
0x04B4	0x2001    MOVS	R0, #1
0x04B6	0xE044    B	L_end_I2Cx_Start
L___Lib_I2C_MSP_I2Cx_Start21:
;__Lib_I2C_MSP.c, 182 :: 		
; mode start address is: 16 (R4)
; I2C_BASE start address is: 4 (R1)
0x04B8	0xB2E3    UXTB	R3, R4
0x04BA	0x880A    LDRH	R2, [R1, #0]
0x04BC	0xF3631204  BFI	R2, R3, #4, #1
0x04C0	0x800A    STRH	R2, [R1, #0]
;__Lib_I2C_MSP.c, 185 :: 		
0x04C2	0x880A    LDRH	R2, [R1, #0]
0x04C4	0xF0420202  ORR	R2, R2, #2
0x04C8	0x800A    STRH	R2, [R1, #0]
;__Lib_I2C_MSP.c, 187 :: 		
0x04CA	0x2C01    CMP	R4, #1
0x04CC	0xD11C    BNE	L___Lib_I2C_MSP_I2Cx_Start22
; I2C_BASE end address is: 4 (R1)
; mode end address is: 16 (R4)
0x04CE	0x4608    MOV	R0, R1
;__Lib_I2C_MSP.c, 188 :: 		
L___Lib_I2C_MSP_I2Cx_Start23:
; I2C_BASE start address is: 0 (R0)
0x04D0	0xF200022C  ADDW	R2, R0, #44
0x04D4	0x8813    LDRH	R3, [R2, #0]
0x04D6	0xF3C30240  UBFX	R2, R3, #1, #1
0x04DA	0xB96A    CBNZ	R2, L___Lib_I2C_MSP_I2Cx_Start24
;__Lib_I2C_MSP.c, 189 :: 		
0x04DC	0x9A04    LDR	R2, [SP, #16]
0x04DE	0xB152    CBZ	R2, L___Lib_I2C_MSP_I2Cx_Start25
;__Lib_I2C_MSP.c, 190 :: 		
0x04E0	0x9A03    LDR	R2, [SP, #12]
0x04E2	0xB92A    CBNZ	R2, L___Lib_I2C_MSP_I2Cx_Start26
; I2C_BASE end address is: 0 (R0)
;__Lib_I2C_MSP.c, 191 :: 		
0x04E4	0x2006    MOVS	R0, #6
0x04E6	0x4C1C    LDR	R4, [PC, #112]
0x04E8	0x6824    LDR	R4, [R4, #0]
0x04EA	0x47A0    BLX	R4
;__Lib_I2C_MSP.c, 192 :: 		
0x04EC	0x2001    MOVS	R0, #1
0x04EE	0xE028    B	L_end_I2Cx_Start
;__Lib_I2C_MSP.c, 193 :: 		
L___Lib_I2C_MSP_I2Cx_Start26:
;__Lib_I2C_MSP.c, 194 :: 		
; I2C_BASE start address is: 0 (R0)
0x04F0	0x9A03    LDR	R2, [SP, #12]
0x04F2	0x1E52    SUBS	R2, R2, #1
0x04F4	0x9203    STR	R2, [SP, #12]
;__Lib_I2C_MSP.c, 195 :: 		
L___Lib_I2C_MSP_I2Cx_Start25:
;__Lib_I2C_MSP.c, 196 :: 		
0x04F6	0xE7EB    B	L___Lib_I2C_MSP_I2Cx_Start23
L___Lib_I2C_MSP_I2Cx_Start24:
;__Lib_I2C_MSP.c, 197 :: 		
0x04F8	0xF200042C  ADDW	R4, R0, #44
; I2C_BASE end address is: 0 (R0)
0x04FC	0x2300    MOVS	R3, #0
0x04FE	0x8822    LDRH	R2, [R4, #0]
0x0500	0xF3630241  BFI	R2, R3, #1, #1
0x0504	0x8022    STRH	R2, [R4, #0]
;__Lib_I2C_MSP.c, 198 :: 		
0x0506	0xE01B    B	L___Lib_I2C_MSP_I2Cx_Start27
L___Lib_I2C_MSP_I2Cx_Start22:
;__Lib_I2C_MSP.c, 200 :: 		
; I2C_BASE start address is: 4 (R1)
0x0508	0x4608    MOV	R0, R1
L___Lib_I2C_MSP_I2Cx_Start28:
; I2C_BASE end address is: 4 (R1)
; I2C_BASE start address is: 0 (R0)
0x050A	0xF200022C  ADDW	R2, R0, #44
0x050E	0x8813    LDRH	R3, [R2, #0]
0x0510	0xF3C30200  UBFX	R2, R3, #0, #1
0x0514	0xB96A    CBNZ	R2, L___Lib_I2C_MSP_I2Cx_Start29
;__Lib_I2C_MSP.c, 201 :: 		
0x0516	0x9A04    LDR	R2, [SP, #16]
0x0518	0xB152    CBZ	R2, L___Lib_I2C_MSP_I2Cx_Start30
;__Lib_I2C_MSP.c, 202 :: 		
0x051A	0x9A03    LDR	R2, [SP, #12]
0x051C	0xB92A    CBNZ	R2, L___Lib_I2C_MSP_I2Cx_Start31
; I2C_BASE end address is: 0 (R0)
;__Lib_I2C_MSP.c, 203 :: 		
0x051E	0x2006    MOVS	R0, #6
0x0520	0x4C0D    LDR	R4, [PC, #52]
0x0522	0x6824    LDR	R4, [R4, #0]
0x0524	0x47A0    BLX	R4
;__Lib_I2C_MSP.c, 204 :: 		
0x0526	0x2001    MOVS	R0, #1
0x0528	0xE00B    B	L_end_I2Cx_Start
;__Lib_I2C_MSP.c, 205 :: 		
L___Lib_I2C_MSP_I2Cx_Start31:
;__Lib_I2C_MSP.c, 206 :: 		
; I2C_BASE start address is: 0 (R0)
0x052A	0x9A03    LDR	R2, [SP, #12]
0x052C	0x1E52    SUBS	R2, R2, #1
0x052E	0x9203    STR	R2, [SP, #12]
;__Lib_I2C_MSP.c, 207 :: 		
L___Lib_I2C_MSP_I2Cx_Start30:
;__Lib_I2C_MSP.c, 208 :: 		
0x0530	0xE7EB    B	L___Lib_I2C_MSP_I2Cx_Start28
L___Lib_I2C_MSP_I2Cx_Start29:
;__Lib_I2C_MSP.c, 209 :: 		
0x0532	0xF200042C  ADDW	R4, R0, #44
; I2C_BASE end address is: 0 (R0)
0x0536	0x2300    MOVS	R3, #0
0x0538	0x8822    LDRH	R2, [R4, #0]
0x053A	0xF3630200  BFI	R2, R3, #0, #1
0x053E	0x8022    STRH	R2, [R4, #0]
;__Lib_I2C_MSP.c, 210 :: 		
L___Lib_I2C_MSP_I2Cx_Start27:
;__Lib_I2C_MSP.c, 212 :: 		
0x0540	0x2000    MOVS	R0, #0
;__Lib_I2C_MSP.c, 213 :: 		
L_end_I2Cx_Start:
0x0542	0xF8DDE000  LDR	LR, [SP, #0]
0x0546	0xB005    ADD	SP, SP, #20
0x0548	0x4770    BX	LR
0x054A	0xBF00    NOP
0x054C	0x20004000  	EUSCI_B0_UCB0CTLW0+0
0x0550	0x00842000  	__Lib_I2C_MSP__I2C0_TIMEOUT+0
0x0554	0x37842000  	_I2C0_timeout_Ptr+0
0x0558	0x37802000  	__Lib_I2C_MSP_I2C_Timeout_Ptr+0
0x055C	0x24004000  	EUSCI_B1_UCB1CTLW0+0
0x0560	0x00882000  	__Lib_I2C_MSP__I2C1_TIMEOUT+0
0x0564	0x37882000  	_I2C1_timeout_Ptr+0
0x0568	0x28004000  	EUSCI_B2_UCB2CTLW0+0
0x056C	0x008C2000  	__Lib_I2C_MSP__I2C2_TIMEOUT+0
0x0570	0x378C2000  	_I2C2_timeout_Ptr+0
0x0574	0x2C004000  	EUSCI_B3_UCB3CTLW0+0
0x0578	0x00902000  	__Lib_I2C_MSP__I2C3_TIMEOUT+0
0x057C	0x37902000  	_I2C3_timeout_Ptr+0
; end of __Lib_I2C_MSP_I2Cx_Start
__Lib_I2C_MSP_I2Cx_Wait_For_Idle:
;__Lib_I2C_MSP.c, 125 :: 		
; I2C_BASE start address is: 0 (R0)
0x0118	0xB083    SUB	SP, SP, #12
0x011A	0xF8CDE000  STR	LR, [SP, #0]
; I2C_BASE end address is: 0 (R0)
; I2C_BASE start address is: 0 (R0)
;__Lib_I2C_MSP.c, 128 :: 		
0x011E	0x4927    LDR	R1, [PC, #156]
0x0120	0x4288    CMP	R0, R1
0x0122	0xD10A    BNE	L___Lib_I2C_MSP_I2Cx_Wait_For_Idle3
;__Lib_I2C_MSP.c, 129 :: 		
0x0124	0x4A26    LDR	R2, [PC, #152]
0x0126	0x6811    LDR	R1, [R2, #0]
0x0128	0x9101    STR	R1, [SP, #4]
0x012A	0x4611    MOV	R1, R2
0x012C	0x6809    LDR	R1, [R1, #0]
0x012E	0x9102    STR	R1, [SP, #8]
;__Lib_I2C_MSP.c, 130 :: 		
0x0130	0x4924    LDR	R1, [PC, #144]
0x0132	0x680A    LDR	R2, [R1, #0]
0x0134	0x4924    LDR	R1, [PC, #144]
0x0136	0x600A    STR	R2, [R1, #0]
;__Lib_I2C_MSP.c, 131 :: 		
0x0138	0xE028    B	L___Lib_I2C_MSP_I2Cx_Wait_For_Idle4
L___Lib_I2C_MSP_I2Cx_Wait_For_Idle3:
;__Lib_I2C_MSP.c, 132 :: 		
0x013A	0x4924    LDR	R1, [PC, #144]
0x013C	0x4288    CMP	R0, R1
0x013E	0xD10A    BNE	L___Lib_I2C_MSP_I2Cx_Wait_For_Idle5
;__Lib_I2C_MSP.c, 133 :: 		
0x0140	0x4A23    LDR	R2, [PC, #140]
0x0142	0x6811    LDR	R1, [R2, #0]
0x0144	0x9101    STR	R1, [SP, #4]
0x0146	0x4611    MOV	R1, R2
0x0148	0x6809    LDR	R1, [R1, #0]
0x014A	0x9102    STR	R1, [SP, #8]
;__Lib_I2C_MSP.c, 134 :: 		
0x014C	0x4921    LDR	R1, [PC, #132]
0x014E	0x680A    LDR	R2, [R1, #0]
0x0150	0x491D    LDR	R1, [PC, #116]
0x0152	0x600A    STR	R2, [R1, #0]
;__Lib_I2C_MSP.c, 135 :: 		
0x0154	0xE01A    B	L___Lib_I2C_MSP_I2Cx_Wait_For_Idle6
L___Lib_I2C_MSP_I2Cx_Wait_For_Idle5:
;__Lib_I2C_MSP.c, 136 :: 		
0x0156	0x4920    LDR	R1, [PC, #128]
0x0158	0x4288    CMP	R0, R1
0x015A	0xD10A    BNE	L___Lib_I2C_MSP_I2Cx_Wait_For_Idle7
;__Lib_I2C_MSP.c, 137 :: 		
0x015C	0x4A1F    LDR	R2, [PC, #124]
0x015E	0x6811    LDR	R1, [R2, #0]
0x0160	0x9101    STR	R1, [SP, #4]
0x0162	0x4611    MOV	R1, R2
0x0164	0x6809    LDR	R1, [R1, #0]
0x0166	0x9102    STR	R1, [SP, #8]
;__Lib_I2C_MSP.c, 138 :: 		
0x0168	0x491D    LDR	R1, [PC, #116]
0x016A	0x680A    LDR	R2, [R1, #0]
0x016C	0x4916    LDR	R1, [PC, #88]
0x016E	0x600A    STR	R2, [R1, #0]
;__Lib_I2C_MSP.c, 139 :: 		
0x0170	0xE00C    B	L___Lib_I2C_MSP_I2Cx_Wait_For_Idle8
L___Lib_I2C_MSP_I2Cx_Wait_For_Idle7:
;__Lib_I2C_MSP.c, 140 :: 		
0x0172	0x491C    LDR	R1, [PC, #112]
0x0174	0x4288    CMP	R0, R1
0x0176	0xD109    BNE	L___Lib_I2C_MSP_I2Cx_Wait_For_Idle9
;__Lib_I2C_MSP.c, 141 :: 		
0x0178	0x4A1B    LDR	R2, [PC, #108]
0x017A	0x6811    LDR	R1, [R2, #0]
0x017C	0x9101    STR	R1, [SP, #4]
0x017E	0x4611    MOV	R1, R2
0x0180	0x6809    LDR	R1, [R1, #0]
0x0182	0x9102    STR	R1, [SP, #8]
;__Lib_I2C_MSP.c, 142 :: 		
0x0184	0x4919    LDR	R1, [PC, #100]
0x0186	0x680A    LDR	R2, [R1, #0]
0x0188	0x490F    LDR	R1, [PC, #60]
0x018A	0x600A    STR	R2, [R1, #0]
;__Lib_I2C_MSP.c, 143 :: 		
L___Lib_I2C_MSP_I2Cx_Wait_For_Idle9:
L___Lib_I2C_MSP_I2Cx_Wait_For_Idle8:
L___Lib_I2C_MSP_I2Cx_Wait_For_Idle6:
L___Lib_I2C_MSP_I2Cx_Wait_For_Idle4:
;__Lib_I2C_MSP.c, 145 :: 		
0x018C	0x4603    MOV	R3, R0
; I2C_BASE end address is: 0 (R0)
L___Lib_I2C_MSP_I2Cx_Wait_For_Idle10:
; I2C_BASE start address is: 12 (R3)
0x018E	0x4618    MOV	R0, R3
0x0190	0xF7FFFFB6  BL	__Lib_I2C_MSP_I2Cx_Is_Idle+0
0x0194	0xB968    CBNZ	R0, L___Lib_I2C_MSP_I2Cx_Wait_For_Idle11
;__Lib_I2C_MSP.c, 147 :: 		
0x0196	0x9902    LDR	R1, [SP, #8]
0x0198	0xB151    CBZ	R1, L___Lib_I2C_MSP_I2Cx_Wait_For_Idle12
;__Lib_I2C_MSP.c, 148 :: 		
0x019A	0x9901    LDR	R1, [SP, #4]
0x019C	0xB929    CBNZ	R1, L___Lib_I2C_MSP_I2Cx_Wait_For_Idle13
; I2C_BASE end address is: 12 (R3)
;__Lib_I2C_MSP.c, 149 :: 		
0x019E	0x2005    MOVS	R0, #5
0x01A0	0x4C09    LDR	R4, [PC, #36]
0x01A2	0x6824    LDR	R4, [R4, #0]
0x01A4	0x47A0    BLX	R4
;__Lib_I2C_MSP.c, 150 :: 		
0x01A6	0x2001    MOVS	R0, #1
0x01A8	0xE004    B	L_end_I2Cx_Wait_For_Idle
;__Lib_I2C_MSP.c, 151 :: 		
L___Lib_I2C_MSP_I2Cx_Wait_For_Idle13:
;__Lib_I2C_MSP.c, 152 :: 		
; I2C_BASE start address is: 12 (R3)
0x01AA	0x9901    LDR	R1, [SP, #4]
0x01AC	0x1E49    SUBS	R1, R1, #1
0x01AE	0x9101    STR	R1, [SP, #4]
;__Lib_I2C_MSP.c, 153 :: 		
L___Lib_I2C_MSP_I2Cx_Wait_For_Idle12:
;__Lib_I2C_MSP.c, 154 :: 		
; I2C_BASE end address is: 12 (R3)
0x01B0	0xE7ED    B	L___Lib_I2C_MSP_I2Cx_Wait_For_Idle10
L___Lib_I2C_MSP_I2Cx_Wait_For_Idle11:
;__Lib_I2C_MSP.c, 155 :: 		
0x01B2	0x2000    MOVS	R0, #0
;__Lib_I2C_MSP.c, 156 :: 		
L_end_I2Cx_Wait_For_Idle:
0x01B4	0xF8DDE000  LDR	LR, [SP, #0]
0x01B8	0xB003    ADD	SP, SP, #12
0x01BA	0x4770    BX	LR
0x01BC	0x20004000  	EUSCI_B0_UCB0CTLW0+0
0x01C0	0x00842000  	__Lib_I2C_MSP__I2C0_TIMEOUT+0
0x01C4	0x37842000  	_I2C0_timeout_Ptr+0
0x01C8	0x37802000  	__Lib_I2C_MSP_I2C_Timeout_Ptr+0
0x01CC	0x24004000  	EUSCI_B1_UCB1CTLW0+0
0x01D0	0x00882000  	__Lib_I2C_MSP__I2C1_TIMEOUT+0
0x01D4	0x37882000  	_I2C1_timeout_Ptr+0
0x01D8	0x28004000  	EUSCI_B2_UCB2CTLW0+0
0x01DC	0x008C2000  	__Lib_I2C_MSP__I2C2_TIMEOUT+0
0x01E0	0x378C2000  	_I2C2_timeout_Ptr+0
0x01E4	0x2C004000  	EUSCI_B3_UCB3CTLW0+0
0x01E8	0x00902000  	__Lib_I2C_MSP__I2C3_TIMEOUT+0
0x01EC	0x37902000  	_I2C3_timeout_Ptr+0
; end of __Lib_I2C_MSP_I2Cx_Wait_For_Idle
__Lib_I2C_MSP_I2Cx_Is_Idle:
;__Lib_I2C_MSP.c, 121 :: 		
; I2C_BASE start address is: 0 (R0)
0x0100	0xB081    SUB	SP, SP, #4
; I2C_BASE end address is: 0 (R0)
; I2C_BASE start address is: 0 (R0)
;__Lib_I2C_MSP.c, 122 :: 		
0x0102	0xF2000108  ADDW	R1, R0, #8
; I2C_BASE end address is: 0 (R0)
0x0106	0x880A    LDRH	R2, [R1, #0]
0x0108	0xF3C21100  UBFX	R1, R2, #4, #1
0x010C	0xF0810101  EOR	R1, R1, #1
0x0110	0xB2C9    UXTB	R1, R1
0x0112	0xB2C8    UXTB	R0, R1
;__Lib_I2C_MSP.c, 123 :: 		
L_end_I2Cx_Is_Idle:
0x0114	0xB001    ADD	SP, SP, #4
0x0116	0x4770    BX	LR
; end of __Lib_I2C_MSP_I2Cx_Is_Idle
__Lib_I2C_MSP_I2Cx_WriteByte:
;__Lib_I2C_MSP.c, 222 :: 		
; dataByte start address is: 4 (R1)
; I2C_BASE start address is: 0 (R0)
0x0318	0xB083    SUB	SP, SP, #12
0x031A	0xF8CDE000  STR	LR, [SP, #0]
; dataByte end address is: 4 (R1)
; I2C_BASE end address is: 0 (R0)
; I2C_BASE start address is: 0 (R0)
; dataByte start address is: 4 (R1)
;__Lib_I2C_MSP.c, 225 :: 		
0x031E	0x4A35    LDR	R2, [PC, #212]
0x0320	0x4290    CMP	R0, R2
0x0322	0xD10A    BNE	L___Lib_I2C_MSP_I2Cx_WriteByte33
;__Lib_I2C_MSP.c, 226 :: 		
0x0324	0x4B34    LDR	R3, [PC, #208]
0x0326	0x681A    LDR	R2, [R3, #0]
0x0328	0x9201    STR	R2, [SP, #4]
0x032A	0x461A    MOV	R2, R3
0x032C	0x6812    LDR	R2, [R2, #0]
0x032E	0x9202    STR	R2, [SP, #8]
;__Lib_I2C_MSP.c, 227 :: 		
0x0330	0x4A32    LDR	R2, [PC, #200]
0x0332	0x6813    LDR	R3, [R2, #0]
0x0334	0x4A32    LDR	R2, [PC, #200]
0x0336	0x6013    STR	R3, [R2, #0]
;__Lib_I2C_MSP.c, 228 :: 		
0x0338	0xE028    B	L___Lib_I2C_MSP_I2Cx_WriteByte34
L___Lib_I2C_MSP_I2Cx_WriteByte33:
;__Lib_I2C_MSP.c, 229 :: 		
0x033A	0x4A32    LDR	R2, [PC, #200]
0x033C	0x4290    CMP	R0, R2
0x033E	0xD10A    BNE	L___Lib_I2C_MSP_I2Cx_WriteByte35
;__Lib_I2C_MSP.c, 230 :: 		
0x0340	0x4B31    LDR	R3, [PC, #196]
0x0342	0x681A    LDR	R2, [R3, #0]
0x0344	0x9201    STR	R2, [SP, #4]
0x0346	0x461A    MOV	R2, R3
0x0348	0x6812    LDR	R2, [R2, #0]
0x034A	0x9202    STR	R2, [SP, #8]
;__Lib_I2C_MSP.c, 231 :: 		
0x034C	0x4A2F    LDR	R2, [PC, #188]
0x034E	0x6813    LDR	R3, [R2, #0]
0x0350	0x4A2B    LDR	R2, [PC, #172]
0x0352	0x6013    STR	R3, [R2, #0]
;__Lib_I2C_MSP.c, 232 :: 		
0x0354	0xE01A    B	L___Lib_I2C_MSP_I2Cx_WriteByte36
L___Lib_I2C_MSP_I2Cx_WriteByte35:
;__Lib_I2C_MSP.c, 233 :: 		
0x0356	0x4A2E    LDR	R2, [PC, #184]
0x0358	0x4290    CMP	R0, R2
0x035A	0xD10A    BNE	L___Lib_I2C_MSP_I2Cx_WriteByte37
;__Lib_I2C_MSP.c, 234 :: 		
0x035C	0x4B2D    LDR	R3, [PC, #180]
0x035E	0x681A    LDR	R2, [R3, #0]
0x0360	0x9201    STR	R2, [SP, #4]
0x0362	0x461A    MOV	R2, R3
0x0364	0x6812    LDR	R2, [R2, #0]
0x0366	0x9202    STR	R2, [SP, #8]
;__Lib_I2C_MSP.c, 235 :: 		
0x0368	0x4A2B    LDR	R2, [PC, #172]
0x036A	0x6813    LDR	R3, [R2, #0]
0x036C	0x4A24    LDR	R2, [PC, #144]
0x036E	0x6013    STR	R3, [R2, #0]
;__Lib_I2C_MSP.c, 236 :: 		
0x0370	0xE00C    B	L___Lib_I2C_MSP_I2Cx_WriteByte38
L___Lib_I2C_MSP_I2Cx_WriteByte37:
;__Lib_I2C_MSP.c, 237 :: 		
0x0372	0x4A2A    LDR	R2, [PC, #168]
0x0374	0x4290    CMP	R0, R2
0x0376	0xD109    BNE	L___Lib_I2C_MSP_I2Cx_WriteByte39
;__Lib_I2C_MSP.c, 238 :: 		
0x0378	0x4B29    LDR	R3, [PC, #164]
0x037A	0x681A    LDR	R2, [R3, #0]
0x037C	0x9201    STR	R2, [SP, #4]
0x037E	0x461A    MOV	R2, R3
0x0380	0x6812    LDR	R2, [R2, #0]
0x0382	0x9202    STR	R2, [SP, #8]
;__Lib_I2C_MSP.c, 239 :: 		
0x0384	0x4A27    LDR	R2, [PC, #156]
0x0386	0x6813    LDR	R3, [R2, #0]
0x0388	0x4A1D    LDR	R2, [PC, #116]
0x038A	0x6013    STR	R3, [R2, #0]
;__Lib_I2C_MSP.c, 240 :: 		
L___Lib_I2C_MSP_I2Cx_WriteByte39:
L___Lib_I2C_MSP_I2Cx_WriteByte38:
L___Lib_I2C_MSP_I2Cx_WriteByte36:
L___Lib_I2C_MSP_I2Cx_WriteByte34:
;__Lib_I2C_MSP.c, 242 :: 		
0x038C	0xF200022C  ADDW	R2, R0, #44
0x0390	0x8813    LDRH	R3, [R2, #0]
0x0392	0xF3C31240  UBFX	R2, R3, #5, #1
0x0396	0xB132    CBZ	R2, L___Lib_I2C_MSP_I2Cx_WriteByte40
;__Lib_I2C_MSP.c, 243 :: 		
0x0398	0xF200042C  ADDW	R4, R0, #44
0x039C	0x2300    MOVS	R3, #0
0x039E	0x8822    LDRH	R2, [R4, #0]
0x03A0	0xF3631245  BFI	R2, R3, #5, #1
0x03A4	0x8022    STRH	R2, [R4, #0]
;__Lib_I2C_MSP.c, 244 :: 		
L___Lib_I2C_MSP_I2Cx_WriteByte40:
;__Lib_I2C_MSP.c, 246 :: 		
0x03A6	0xF200020E  ADDW	R2, R0, #14
0x03AA	0x8011    STRH	R1, [R2, #0]
; dataByte end address is: 4 (R1)
; I2C_BASE end address is: 0 (R0)
;__Lib_I2C_MSP.c, 248 :: 		
L___Lib_I2C_MSP_I2Cx_WriteByte41:
; I2C_BASE start address is: 0 (R0)
0x03AC	0xF200022C  ADDW	R2, R0, #44
0x03B0	0x8813    LDRH	R3, [R2, #0]
0x03B2	0xF3C30240  UBFX	R2, R3, #1, #1
0x03B6	0xB96A    CBNZ	R2, L___Lib_I2C_MSP_I2Cx_WriteByte42
;__Lib_I2C_MSP.c, 249 :: 		
0x03B8	0x9A02    LDR	R2, [SP, #8]
0x03BA	0xB152    CBZ	R2, L___Lib_I2C_MSP_I2Cx_WriteByte43
;__Lib_I2C_MSP.c, 250 :: 		
0x03BC	0x9A01    LDR	R2, [SP, #4]
0x03BE	0xB92A    CBNZ	R2, L___Lib_I2C_MSP_I2Cx_WriteByte44
; I2C_BASE end address is: 0 (R0)
;__Lib_I2C_MSP.c, 251 :: 		
0x03C0	0x2004    MOVS	R0, #4
0x03C2	0x4C0F    LDR	R4, [PC, #60]
0x03C4	0x6824    LDR	R4, [R4, #0]
0x03C6	0x47A0    BLX	R4
;__Lib_I2C_MSP.c, 252 :: 		
0x03C8	0x2001    MOVS	R0, #1
0x03CA	0xE00F    B	L_end_I2Cx_WriteByte
;__Lib_I2C_MSP.c, 253 :: 		
L___Lib_I2C_MSP_I2Cx_WriteByte44:
;__Lib_I2C_MSP.c, 254 :: 		
; I2C_BASE start address is: 0 (R0)
0x03CC	0x9A01    LDR	R2, [SP, #4]
0x03CE	0x1E52    SUBS	R2, R2, #1
0x03D0	0x9201    STR	R2, [SP, #4]
;__Lib_I2C_MSP.c, 255 :: 		
L___Lib_I2C_MSP_I2Cx_WriteByte43:
;__Lib_I2C_MSP.c, 256 :: 		
0x03D2	0xE7EB    B	L___Lib_I2C_MSP_I2Cx_WriteByte41
L___Lib_I2C_MSP_I2Cx_WriteByte42:
;__Lib_I2C_MSP.c, 258 :: 		
0x03D4	0xF200042C  ADDW	R4, R0, #44
0x03D8	0x2300    MOVS	R3, #0
0x03DA	0x8822    LDRH	R2, [R4, #0]
0x03DC	0xF3630241  BFI	R2, R3, #1, #1
0x03E0	0x8022    STRH	R2, [R4, #0]
;__Lib_I2C_MSP.c, 260 :: 		
0x03E2	0xF200022C  ADDW	R2, R0, #44
; I2C_BASE end address is: 0 (R0)
0x03E6	0x8813    LDRH	R3, [R2, #0]
0x03E8	0xF3C31040  UBFX	R0, R3, #5, #1
;__Lib_I2C_MSP.c, 261 :: 		
L_end_I2Cx_WriteByte:
0x03EC	0xF8DDE000  LDR	LR, [SP, #0]
0x03F0	0xB003    ADD	SP, SP, #12
0x03F2	0x4770    BX	LR
0x03F4	0x20004000  	EUSCI_B0_UCB0CTLW0+0
0x03F8	0x00842000  	__Lib_I2C_MSP__I2C0_TIMEOUT+0
0x03FC	0x37842000  	_I2C0_timeout_Ptr+0
0x0400	0x37802000  	__Lib_I2C_MSP_I2C_Timeout_Ptr+0
0x0404	0x24004000  	EUSCI_B1_UCB1CTLW0+0
0x0408	0x00882000  	__Lib_I2C_MSP__I2C1_TIMEOUT+0
0x040C	0x37882000  	_I2C1_timeout_Ptr+0
0x0410	0x28004000  	EUSCI_B2_UCB2CTLW0+0
0x0414	0x008C2000  	__Lib_I2C_MSP__I2C2_TIMEOUT+0
0x0418	0x378C2000  	_I2C2_timeout_Ptr+0
0x041C	0x2C004000  	EUSCI_B3_UCB3CTLW0+0
0x0420	0x00902000  	__Lib_I2C_MSP__I2C3_TIMEOUT+0
0x0424	0x37902000  	_I2C3_timeout_Ptr+0
; end of __Lib_I2C_MSP_I2Cx_WriteByte
__Lib_I2C_MSP_I2Cx_Stop:
;__Lib_I2C_MSP.c, 215 :: 		
; I2C_BASE start address is: 0 (R0)
0x02F4	0xB081    SUB	SP, SP, #4
0x02F6	0xF8CDE000  STR	LR, [SP, #0]
; I2C_BASE end address is: 0 (R0)
; I2C_BASE start address is: 0 (R0)
;__Lib_I2C_MSP.c, 216 :: 		
0x02FA	0x2201    MOVS	R2, #1
0x02FC	0x8801    LDRH	R1, [R0, #0]
0x02FE	0xF3620182  BFI	R1, R2, #2, #1
0x0302	0x8001    STRH	R1, [R0, #0]
;__Lib_I2C_MSP.c, 217 :: 		
; I2C_BASE end address is: 0 (R0)
0x0304	0xF7FFFF08  BL	__Lib_I2C_MSP_I2Cx_Wait_For_Idle+0
0x0308	0xB108    CBZ	R0, L___Lib_I2C_MSP_I2Cx_Stop32
;__Lib_I2C_MSP.c, 218 :: 		
0x030A	0x2001    MOVS	R0, #1
0x030C	0xE000    B	L_end_I2Cx_Stop
L___Lib_I2C_MSP_I2Cx_Stop32:
;__Lib_I2C_MSP.c, 219 :: 		
0x030E	0x2000    MOVS	R0, #0
;__Lib_I2C_MSP.c, 220 :: 		
L_end_I2Cx_Stop:
0x0310	0xF8DDE000  LDR	LR, [SP, #0]
0x0314	0xB001    ADD	SP, SP, #4
0x0316	0x4770    BX	LR
; end of __Lib_I2C_MSP_I2Cx_Stop
_I2C1_Write:
;__Lib_I2C_MSP.c, 577 :: 		
; END_mode start address is: 12 (R3)
; count start address is: 8 (R2)
; buf start address is: 4 (R1)
; slave_address start address is: 0 (R0)
0x1494	0xB081    SUB	SP, SP, #4
0x1496	0xF8CDE000  STR	LR, [SP, #0]
; END_mode end address is: 12 (R3)
; count end address is: 8 (R2)
; buf end address is: 4 (R1)
; slave_address end address is: 0 (R0)
; slave_address start address is: 0 (R0)
; buf start address is: 4 (R1)
; count start address is: 8 (R2)
; END_mode start address is: 12 (R3)
;__Lib_I2C_MSP.c, 578 :: 		
0x149A	0xB408    PUSH	(R3)
; count end address is: 8 (R2)
0x149C	0x4613    MOV	R3, R2
0x149E	0x460A    MOV	R2, R1
; buf end address is: 4 (R1)
0x14A0	0xB2C1    UXTB	R1, R0
; slave_address end address is: 0 (R0)
0x14A2	0x4804    LDR	R0, [PC, #16]
; END_mode end address is: 12 (R3)
0x14A4	0xF7FFFC06  BL	__Lib_I2C_MSP_I2Cx_Write+0
0x14A8	0xB001    ADD	SP, SP, #4
;__Lib_I2C_MSP.c, 579 :: 		
L_end_I2C1_Write:
0x14AA	0xF8DDE000  LDR	LR, [SP, #0]
0x14AE	0xB001    ADD	SP, SP, #4
0x14B0	0x4770    BX	LR
0x14B2	0xBF00    NOP
0x14B4	0x24004000  	EUSCI_B1_UCB1CTLW0+0
; end of _I2C1_Write
_I2C2_Write:
;__Lib_I2C_MSP.c, 656 :: 		
; END_mode start address is: 12 (R3)
; count start address is: 8 (R2)
; buf start address is: 4 (R1)
; slave_address start address is: 0 (R0)
0x14DC	0xB081    SUB	SP, SP, #4
0x14DE	0xF8CDE000  STR	LR, [SP, #0]
; END_mode end address is: 12 (R3)
; count end address is: 8 (R2)
; buf end address is: 4 (R1)
; slave_address end address is: 0 (R0)
; slave_address start address is: 0 (R0)
; buf start address is: 4 (R1)
; count start address is: 8 (R2)
; END_mode start address is: 12 (R3)
;__Lib_I2C_MSP.c, 657 :: 		
0x14E2	0xB408    PUSH	(R3)
; count end address is: 8 (R2)
0x14E4	0x4613    MOV	R3, R2
0x14E6	0x460A    MOV	R2, R1
; buf end address is: 4 (R1)
0x14E8	0xB2C1    UXTB	R1, R0
; slave_address end address is: 0 (R0)
0x14EA	0x4804    LDR	R0, [PC, #16]
; END_mode end address is: 12 (R3)
0x14EC	0xF7FFFBE2  BL	__Lib_I2C_MSP_I2Cx_Write+0
0x14F0	0xB001    ADD	SP, SP, #4
;__Lib_I2C_MSP.c, 658 :: 		
L_end_I2C2_Write:
0x14F2	0xF8DDE000  LDR	LR, [SP, #0]
0x14F6	0xB001    ADD	SP, SP, #4
0x14F8	0x4770    BX	LR
0x14FA	0xBF00    NOP
0x14FC	0x28004000  	EUSCI_B2_UCB2CTLW0+0
; end of _I2C2_Write
_I2C3_Write:
;__Lib_I2C_MSP.c, 735 :: 		
; END_mode start address is: 12 (R3)
; count start address is: 8 (R2)
; buf start address is: 4 (R1)
; slave_address start address is: 0 (R0)
0x14B8	0xB081    SUB	SP, SP, #4
0x14BA	0xF8CDE000  STR	LR, [SP, #0]
; END_mode end address is: 12 (R3)
; count end address is: 8 (R2)
; buf end address is: 4 (R1)
; slave_address end address is: 0 (R0)
; slave_address start address is: 0 (R0)
; buf start address is: 4 (R1)
; count start address is: 8 (R2)
; END_mode start address is: 12 (R3)
;__Lib_I2C_MSP.c, 736 :: 		
0x14BE	0xB408    PUSH	(R3)
; count end address is: 8 (R2)
0x14C0	0x4613    MOV	R3, R2
0x14C2	0x460A    MOV	R2, R1
; buf end address is: 4 (R1)
0x14C4	0xB2C1    UXTB	R1, R0
; slave_address end address is: 0 (R0)
0x14C6	0x4804    LDR	R0, [PC, #16]
; END_mode end address is: 12 (R3)
0x14C8	0xF7FFFBF4  BL	__Lib_I2C_MSP_I2Cx_Write+0
0x14CC	0xB001    ADD	SP, SP, #4
;__Lib_I2C_MSP.c, 737 :: 		
L_end_I2C3_Write:
0x14CE	0xF8DDE000  LDR	LR, [SP, #0]
0x14D2	0xB001    ADD	SP, SP, #4
0x14D4	0x4770    BX	LR
0x14D6	0xBF00    NOP
0x14D8	0x2C004000  	EUSCI_B3_UCB3CTLW0+0
; end of _I2C3_Write
_Delay_10ms:
;__Lib_Delays_MSP432.c, 57 :: 		void Delay_10ms() {
;__Lib_Delays_MSP432.c, 58 :: 		Delay_ms(10);
0x1710	0xF24D47BD  MOVW	R7, #54461
0x1714	0xF2C00701  MOVT	R7, #1
0x1718	0xBF00    NOP
0x171A	0xBF00    NOP
L_Delay_10ms22:
0x171C	0x1E7F    SUBS	R7, R7, #1
0x171E	0xD1FD    BNE	L_Delay_10ms22
0x1720	0xBF00    NOP
0x1722	0xBF00    NOP
0x1724	0xBF00    NOP
;__Lib_Delays_MSP432.c, 59 :: 		}
L_end_Delay_10ms:
0x1726	0x4770    BX	LR
; end of _Delay_10ms
__irgrid2_driver_hal_i2cRead:
;__hal_msp432.c, 101 :: 		static int hal_i2cRead(uint8_t slaveAddress, uint8_t *pBuf, uint16_t nBytes, uint8_t endMode)
; endMode start address is: 12 (R3)
; nBytes start address is: 8 (R2)
; pBuf start address is: 4 (R1)
; slaveAddress start address is: 0 (R0)
0x16E0	0xB082    SUB	SP, SP, #8
0x16E2	0xF8CDE000  STR	LR, [SP, #0]
; endMode end address is: 12 (R3)
; nBytes end address is: 8 (R2)
; pBuf end address is: 4 (R1)
; slaveAddress end address is: 0 (R0)
; slaveAddress start address is: 0 (R0)
; pBuf start address is: 4 (R1)
; nBytes start address is: 8 (R2)
; endMode start address is: 12 (R3)
;__hal_msp432.c, 103 :: 		int res = 0;
0x16E6	0xF2400400  MOVW	R4, #0
0x16EA	0xF8AD4004  STRH	R4, [SP, #4]
;__hal_msp432.c, 105 :: 		fp_i2cRead(slaveAddress, ptr, nBytes, endMode);
; endMode end address is: 12 (R3)
; nBytes end address is: 8 (R2)
; pBuf end address is: 4 (R1)
; slaveAddress end address is: 0 (R0)
0x16EE	0x4C04    LDR	R4, [PC, #16]
0x16F0	0x6824    LDR	R4, [R4, #0]
0x16F2	0x47A0    BLX	R4
;__hal_msp432.c, 106 :: 		return res;
0x16F4	0xF9BD0004  LDRSH	R0, [SP, #4]
;__hal_msp432.c, 107 :: 		}
L_end_hal_i2cRead:
0x16F8	0xF8DDE000  LDR	LR, [SP, #0]
0x16FC	0xB002    ADD	SP, SP, #8
0x16FE	0x4770    BX	LR
0x1700	0x0D0C2000  	__irgrid2_driver_fp_i2cRead+0
; end of __irgrid2_driver_hal_i2cRead
_I2C0_Read:
;__Lib_I2C_MSP.c, 484 :: 		
; END_mode start address is: 12 (R3)
; count start address is: 8 (R2)
; buf start address is: 4 (R1)
; slave_address start address is: 0 (R0)
0x13A4	0xB081    SUB	SP, SP, #4
0x13A6	0xF8CDE000  STR	LR, [SP, #0]
; END_mode end address is: 12 (R3)
; count end address is: 8 (R2)
; buf end address is: 4 (R1)
; slave_address end address is: 0 (R0)
; slave_address start address is: 0 (R0)
; buf start address is: 4 (R1)
; count start address is: 8 (R2)
; END_mode start address is: 12 (R3)
;__Lib_I2C_MSP.c, 485 :: 		
0x13AA	0xB408    PUSH	(R3)
; count end address is: 8 (R2)
0x13AC	0x4613    MOV	R3, R2
0x13AE	0x460A    MOV	R2, R1
; buf end address is: 4 (R1)
0x13B0	0xB2C1    UXTB	R1, R0
; slave_address end address is: 0 (R0)
0x13B2	0x4804    LDR	R0, [PC, #16]
; END_mode end address is: 12 (R3)
0x13B4	0xF7FFFB62  BL	__Lib_I2C_MSP_I2Cx_Read+0
0x13B8	0xB001    ADD	SP, SP, #4
;__Lib_I2C_MSP.c, 486 :: 		
L_end_I2C0_Read:
0x13BA	0xF8DDE000  LDR	LR, [SP, #0]
0x13BE	0xB001    ADD	SP, SP, #4
0x13C0	0x4770    BX	LR
0x13C2	0xBF00    NOP
0x13C4	0x20004000  	EUSCI_B0_UCB0CTLW0+0
; end of _I2C0_Read
__Lib_I2C_MSP_I2Cx_Read:
;__Lib_I2C_MSP.c, 323 :: 		
; count start address is: 12 (R3)
; buf start address is: 8 (R2)
; slave_address start address is: 4 (R1)
; I2C_BASE start address is: 0 (R0)
0x0A7C	0xB087    SUB	SP, SP, #28
0x0A7E	0xF8CDE000  STR	LR, [SP, #0]
0x0A82	0xF88D1004  STRB	R1, [SP, #4]
0x0A86	0x4601    MOV	R1, R0
0x0A88	0xF89D0004  LDRB	R0, [SP, #4]
; count end address is: 12 (R3)
; buf end address is: 8 (R2)
; slave_address end address is: 4 (R1)
; I2C_BASE end address is: 0 (R0)
; I2C_BASE start address is: 4 (R1)
; slave_address start address is: 0 (R0)
; buf start address is: 8 (R2)
; count start address is: 12 (R3)
; END_mode start address is: 24 (R6)
0x0A8C	0x9E07    LDR	R6, [SP, #28]
;__Lib_I2C_MSP.c, 327 :: 		
0x0A8E	0x4C7B    LDR	R4, [PC, #492]
0x0A90	0x42A1    CMP	R1, R4
0x0A92	0xD10A    BNE	L___Lib_I2C_MSP_I2Cx_Read66
;__Lib_I2C_MSP.c, 328 :: 		
0x0A94	0x4D7A    LDR	R5, [PC, #488]
0x0A96	0x682C    LDR	R4, [R5, #0]
0x0A98	0x9405    STR	R4, [SP, #20]
0x0A9A	0x462C    MOV	R4, R5
0x0A9C	0x6824    LDR	R4, [R4, #0]
0x0A9E	0x9406    STR	R4, [SP, #24]
;__Lib_I2C_MSP.c, 329 :: 		
0x0AA0	0x4C78    LDR	R4, [PC, #480]
0x0AA2	0x6825    LDR	R5, [R4, #0]
0x0AA4	0x4C78    LDR	R4, [PC, #480]
0x0AA6	0x6025    STR	R5, [R4, #0]
;__Lib_I2C_MSP.c, 330 :: 		
0x0AA8	0xE028    B	L___Lib_I2C_MSP_I2Cx_Read67
L___Lib_I2C_MSP_I2Cx_Read66:
;__Lib_I2C_MSP.c, 331 :: 		
0x0AAA	0x4C78    LDR	R4, [PC, #480]
0x0AAC	0x42A1    CMP	R1, R4
0x0AAE	0xD10A    BNE	L___Lib_I2C_MSP_I2Cx_Read68
;__Lib_I2C_MSP.c, 332 :: 		
0x0AB0	0x4D77    LDR	R5, [PC, #476]
0x0AB2	0x682C    LDR	R4, [R5, #0]
0x0AB4	0x9405    STR	R4, [SP, #20]
0x0AB6	0x462C    MOV	R4, R5
0x0AB8	0x6824    LDR	R4, [R4, #0]
0x0ABA	0x9406    STR	R4, [SP, #24]
;__Lib_I2C_MSP.c, 333 :: 		
0x0ABC	0x4C75    LDR	R4, [PC, #468]
0x0ABE	0x6825    LDR	R5, [R4, #0]
0x0AC0	0x4C71    LDR	R4, [PC, #452]
0x0AC2	0x6025    STR	R5, [R4, #0]
;__Lib_I2C_MSP.c, 334 :: 		
0x0AC4	0xE01A    B	L___Lib_I2C_MSP_I2Cx_Read69
L___Lib_I2C_MSP_I2Cx_Read68:
;__Lib_I2C_MSP.c, 335 :: 		
0x0AC6	0x4C74    LDR	R4, [PC, #464]
0x0AC8	0x42A1    CMP	R1, R4
0x0ACA	0xD10A    BNE	L___Lib_I2C_MSP_I2Cx_Read70
;__Lib_I2C_MSP.c, 336 :: 		
0x0ACC	0x4D73    LDR	R5, [PC, #460]
0x0ACE	0x682C    LDR	R4, [R5, #0]
0x0AD0	0x9405    STR	R4, [SP, #20]
0x0AD2	0x462C    MOV	R4, R5
0x0AD4	0x6824    LDR	R4, [R4, #0]
0x0AD6	0x9406    STR	R4, [SP, #24]
;__Lib_I2C_MSP.c, 337 :: 		
0x0AD8	0x4C71    LDR	R4, [PC, #452]
0x0ADA	0x6825    LDR	R5, [R4, #0]
0x0ADC	0x4C6A    LDR	R4, [PC, #424]
0x0ADE	0x6025    STR	R5, [R4, #0]
;__Lib_I2C_MSP.c, 338 :: 		
0x0AE0	0xE00C    B	L___Lib_I2C_MSP_I2Cx_Read71
L___Lib_I2C_MSP_I2Cx_Read70:
;__Lib_I2C_MSP.c, 339 :: 		
0x0AE2	0x4C70    LDR	R4, [PC, #448]
0x0AE4	0x42A1    CMP	R1, R4
0x0AE6	0xD109    BNE	L___Lib_I2C_MSP_I2Cx_Read72
;__Lib_I2C_MSP.c, 340 :: 		
0x0AE8	0x4D6F    LDR	R5, [PC, #444]
0x0AEA	0x682C    LDR	R4, [R5, #0]
0x0AEC	0x9405    STR	R4, [SP, #20]
0x0AEE	0x462C    MOV	R4, R5
0x0AF0	0x6824    LDR	R4, [R4, #0]
0x0AF2	0x9406    STR	R4, [SP, #24]
;__Lib_I2C_MSP.c, 341 :: 		
0x0AF4	0x4C6D    LDR	R4, [PC, #436]
0x0AF6	0x6825    LDR	R5, [R4, #0]
0x0AF8	0x4C63    LDR	R4, [PC, #396]
0x0AFA	0x6025    STR	R5, [R4, #0]
;__Lib_I2C_MSP.c, 342 :: 		
L___Lib_I2C_MSP_I2Cx_Read72:
L___Lib_I2C_MSP_I2Cx_Read71:
L___Lib_I2C_MSP_I2Cx_Read69:
L___Lib_I2C_MSP_I2Cx_Read67:
;__Lib_I2C_MSP.c, 344 :: 		
0x0AFC	0x9201    STR	R2, [SP, #4]
; slave_address end address is: 0 (R0)
0x0AFE	0x9102    STR	R1, [SP, #8]
0x0B00	0x9103    STR	R1, [SP, #12]
0x0B02	0xB2C1    UXTB	R1, R0
0x0B04	0x9803    LDR	R0, [SP, #12]
0x0B06	0xF7FFFBD9  BL	__Lib_I2C_MSP_I2C_setSlaveAddress+0
0x0B0A	0x9902    LDR	R1, [SP, #8]
0x0B0C	0x9A01    LDR	R2, [SP, #4]
;__Lib_I2C_MSP.c, 345 :: 		
0x0B0E	0x4C68    LDR	R4, [PC, #416]
0x0B10	0x7824    LDRB	R4, [R4, #0]
0x0B12	0xB97C    CBNZ	R4, L___Lib_I2C_MSP_I2Cx_Read73
;__Lib_I2C_MSP.c, 346 :: 		
0x0B14	0x9601    STR	R6, [SP, #4]
0x0B16	0x9302    STR	R3, [SP, #8]
0x0B18	0x9203    STR	R2, [SP, #12]
0x0B1A	0x9104    STR	R1, [SP, #16]
0x0B1C	0x4608    MOV	R0, R1
0x0B1E	0x2100    MOVS	R1, #0
0x0B20	0xF7FFFC82  BL	__Lib_I2C_MSP_I2Cx_Start+0
0x0B24	0x9904    LDR	R1, [SP, #16]
0x0B26	0x9A03    LDR	R2, [SP, #12]
0x0B28	0x9B02    LDR	R3, [SP, #8]
0x0B2A	0x9E01    LDR	R6, [SP, #4]
0x0B2C	0xB100    CBZ	R0, L___Lib_I2C_MSP_I2Cx_Read74
; END_mode end address is: 24 (R6)
; count end address is: 12 (R3)
; buf end address is: 8 (R2)
; I2C_BASE end address is: 4 (R1)
;__Lib_I2C_MSP.c, 347 :: 		
0x0B2E	0xE0A0    B	L_end_I2Cx_Read
L___Lib_I2C_MSP_I2Cx_Read74:
;__Lib_I2C_MSP.c, 348 :: 		
; I2C_BASE start address is: 4 (R1)
; buf start address is: 8 (R2)
; count start address is: 12 (R3)
; END_mode start address is: 24 (R6)
0x0B30	0x4630    MOV	R0, R6
0x0B32	0xE061    B	L___Lib_I2C_MSP_I2Cx_Read75
L___Lib_I2C_MSP_I2Cx_Read73:
;__Lib_I2C_MSP.c, 350 :: 		
0x0B34	0x2500    MOVS	R5, #0
0x0B36	0x880C    LDRH	R4, [R1, #0]
0x0B38	0xF3651404  BFI	R4, R5, #4, #1
0x0B3C	0x800C    STRH	R4, [R1, #0]
;__Lib_I2C_MSP.c, 351 :: 		
0x0B3E	0x2B01    CMP	R3, #1
0x0B40	0xD139    BNE	L___Lib_I2C_MSP_I2Cx_Read76
; END_mode end address is: 24 (R6)
; count end address is: 12 (R3)
; buf end address is: 8 (R2)
; I2C_BASE end address is: 4 (R1)
0x0B42	0x4630    MOV	R0, R6
;__Lib_I2C_MSP.c, 352 :: 		
L___Lib_I2C_MSP_I2Cx_Read77:
; END_mode start address is: 0 (R0)
; count start address is: 12 (R3)
; buf start address is: 8 (R2)
; I2C_BASE start address is: 4 (R1)
0x0B44	0x880D    LDRH	R5, [R1, #0]
0x0B46	0xF3C50480  UBFX	R4, R5, #2, #1
0x0B4A	0xB164    CBZ	R4, L___Lib_I2C_MSP_I2Cx_Read78
;__Lib_I2C_MSP.c, 353 :: 		
0x0B4C	0x9C06    LDR	R4, [SP, #24]
0x0B4E	0xB14C    CBZ	R4, L___Lib_I2C_MSP_I2Cx_Read79
;__Lib_I2C_MSP.c, 354 :: 		
0x0B50	0x9C05    LDR	R4, [SP, #20]
0x0B52	0xB924    CBNZ	R4, L___Lib_I2C_MSP_I2Cx_Read80
; count end address is: 12 (R3)
; buf end address is: 8 (R2)
; END_mode end address is: 0 (R0)
; I2C_BASE end address is: 4 (R1)
;__Lib_I2C_MSP.c, 355 :: 		
0x0B54	0x2007    MOVS	R0, #7
0x0B56	0x4C4C    LDR	R4, [PC, #304]
0x0B58	0x6824    LDR	R4, [R4, #0]
0x0B5A	0x47A0    BLX	R4
;__Lib_I2C_MSP.c, 356 :: 		
0x0B5C	0xE089    B	L_end_I2Cx_Read
;__Lib_I2C_MSP.c, 357 :: 		
L___Lib_I2C_MSP_I2Cx_Read80:
;__Lib_I2C_MSP.c, 358 :: 		
; I2C_BASE start address is: 4 (R1)
; END_mode start address is: 0 (R0)
; buf start address is: 8 (R2)
; count start address is: 12 (R3)
0x0B5E	0x9C05    LDR	R4, [SP, #20]
0x0B60	0x1E64    SUBS	R4, R4, #1
0x0B62	0x9405    STR	R4, [SP, #20]
;__Lib_I2C_MSP.c, 359 :: 		
L___Lib_I2C_MSP_I2Cx_Read79:
;__Lib_I2C_MSP.c, 360 :: 		
0x0B64	0xE7EE    B	L___Lib_I2C_MSP_I2Cx_Read77
L___Lib_I2C_MSP_I2Cx_Read78:
;__Lib_I2C_MSP.c, 361 :: 		
0x0B66	0x9C06    LDR	R4, [SP, #24]
0x0B68	0x9405    STR	R4, [SP, #20]
;__Lib_I2C_MSP.c, 363 :: 		
0x0B6A	0x880C    LDRH	R4, [R1, #0]
0x0B6C	0xF0440402  ORR	R4, R4, #2
0x0B70	0x800C    STRH	R4, [R1, #0]
; count end address is: 12 (R3)
; buf end address is: 8 (R2)
; END_mode end address is: 0 (R0)
; I2C_BASE end address is: 4 (R1)
0x0B72	0x9101    STR	R1, [SP, #4]
0x0B74	0x4611    MOV	R1, R2
0x0B76	0x461A    MOV	R2, R3
0x0B78	0x4603    MOV	R3, R0
0x0B7A	0x9801    LDR	R0, [SP, #4]
;__Lib_I2C_MSP.c, 364 :: 		
L___Lib_I2C_MSP_I2Cx_Read81:
; I2C_BASE start address is: 0 (R0)
; buf start address is: 4 (R1)
; count start address is: 8 (R2)
; END_mode start address is: 12 (R3)
0x0B7C	0x8805    LDRH	R5, [R0, #0]
0x0B7E	0xF3C50440  UBFX	R4, R5, #1, #1
0x0B82	0xB164    CBZ	R4, L___Lib_I2C_MSP_I2Cx_Read82
;__Lib_I2C_MSP.c, 365 :: 		
0x0B84	0x9C06    LDR	R4, [SP, #24]
0x0B86	0xB14C    CBZ	R4, L___Lib_I2C_MSP_I2Cx_Read83
;__Lib_I2C_MSP.c, 366 :: 		
0x0B88	0x9C05    LDR	R4, [SP, #20]
0x0B8A	0xB924    CBNZ	R4, L___Lib_I2C_MSP_I2Cx_Read84
; I2C_BASE end address is: 0 (R0)
; buf end address is: 4 (R1)
; count end address is: 8 (R2)
; END_mode end address is: 12 (R3)
;__Lib_I2C_MSP.c, 367 :: 		
0x0B8C	0x2006    MOVS	R0, #6
0x0B8E	0x4C3E    LDR	R4, [PC, #248]
0x0B90	0x6824    LDR	R4, [R4, #0]
0x0B92	0x47A0    BLX	R4
;__Lib_I2C_MSP.c, 368 :: 		
0x0B94	0xE06D    B	L_end_I2Cx_Read
;__Lib_I2C_MSP.c, 369 :: 		
L___Lib_I2C_MSP_I2Cx_Read84:
;__Lib_I2C_MSP.c, 370 :: 		
; END_mode start address is: 12 (R3)
; count start address is: 8 (R2)
; buf start address is: 4 (R1)
; I2C_BASE start address is: 0 (R0)
0x0B96	0x9C05    LDR	R4, [SP, #20]
0x0B98	0x1E64    SUBS	R4, R4, #1
0x0B9A	0x9405    STR	R4, [SP, #20]
;__Lib_I2C_MSP.c, 371 :: 		
L___Lib_I2C_MSP_I2Cx_Read83:
;__Lib_I2C_MSP.c, 372 :: 		
0x0B9C	0xE7EE    B	L___Lib_I2C_MSP_I2Cx_Read81
L___Lib_I2C_MSP_I2Cx_Read82:
;__Lib_I2C_MSP.c, 373 :: 		
0x0B9E	0x9C06    LDR	R4, [SP, #24]
0x0BA0	0x9405    STR	R4, [SP, #20]
;__Lib_I2C_MSP.c, 375 :: 		
0x0BA2	0x8804    LDRH	R4, [R0, #0]
0x0BA4	0xF0440404  ORR	R4, R4, #4
0x0BA8	0x8004    STRH	R4, [R0, #0]
;__Lib_I2C_MSP.c, 376 :: 		
0x0BAA	0x9201    STR	R2, [SP, #4]
; I2C_BASE end address is: 0 (R0)
; buf end address is: 4 (R1)
; count end address is: 8 (R2)
; END_mode end address is: 12 (R3)
0x0BAC	0x460A    MOV	R2, R1
0x0BAE	0x4601    MOV	R1, R0
0x0BB0	0x4618    MOV	R0, R3
0x0BB2	0x9B01    LDR	R3, [SP, #4]
0x0BB4	0xE01D    B	L___Lib_I2C_MSP_I2Cx_Read85
L___Lib_I2C_MSP_I2Cx_Read76:
;__Lib_I2C_MSP.c, 378 :: 		
; I2C_BASE start address is: 4 (R1)
; buf start address is: 8 (R2)
; count start address is: 12 (R3)
; END_mode start address is: 24 (R6)
0x0BB6	0x9301    STR	R3, [SP, #4]
; count end address is: 12 (R3)
; buf end address is: 8 (R2)
; I2C_BASE end address is: 4 (R1)
0x0BB8	0x460B    MOV	R3, R1
0x0BBA	0x4630    MOV	R0, R6
0x0BBC	0x9901    LDR	R1, [SP, #4]
L___Lib_I2C_MSP_I2Cx_Read86:
; END_mode end address is: 24 (R6)
; END_mode start address is: 0 (R0)
; count start address is: 4 (R1)
; buf start address is: 8 (R2)
; I2C_BASE start address is: 12 (R3)
0x0BBE	0x881D    LDRH	R5, [R3, #0]
0x0BC0	0xF3C50480  UBFX	R4, R5, #2, #1
0x0BC4	0xB164    CBZ	R4, L___Lib_I2C_MSP_I2Cx_Read87
;__Lib_I2C_MSP.c, 379 :: 		
0x0BC6	0x9C06    LDR	R4, [SP, #24]
0x0BC8	0xB14C    CBZ	R4, L___Lib_I2C_MSP_I2Cx_Read88
;__Lib_I2C_MSP.c, 380 :: 		
0x0BCA	0x9C05    LDR	R4, [SP, #20]
0x0BCC	0xB924    CBNZ	R4, L___Lib_I2C_MSP_I2Cx_Read89
; count end address is: 4 (R1)
; I2C_BASE end address is: 12 (R3)
; buf end address is: 8 (R2)
; END_mode end address is: 0 (R0)
;__Lib_I2C_MSP.c, 381 :: 		
0x0BCE	0x2007    MOVS	R0, #7
0x0BD0	0x4C2D    LDR	R4, [PC, #180]
0x0BD2	0x6824    LDR	R4, [R4, #0]
0x0BD4	0x47A0    BLX	R4
;__Lib_I2C_MSP.c, 382 :: 		
0x0BD6	0xE04C    B	L_end_I2Cx_Read
;__Lib_I2C_MSP.c, 383 :: 		
L___Lib_I2C_MSP_I2Cx_Read89:
;__Lib_I2C_MSP.c, 384 :: 		
; END_mode start address is: 0 (R0)
; buf start address is: 8 (R2)
; I2C_BASE start address is: 12 (R3)
; count start address is: 4 (R1)
0x0BD8	0x9C05    LDR	R4, [SP, #20]
0x0BDA	0x1E64    SUBS	R4, R4, #1
0x0BDC	0x9405    STR	R4, [SP, #20]
;__Lib_I2C_MSP.c, 385 :: 		
L___Lib_I2C_MSP_I2Cx_Read88:
;__Lib_I2C_MSP.c, 386 :: 		
0x0BDE	0xE7EE    B	L___Lib_I2C_MSP_I2Cx_Read86
L___Lib_I2C_MSP_I2Cx_Read87:
;__Lib_I2C_MSP.c, 387 :: 		
0x0BE0	0x9C06    LDR	R4, [SP, #24]
0x0BE2	0x9405    STR	R4, [SP, #20]
;__Lib_I2C_MSP.c, 389 :: 		
0x0BE4	0x881C    LDRH	R4, [R3, #0]
0x0BE6	0xF0440402  ORR	R4, R4, #2
0x0BEA	0x801C    STRH	R4, [R3, #0]
; count end address is: 4 (R1)
; I2C_BASE end address is: 12 (R3)
; buf end address is: 8 (R2)
; END_mode end address is: 0 (R0)
0x0BEC	0x9301    STR	R3, [SP, #4]
0x0BEE	0x460B    MOV	R3, R1
0x0BF0	0x9901    LDR	R1, [SP, #4]
;__Lib_I2C_MSP.c, 390 :: 		
L___Lib_I2C_MSP_I2Cx_Read85:
;__Lib_I2C_MSP.c, 391 :: 		
; I2C_BASE start address is: 4 (R1)
; buf start address is: 8 (R2)
; count start address is: 12 (R3)
; END_mode start address is: 0 (R0)
0x0BF2	0x2500    MOVS	R5, #0
0x0BF4	0x4C2E    LDR	R4, [PC, #184]
0x0BF6	0x7025    STRB	R5, [R4, #0]
; count end address is: 12 (R3)
; buf end address is: 8 (R2)
; END_mode end address is: 0 (R0)
; I2C_BASE end address is: 4 (R1)
;__Lib_I2C_MSP.c, 392 :: 		
L___Lib_I2C_MSP_I2Cx_Read75:
;__Lib_I2C_MSP.c, 394 :: 		
; END_mode start address is: 0 (R0)
; count start address is: 12 (R3)
; buf start address is: 8 (R2)
; I2C_BASE start address is: 4 (R1)
0x0BF8	0x1E5C    SUBS	R4, R3, #1
; count end address is: 12 (R3)
; i start address is: 12 (R3)
0x0BFA	0x4623    MOV	R3, R4
; buf end address is: 8 (R2)
; i end address is: 12 (R3)
; END_mode end address is: 0 (R0)
; I2C_BASE end address is: 4 (R1)
0x0BFC	0x9301    STR	R3, [SP, #4]
0x0BFE	0x4613    MOV	R3, R2
0x0C00	0x9A01    LDR	R2, [SP, #4]
L___Lib_I2C_MSP_I2Cx_Read90:
; i start address is: 8 (R2)
; I2C_BASE start address is: 4 (R1)
; buf start address is: 12 (R3)
; END_mode start address is: 0 (R0)
0x0C02	0x2A00    CMP	R2, #0
0x0C04	0xDB31    BLT	L___Lib_I2C_MSP_I2Cx_Read91
; END_mode end address is: 0 (R0)
; I2C_BASE end address is: 4 (R1)
; buf end address is: 12 (R3)
; i end address is: 8 (R2)
;__Lib_I2C_MSP.c, 395 :: 		
L___Lib_I2C_MSP_I2Cx_Read93:
; END_mode start address is: 0 (R0)
; buf start address is: 12 (R3)
; I2C_BASE start address is: 4 (R1)
; i start address is: 8 (R2)
0x0C06	0xF201042C  ADDW	R4, R1, #44
0x0C0A	0x8825    LDRH	R5, [R4, #0]
0x0C0C	0xF3C50400  UBFX	R4, R5, #0, #1
0x0C10	0xB964    CBNZ	R4, L___Lib_I2C_MSP_I2Cx_Read94
;__Lib_I2C_MSP.c, 396 :: 		
0x0C12	0x9C06    LDR	R4, [SP, #24]
0x0C14	0xB14C    CBZ	R4, L___Lib_I2C_MSP_I2Cx_Read95
;__Lib_I2C_MSP.c, 397 :: 		
0x0C16	0x9C05    LDR	R4, [SP, #20]
0x0C18	0xB924    CBNZ	R4, L___Lib_I2C_MSP_I2Cx_Read96
; END_mode end address is: 0 (R0)
; I2C_BASE end address is: 4 (R1)
; buf end address is: 12 (R3)
; i end address is: 8 (R2)
;__Lib_I2C_MSP.c, 398 :: 		
0x0C1A	0x2003    MOVS	R0, #3
0x0C1C	0x4C1A    LDR	R4, [PC, #104]
0x0C1E	0x6824    LDR	R4, [R4, #0]
0x0C20	0x47A0    BLX	R4
;__Lib_I2C_MSP.c, 399 :: 		
0x0C22	0xE026    B	L_end_I2Cx_Read
;__Lib_I2C_MSP.c, 400 :: 		
L___Lib_I2C_MSP_I2Cx_Read96:
;__Lib_I2C_MSP.c, 401 :: 		
; i start address is: 8 (R2)
; buf start address is: 12 (R3)
; I2C_BASE start address is: 4 (R1)
; END_mode start address is: 0 (R0)
0x0C24	0x9C05    LDR	R4, [SP, #20]
0x0C26	0x1E64    SUBS	R4, R4, #1
0x0C28	0x9405    STR	R4, [SP, #20]
;__Lib_I2C_MSP.c, 402 :: 		
L___Lib_I2C_MSP_I2Cx_Read95:
;__Lib_I2C_MSP.c, 403 :: 		
0x0C2A	0xE7EC    B	L___Lib_I2C_MSP_I2Cx_Read93
L___Lib_I2C_MSP_I2Cx_Read94:
;__Lib_I2C_MSP.c, 404 :: 		
0x0C2C	0xE016    B	L___Lib_I2C_MSP_I2Cx_Read97
;__Lib_I2C_MSP.c, 405 :: 		
L___Lib_I2C_MSP_I2Cx_Read99:
;__Lib_I2C_MSP.c, 406 :: 		
0x0C2E	0xF201040C  ADDW	R4, R1, #12
0x0C32	0x8824    LDRH	R4, [R4, #0]
0x0C34	0x701C    STRB	R4, [R3, #0]
0x0C36	0x1C5B    ADDS	R3, R3, #1
;__Lib_I2C_MSP.c, 407 :: 		
0x0C38	0xE015    B	L___Lib_I2C_MSP_I2Cx_Read98
;__Lib_I2C_MSP.c, 408 :: 		
L___Lib_I2C_MSP_I2Cx_Read100:
;__Lib_I2C_MSP.c, 409 :: 		
0x0C3A	0x2501    MOVS	R5, #1
0x0C3C	0x880C    LDRH	R4, [R1, #0]
0x0C3E	0xF3650482  BFI	R4, R5, #2, #1
0x0C42	0x800C    STRH	R4, [R1, #0]
;__Lib_I2C_MSP.c, 410 :: 		
0x0C44	0xF201040C  ADDW	R4, R1, #12
0x0C48	0x8824    LDRH	R4, [R4, #0]
0x0C4A	0x701C    STRB	R4, [R3, #0]
0x0C4C	0x1C5B    ADDS	R3, R3, #1
;__Lib_I2C_MSP.c, 411 :: 		
0x0C4E	0xE00A    B	L___Lib_I2C_MSP_I2Cx_Read98
;__Lib_I2C_MSP.c, 412 :: 		
L___Lib_I2C_MSP_I2Cx_Read101:
;__Lib_I2C_MSP.c, 413 :: 		
0x0C50	0xF201040C  ADDW	R4, R1, #12
0x0C54	0x8824    LDRH	R4, [R4, #0]
0x0C56	0x701C    STRB	R4, [R3, #0]
0x0C58	0x1C5B    ADDS	R3, R3, #1
;__Lib_I2C_MSP.c, 414 :: 		
0x0C5A	0xE004    B	L___Lib_I2C_MSP_I2Cx_Read98
;__Lib_I2C_MSP.c, 415 :: 		
L___Lib_I2C_MSP_I2Cx_Read97:
0x0C5C	0x2A00    CMP	R2, #0
0x0C5E	0xD0E6    BEQ	L___Lib_I2C_MSP_I2Cx_Read99
0x0C60	0x2A01    CMP	R2, #1
0x0C62	0xD0EA    BEQ	L___Lib_I2C_MSP_I2Cx_Read100
0x0C64	0xE7F4    B	L___Lib_I2C_MSP_I2Cx_Read101
; buf end address is: 12 (R3)
L___Lib_I2C_MSP_I2Cx_Read98:
;__Lib_I2C_MSP.c, 394 :: 		
; buf start address is: 12 (R3)
0x0C66	0x1E52    SUBS	R2, R2, #1
;__Lib_I2C_MSP.c, 416 :: 		
; I2C_BASE end address is: 4 (R1)
; buf end address is: 12 (R3)
; i end address is: 8 (R2)
0x0C68	0xE7CB    B	L___Lib_I2C_MSP_I2Cx_Read90
L___Lib_I2C_MSP_I2Cx_Read91:
;__Lib_I2C_MSP.c, 418 :: 		
0x0C6A	0xB910    CBNZ	R0, L___Lib_I2C_MSP_I2Cx_Read102
; END_mode end address is: 0 (R0)
;__Lib_I2C_MSP.c, 419 :: 		
0x0C6C	0x2501    MOVS	R5, #1
0x0C6E	0x4C10    LDR	R4, [PC, #64]
0x0C70	0x7025    STRB	R5, [R4, #0]
;__Lib_I2C_MSP.c, 420 :: 		
L___Lib_I2C_MSP_I2Cx_Read102:
;__Lib_I2C_MSP.c, 421 :: 		
L_end_I2Cx_Read:
0x0C72	0xF8DDE000  LDR	LR, [SP, #0]
0x0C76	0xB007    ADD	SP, SP, #28
0x0C78	0x4770    BX	LR
0x0C7A	0xBF00    NOP
0x0C7C	0x20004000  	EUSCI_B0_UCB0CTLW0+0
0x0C80	0x00842000  	__Lib_I2C_MSP__I2C0_TIMEOUT+0
0x0C84	0x37842000  	_I2C0_timeout_Ptr+0
0x0C88	0x37802000  	__Lib_I2C_MSP_I2C_Timeout_Ptr+0
0x0C8C	0x24004000  	EUSCI_B1_UCB1CTLW0+0
0x0C90	0x00882000  	__Lib_I2C_MSP__I2C1_TIMEOUT+0
0x0C94	0x37882000  	_I2C1_timeout_Ptr+0
0x0C98	0x28004000  	EUSCI_B2_UCB2CTLW0+0
0x0C9C	0x008C2000  	__Lib_I2C_MSP__I2C2_TIMEOUT+0
0x0CA0	0x378C2000  	_I2C2_timeout_Ptr+0
0x0CA4	0x2C004000  	EUSCI_B3_UCB3CTLW0+0
0x0CA8	0x00902000  	__Lib_I2C_MSP__I2C3_TIMEOUT+0
0x0CAC	0x37902000  	_I2C3_timeout_Ptr+0
0x0CB0	0x00942000  	__Lib_I2C_MSP__DELAY_RESTART+0
; end of __Lib_I2C_MSP_I2Cx_Read
_I2C1_Read:
;__Lib_I2C_MSP.c, 563 :: 		
; END_mode start address is: 12 (R3)
; count start address is: 8 (R2)
; buf start address is: 4 (R1)
; slave_address start address is: 0 (R0)
0x11F4	0xB081    SUB	SP, SP, #4
0x11F6	0xF8CDE000  STR	LR, [SP, #0]
; END_mode end address is: 12 (R3)
; count end address is: 8 (R2)
; buf end address is: 4 (R1)
; slave_address end address is: 0 (R0)
; slave_address start address is: 0 (R0)
; buf start address is: 4 (R1)
; count start address is: 8 (R2)
; END_mode start address is: 12 (R3)
;__Lib_I2C_MSP.c, 564 :: 		
0x11FA	0xB408    PUSH	(R3)
; count end address is: 8 (R2)
0x11FC	0x4613    MOV	R3, R2
0x11FE	0x460A    MOV	R2, R1
; buf end address is: 4 (R1)
0x1200	0xB2C1    UXTB	R1, R0
; slave_address end address is: 0 (R0)
0x1202	0x4804    LDR	R0, [PC, #16]
; END_mode end address is: 12 (R3)
0x1204	0xF7FFFC3A  BL	__Lib_I2C_MSP_I2Cx_Read+0
0x1208	0xB001    ADD	SP, SP, #4
;__Lib_I2C_MSP.c, 565 :: 		
L_end_I2C1_Read:
0x120A	0xF8DDE000  LDR	LR, [SP, #0]
0x120E	0xB001    ADD	SP, SP, #4
0x1210	0x4770    BX	LR
0x1212	0xBF00    NOP
0x1214	0x24004000  	EUSCI_B1_UCB1CTLW0+0
; end of _I2C1_Read
_I2C2_Read:
;__Lib_I2C_MSP.c, 642 :: 		
; END_mode start address is: 12 (R3)
; count start address is: 8 (R2)
; buf start address is: 4 (R1)
; slave_address start address is: 0 (R0)
0x11D0	0xB081    SUB	SP, SP, #4
0x11D2	0xF8CDE000  STR	LR, [SP, #0]
; END_mode end address is: 12 (R3)
; count end address is: 8 (R2)
; buf end address is: 4 (R1)
; slave_address end address is: 0 (R0)
; slave_address start address is: 0 (R0)
; buf start address is: 4 (R1)
; count start address is: 8 (R2)
; END_mode start address is: 12 (R3)
;__Lib_I2C_MSP.c, 643 :: 		
0x11D6	0xB408    PUSH	(R3)
; count end address is: 8 (R2)
0x11D8	0x4613    MOV	R3, R2
0x11DA	0x460A    MOV	R2, R1
; buf end address is: 4 (R1)
0x11DC	0xB2C1    UXTB	R1, R0
; slave_address end address is: 0 (R0)
0x11DE	0x4804    LDR	R0, [PC, #16]
; END_mode end address is: 12 (R3)
0x11E0	0xF7FFFC4C  BL	__Lib_I2C_MSP_I2Cx_Read+0
0x11E4	0xB001    ADD	SP, SP, #4
;__Lib_I2C_MSP.c, 644 :: 		
L_end_I2C2_Read:
0x11E6	0xF8DDE000  LDR	LR, [SP, #0]
0x11EA	0xB001    ADD	SP, SP, #4
0x11EC	0x4770    BX	LR
0x11EE	0xBF00    NOP
0x11F0	0x28004000  	EUSCI_B2_UCB2CTLW0+0
; end of _I2C2_Read
_I2C3_Read:
;__Lib_I2C_MSP.c, 721 :: 		
; END_mode start address is: 12 (R3)
; count start address is: 8 (R2)
; buf start address is: 4 (R1)
; slave_address start address is: 0 (R0)
0x1218	0xB081    SUB	SP, SP, #4
0x121A	0xF8CDE000  STR	LR, [SP, #0]
; END_mode end address is: 12 (R3)
; count end address is: 8 (R2)
; buf end address is: 4 (R1)
; slave_address end address is: 0 (R0)
; slave_address start address is: 0 (R0)
; buf start address is: 4 (R1)
; count start address is: 8 (R2)
; END_mode start address is: 12 (R3)
;__Lib_I2C_MSP.c, 722 :: 		
0x121E	0xB408    PUSH	(R3)
; count end address is: 8 (R2)
0x1220	0x4613    MOV	R3, R2
0x1222	0x460A    MOV	R2, R1
; buf end address is: 4 (R1)
0x1224	0xB2C1    UXTB	R1, R0
; slave_address end address is: 0 (R0)
0x1226	0x4804    LDR	R0, [PC, #16]
; END_mode end address is: 12 (R3)
0x1228	0xF7FFFC28  BL	__Lib_I2C_MSP_I2Cx_Read+0
0x122C	0xB001    ADD	SP, SP, #4
;__Lib_I2C_MSP.c, 723 :: 		
L_end_I2C3_Read:
0x122E	0xF8DDE000  LDR	LR, [SP, #0]
0x1232	0xB001    ADD	SP, SP, #4
0x1234	0x4770    BX	LR
0x1236	0xBF00    NOP
0x1238	0x2C004000  	EUSCI_B3_UCB3CTLW0+0
; end of _I2C3_Read
_irgrid2_ExtractParameters:
;__irgrid2_driver.c, 977 :: 		int irgrid2_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
0x3C18	0xB084    SUB	SP, SP, #16
0x3C1A	0xF8CDE000  STR	LR, [SP, #0]
0x3C1E	0x9002    STR	R0, [SP, #8]
0x3C20	0x9103    STR	R1, [SP, #12]
;__irgrid2_driver.c, 979 :: 		int error = CheckEEPROMValid(eeData);
0x3C22	0x9802    LDR	R0, [SP, #8]
0x3C24	0xF7FDFFB6  BL	__irgrid2_driver_CheckEEPROMValid+0
0x3C28	0xF8AD0004  STRH	R0, [SP, #4]
;__irgrid2_driver.c, 981 :: 		if(error == 0)
0x3C2C	0xBBC8    CBNZ	R0, L_irgrid2_ExtractParameters158
;__irgrid2_driver.c, 983 :: 		ExtractVDDParameters(eeData, mlx90640);
0x3C2E	0x9903    LDR	R1, [SP, #12]
0x3C30	0x9802    LDR	R0, [SP, #8]
0x3C32	0xF7FEF86D  BL	__irgrid2_driver_ExtractVDDParameters+0
;__irgrid2_driver.c, 984 :: 		ExtractPTATParameters(eeData, mlx90640);
0x3C36	0x9903    LDR	R1, [SP, #12]
0x3C38	0x9802    LDR	R0, [SP, #8]
0x3C3A	0xF7FDFFE9  BL	__irgrid2_driver_ExtractPTATParameters+0
;__irgrid2_driver.c, 985 :: 		ExtractGainParameters(eeData, mlx90640);
0x3C3E	0x9903    LDR	R1, [SP, #12]
0x3C40	0x9802    LDR	R0, [SP, #8]
0x3C42	0xF7FDFF01  BL	__irgrid2_driver_ExtractGainParameters+0
;__irgrid2_driver.c, 986 :: 		ExtractTgcParameters(eeData, mlx90640);
0x3C46	0x9903    LDR	R1, [SP, #12]
0x3C48	0x9802    LDR	R0, [SP, #8]
0x3C4A	0xF7FEFEDF  BL	__irgrid2_driver_ExtractTgcParameters+0
;__irgrid2_driver.c, 987 :: 		ExtractResolutionParameters(eeData, mlx90640);
0x3C4E	0x9903    LDR	R1, [SP, #12]
0x3C50	0x9802    LDR	R0, [SP, #8]
0x3C52	0xF7FEFECF  BL	__irgrid2_driver_ExtractResolutionParameters+0
;__irgrid2_driver.c, 988 :: 		ExtractKsTaParameters(eeData, mlx90640);
0x3C56	0x9903    LDR	R1, [SP, #12]
0x3C58	0x9802    LDR	R0, [SP, #8]
0x3C5A	0xF7FEFF01  BL	__irgrid2_driver_ExtractKsTaParameters+0
;__irgrid2_driver.c, 989 :: 		ExtractKsToParameters(eeData, mlx90640);
0x3C5E	0x9903    LDR	R1, [SP, #12]
0x3C60	0x9802    LDR	R0, [SP, #8]
0x3C62	0xF7FFF8F1  BL	__irgrid2_driver_ExtractKsToParameters+0
;__irgrid2_driver.c, 990 :: 		ExtractAlphaParameters(eeData, mlx90640);
0x3C66	0x9903    LDR	R1, [SP, #12]
0x3C68	0x9802    LDR	R0, [SP, #8]
0x3C6A	0xF7FEFF25  BL	__irgrid2_driver_ExtractAlphaParameters+0
;__irgrid2_driver.c, 991 :: 		ExtractOffsetParameters(eeData, mlx90640);
0x3C6E	0x9903    LDR	R1, [SP, #12]
0x3C70	0x9802    LDR	R0, [SP, #8]
0x3C72	0xF7FEFD4D  BL	__irgrid2_driver_ExtractOffsetParameters+0
;__irgrid2_driver.c, 992 :: 		ExtractKtaPixelParameters(eeData, mlx90640);
0x3C76	0x9903    LDR	R1, [SP, #12]
0x3C78	0x9802    LDR	R0, [SP, #8]
0x3C7A	0xF7FEF927  BL	__irgrid2_driver_ExtractKtaPixelParameters+0
;__irgrid2_driver.c, 993 :: 		ExtractKvPixelParameters(eeData, mlx90640);
0x3C7E	0x9903    LDR	R1, [SP, #12]
0x3C80	0x9802    LDR	R0, [SP, #8]
0x3C82	0xF7FEF869  BL	__irgrid2_driver_ExtractKvPixelParameters+0
;__irgrid2_driver.c, 994 :: 		ExtractCPParameters(eeData, mlx90640);
0x3C86	0x9903    LDR	R1, [SP, #12]
0x3C88	0x9802    LDR	R0, [SP, #8]
0x3C8A	0xF7FEFA31  BL	__irgrid2_driver_ExtractCPParameters+0
;__irgrid2_driver.c, 995 :: 		ExtractCILCParameters(eeData, mlx90640);
0x3C8E	0x9903    LDR	R1, [SP, #12]
0x3C90	0x9802    LDR	R0, [SP, #8]
0x3C92	0xF7FEFC7F  BL	__irgrid2_driver_ExtractCILCParameters+0
;__irgrid2_driver.c, 996 :: 		error = ExtractDeviatingPixels(eeData, mlx90640);
0x3C96	0x9903    LDR	R1, [SP, #12]
0x3C98	0x9802    LDR	R0, [SP, #8]
0x3C9A	0xF7FEFB87  BL	__irgrid2_driver_ExtractDeviatingPixels+0
0x3C9E	0xF8AD0004  STRH	R0, [SP, #4]
;__irgrid2_driver.c, 997 :: 		}
L_irgrid2_ExtractParameters158:
;__irgrid2_driver.c, 998 :: 		return error;
0x3CA2	0xF9BD0004  LDRSH	R0, [SP, #4]
;__irgrid2_driver.c, 999 :: 		}
L_end_irgrid2_ExtractParameters:
0x3CA6	0xF8DDE000  LDR	LR, [SP, #0]
0x3CAA	0xB004    ADD	SP, SP, #16
0x3CAC	0x4770    BX	LR
; end of _irgrid2_ExtractParameters
__irgrid2_driver_CheckEEPROMValid:
;__irgrid2_driver.c, 266 :: 		static int CheckEEPROMValid(uint16_t *eeData)
; eeData start address is: 0 (R0)
; eeData end address is: 0 (R0)
; eeData start address is: 0 (R0)
;__irgrid2_driver.c, 269 :: 		deviceSelect = eeData[10] & 0x0040;
0x1B94	0xF2000114  ADDW	R1, R0, #20
; eeData end address is: 0 (R0)
0x1B98	0x8809    LDRH	R1, [R1, #0]
0x1B9A	0xF0010140  AND	R1, R1, #64
;__irgrid2_driver.c, 270 :: 		if(deviceSelect == 0)
0x1B9E	0xB209    SXTH	R1, R1
0x1BA0	0xB911    CBNZ	R1, L___irgrid2_driver_CheckEEPROMValid25
;__irgrid2_driver.c, 272 :: 		return 0;
0x1BA2	0x2000    MOVS	R0, #0
0x1BA4	0xB200    SXTH	R0, R0
0x1BA6	0xE002    B	L_end_CheckEEPROMValid
;__irgrid2_driver.c, 273 :: 		}
L___irgrid2_driver_CheckEEPROMValid25:
;__irgrid2_driver.c, 274 :: 		return -7;
0x1BA8	0xF64F70F9  MOVW	R0, #65529
0x1BAC	0xB200    SXTH	R0, R0
;__irgrid2_driver.c, 275 :: 		}
L_end_CheckEEPROMValid:
0x1BAE	0x4770    BX	LR
; end of __irgrid2_driver_CheckEEPROMValid
__irgrid2_driver_ExtractVDDParameters:
;__irgrid2_driver.c, 276 :: 		static void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
; mlx90640 start address is: 4 (R1)
; eeData start address is: 0 (R0)
; mlx90640 end address is: 4 (R1)
; eeData end address is: 0 (R0)
; eeData start address is: 0 (R0)
; mlx90640 start address is: 4 (R1)
;__irgrid2_driver.c, 283 :: 		kVdd = (eeData[51] & 0xFF00) >> 8;
0x1D10	0xF2000266  ADDW	R2, R0, #102
0x1D14	0x8812    LDRH	R2, [R2, #0]
0x1D16	0xF402427F  AND	R2, R2, #65280
0x1D1A	0xB292    UXTH	R2, R2
0x1D1C	0x0A12    LSRS	R2, R2, #8
; kVdd start address is: 12 (R3)
0x1D1E	0xB213    SXTH	R3, R2
;__irgrid2_driver.c, 284 :: 		if(kVdd > 127)
0x1D20	0xB212    SXTH	R2, R2
0x1D22	0x2A7F    CMP	R2, #127
0x1D24	0xDD04    BLE	L___irgrid2_driver_ExtractVDDParameters209
;__irgrid2_driver.c, 286 :: 		kVdd = kVdd - 256;
0x1D26	0xF5A37280  SUB	R2, R3, #256
0x1D2A	0xB213    SXTH	R3, R2
; kVdd end address is: 12 (R3)
0x1D2C	0xB21A    SXTH	R2, R3
;__irgrid2_driver.c, 287 :: 		}
0x1D2E	0xE000    B	L___irgrid2_driver_ExtractVDDParameters26
L___irgrid2_driver_ExtractVDDParameters209:
;__irgrid2_driver.c, 284 :: 		if(kVdd > 127)
0x1D30	0xB21A    SXTH	R2, R3
;__irgrid2_driver.c, 287 :: 		}
L___irgrid2_driver_ExtractVDDParameters26:
;__irgrid2_driver.c, 288 :: 		kVdd = 32 * kVdd;
; kVdd start address is: 8 (R2)
0x1D32	0x0153    LSLS	R3, R2, #5
; kVdd end address is: 8 (R2)
;__irgrid2_driver.c, 289 :: 		vdd25 = eeData[51] & 0x00FF;
0x1D34	0xF2000266  ADDW	R2, R0, #102
; eeData end address is: 0 (R0)
0x1D38	0x8812    LDRH	R2, [R2, #0]
0x1D3A	0xF00202FF  AND	R2, R2, #255
;__irgrid2_driver.c, 290 :: 		vdd25 = ((vdd25 - 256) << 5) - 8192;
0x1D3E	0xB212    SXTH	R2, R2
0x1D40	0xF5A27280  SUB	R2, R2, #256
0x1D44	0xB212    SXTH	R2, R2
0x1D46	0x0152    LSLS	R2, R2, #5
0x1D48	0xB212    SXTH	R2, R2
0x1D4A	0xF5A25200  SUB	R2, R2, #8192
; vdd25 start address is: 0 (R0)
0x1D4E	0xB210    SXTH	R0, R2
;__irgrid2_driver.c, 292 :: 		mlx90640->kVdd = kVdd;
0x1D50	0x800B    STRH	R3, [R1, #0]
;__irgrid2_driver.c, 293 :: 		mlx90640->vdd25 = vdd25;
0x1D52	0x1C8A    ADDS	R2, R1, #2
; mlx90640 end address is: 4 (R1)
0x1D54	0x8010    STRH	R0, [R2, #0]
; vdd25 end address is: 0 (R0)
;__irgrid2_driver.c, 294 :: 		}
L_end_ExtractVDDParameters:
0x1D56	0x4770    BX	LR
; end of __irgrid2_driver_ExtractVDDParameters
__irgrid2_driver_ExtractPTATParameters:
;__irgrid2_driver.c, 296 :: 		static void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
; mlx90640 start address is: 4 (R1)
; eeData start address is: 0 (R0)
0x1C10	0xB082    SUB	SP, SP, #8
0x1C12	0xF8CDE000  STR	LR, [SP, #0]
0x1C16	0x460E    MOV	R6, R1
; mlx90640 end address is: 4 (R1)
; eeData end address is: 0 (R0)
; eeData start address is: 0 (R0)
; mlx90640 start address is: 24 (R6)
;__irgrid2_driver.c, 303 :: 		KvPTAT = (eeData[50] & 0xFC00) >> 10;
0x1C18	0xF2000264  ADDW	R2, R0, #100
0x1C1C	0x8812    LDRH	R2, [R2, #0]
0x1C1E	0xF402427C  AND	R2, R2, #64512
0x1C22	0xB292    UXTH	R2, R2
0x1C24	0x0A92    LSRS	R2, R2, #10
0x1C26	0xB292    UXTH	R2, R2
0x1C28	0xEE002A90  VMOV	S1, R2
0x1C2C	0xEEF80A60  VCVT.F32.U32	S1, S1
; KvPTAT start address is: 8 (S2)
0x1C30	0xEEB01A60  VMOV.F32	S2, S1
;__irgrid2_driver.c, 304 :: 		if(KvPTAT > 31)
0x1C34	0xEEB30A0F  VMOV.F32	S0, #31
0x1C38	0xEEF40AC0  VCMPE.F32	S1, S0
0x1C3C	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x1C40	0xDD06    BLE	L___irgrid2_driver_ExtractPTATParameters210
;__irgrid2_driver.c, 306 :: 		KvPTAT = KvPTAT - 64;
0x1C42	0xF04F4285  MOV	R2, #1115684864
0x1C46	0xEE002A10  VMOV	S0, R2
0x1C4A	0xEE710A40  VSUB.F32	S1, S2, S0
; KvPTAT end address is: 8 (S2)
; KvPTAT start address is: 4 (S1)
; KvPTAT end address is: 4 (S1)
;__irgrid2_driver.c, 307 :: 		}
0x1C4E	0xE001    B	L___irgrid2_driver_ExtractPTATParameters27
L___irgrid2_driver_ExtractPTATParameters210:
;__irgrid2_driver.c, 304 :: 		if(KvPTAT > 31)
0x1C50	0xEEF00A41  VMOV.F32	S1, S2
;__irgrid2_driver.c, 307 :: 		}
L___irgrid2_driver_ExtractPTATParameters27:
;__irgrid2_driver.c, 308 :: 		KvPTAT = KvPTAT/4096;
; KvPTAT start address is: 4 (S1)
0x1C54	0xF04F428B  MOV	R2, #1166016512
0x1C58	0xEE002A10  VMOV	S0, R2
0x1C5C	0xEE800A80  VDIV.F32	S0, S1, S0
; KvPTAT end address is: 4 (S1)
; KvPTAT start address is: 24 (S6)
0x1C60	0xEEB03A40  VMOV.F32	S6, S0
;__irgrid2_driver.c, 310 :: 		KtPTAT = eeData[50] & 0x03FF;
0x1C64	0xF2000264  ADDW	R2, R0, #100
0x1C68	0x8813    LDRH	R3, [R2, #0]
0x1C6A	0xF24032FF  MOVW	R2, #1023
0x1C6E	0xEA030202  AND	R2, R3, R2, LSL #0
0x1C72	0xB292    UXTH	R2, R2
0x1C74	0xEE002A90  VMOV	S1, R2
0x1C78	0xEEF80A60  VCVT.F32.U32	S1, S1
; KtPTAT start address is: 8 (S2)
0x1C7C	0xEEB01A60  VMOV.F32	S2, S1
;__irgrid2_driver.c, 311 :: 		if(KtPTAT > 511)
0x1C80	0x4A22    LDR	R2, [PC, #136]
0x1C82	0xEE002A10  VMOV	S0, R2
0x1C86	0xEEF40AC0  VCMPE.F32	S1, S0
0x1C8A	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x1C8E	0xDD06    BLE	L___irgrid2_driver_ExtractPTATParameters211
;__irgrid2_driver.c, 313 :: 		KtPTAT = KtPTAT - 1024;
0x1C90	0xF04F4289  MOV	R2, #1149239296
0x1C94	0xEE002A10  VMOV	S0, R2
0x1C98	0xEE710A40  VSUB.F32	S1, S2, S0
; KtPTAT end address is: 8 (S2)
; KtPTAT start address is: 4 (S1)
; KtPTAT end address is: 4 (S1)
;__irgrid2_driver.c, 314 :: 		}
0x1C9C	0xE001    B	L___irgrid2_driver_ExtractPTATParameters28
L___irgrid2_driver_ExtractPTATParameters211:
;__irgrid2_driver.c, 311 :: 		if(KtPTAT > 511)
0x1C9E	0xEEF00A41  VMOV.F32	S1, S2
;__irgrid2_driver.c, 314 :: 		}
L___irgrid2_driver_ExtractPTATParameters28:
;__irgrid2_driver.c, 315 :: 		KtPTAT = KtPTAT/8;
; KtPTAT start address is: 4 (S1)
0x1CA2	0xEEB20A00  VMOV.F32	S0, #8
0x1CA6	0xEE800A80  VDIV.F32	S0, S1, S0
; KtPTAT end address is: 4 (S1)
; KtPTAT start address is: 28 (S7)
0x1CAA	0xEEF03A40  VMOV.F32	S7, S0
;__irgrid2_driver.c, 317 :: 		vPTAT25 = eeData[49];
0x1CAE	0xF2000262  ADDW	R2, R0, #98
0x1CB2	0x8812    LDRH	R2, [R2, #0]
; vPTAT25 start address is: 28 (R7)
0x1CB4	0xB217    SXTH	R7, R2
;__irgrid2_driver.c, 319 :: 		alphaPTAT = (eeData[16] & 0xF000) / _pow(2, (double)14) + 8.0f;
0x1CB6	0xF2000220  ADDW	R2, R0, #32
; eeData end address is: 0 (R0)
0x1CBA	0x8812    LDRH	R2, [R2, #0]
0x1CBC	0xF4024270  AND	R2, R2, #61440
0x1CC0	0xF8AD2004  STRH	R2, [SP, #4]
0x1CC4	0xEEF20A0C  VMOV.F32	S1, #14
0x1CC8	0xEEB00A00  VMOV.F32	S0, #2
0x1CCC	0xF7FFFDB6  BL	__irgrid2_driver__pow+0
0x1CD0	0xF8BD2004  LDRH	R2, [SP, #4]
0x1CD4	0xEE002A90  VMOV	S1, R2
0x1CD8	0xEEF80A60  VCVT.F32.U32	S1, S1
0x1CDC	0xEEC00A80  VDIV.F32	S1, S1, S0
0x1CE0	0xEEB20A00  VMOV.F32	S0, #8
0x1CE4	0xEE300A80  VADD.F32	S0, S1, S0
; alphaPTAT start address is: 0 (S0)
;__irgrid2_driver.c, 321 :: 		mlx90640->KvPTAT = KvPTAT;
0x1CE8	0x1D32    ADDS	R2, R6, #4
0x1CEA	0xED023A00  VSTR.32	S6, [R2, #0]
; KvPTAT end address is: 24 (S6)
;__irgrid2_driver.c, 322 :: 		mlx90640->KtPTAT = KtPTAT;
0x1CEE	0xF2060208  ADDW	R2, R6, #8
0x1CF2	0xED423A00  VSTR.32	S7, [R2, #0]
; KtPTAT end address is: 28 (S7)
;__irgrid2_driver.c, 323 :: 		mlx90640->vPTAT25 = vPTAT25;
0x1CF6	0xF206020C  ADDW	R2, R6, #12
0x1CFA	0x8017    STRH	R7, [R2, #0]
; vPTAT25 end address is: 28 (R7)
;__irgrid2_driver.c, 324 :: 		mlx90640->alphaPTAT = alphaPTAT;
0x1CFC	0xF2060210  ADDW	R2, R6, #16
; mlx90640 end address is: 24 (R6)
0x1D00	0xED020A00  VSTR.32	S0, [R2, #0]
; alphaPTAT end address is: 0 (S0)
;__irgrid2_driver.c, 325 :: 		}
L_end_ExtractPTATParameters:
0x1D04	0xF8DDE000  LDR	LR, [SP, #0]
0x1D08	0xB002    ADD	SP, SP, #8
0x1D0A	0x4770    BX	LR
0x1D0C	0x800043FF  	#1140817920
; end of __irgrid2_driver_ExtractPTATParameters
__irgrid2_driver__pow:
;__irgrid2_driver.c, 239 :: 		static double _pow(double x, double y) {
0x183C	0xB082    SUB	SP, SP, #8
0x183E	0xF8CDE000  STR	LR, [SP, #0]
; y start address is: 4 (S1)
; x start address is: 0 (S0)
0x1842	0xEEF02A40  VMOV.F32	S5, S0
0x1846	0xEEB02A60  VMOV.F32	S4, S1
; y end address is: 4 (S1)
; x end address is: 0 (S0)
; x start address is: 20 (S5)
; y start address is: 16 (S4)
;__irgrid2_driver.c, 240 :: 		unsigned char sign = 0;
; sign start address is: 0 (R0)
0x184A	0x2000    MOVS	R0, #0
;__irgrid2_driver.c, 244 :: 		if(y == 0.0)
0x184C	0xEEB52AC0  VCMPE.F32	S4, #0.0
0x1850	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x1854	0xD102    BNE	L___irgrid2_driver__pow20
; x end address is: 20 (S5)
; y end address is: 16 (S4)
; sign end address is: 0 (R0)
;__irgrid2_driver.c, 245 :: 		return 1.0;
0x1856	0xEEB70A00  VMOV.F32	S0, #1
0x185A	0xE03E    B	L_end__pow
L___irgrid2_driver__pow20:
;__irgrid2_driver.c, 246 :: 		if(x == 0.0)
; sign start address is: 0 (R0)
; y start address is: 16 (S4)
; x start address is: 20 (S5)
0x185C	0xEEF52AC0  VCMPE.F32	S5, #0.0
0x1860	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x1864	0xD104    BNE	L___irgrid2_driver__pow21
; x end address is: 20 (S5)
; y end address is: 16 (S4)
; sign end address is: 0 (R0)
;__irgrid2_driver.c, 247 :: 		return 0.0;
0x1866	0xF04F0200  MOV	R2, #0
0x186A	0xEE002A10  VMOV	S0, R2
0x186E	0xE034    B	L_end__pow
L___irgrid2_driver__pow21:
;__irgrid2_driver.c, 248 :: 		if(x < 0.0) {
; sign start address is: 0 (R0)
; y start address is: 16 (S4)
; x start address is: 20 (S5)
0x1870	0xEEF52AC0  VCMPE.F32	S5, #0.0
0x1874	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x1878	0xDA1B    BGE	L___irgrid2_driver__pow208
; sign end address is: 0 (R0)
;__irgrid2_driver.c, 249 :: 		yi = (long)y;
0x187A	0xEEBD0A42  VCVT.S32.F32	S0, S4
0x187E	0xEE102A10  VMOV	R2, S0
; yi start address is: 0 (R0)
0x1882	0x4610    MOV	R0, R2
;__irgrid2_driver.c, 250 :: 		if((double)yi != y)
0x1884	0xEE002A10  VMOV	S0, R2
0x1888	0xEEB80AC0  VCVT.F32.S32	S0, S0
0x188C	0xEEB40AC2  VCMPE.F32	S0, S4
0x1890	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x1894	0xD004    BEQ	L___irgrid2_driver__pow23
; x end address is: 20 (S5)
; y end address is: 16 (S4)
; yi end address is: 0 (R0)
;__irgrid2_driver.c, 251 :: 		return 0.0;
0x1896	0xF04F0200  MOV	R2, #0
0x189A	0xEE002A10  VMOV	S0, R2
0x189E	0xE01C    B	L_end__pow
L___irgrid2_driver__pow23:
;__irgrid2_driver.c, 252 :: 		sign = yi & 1;
; yi start address is: 0 (R0)
; y start address is: 16 (S4)
; x start address is: 20 (S5)
0x18A0	0xF0000201  AND	R2, R0, #1
; yi end address is: 0 (R0)
; sign start address is: 0 (R0)
0x18A4	0xB2D0    UXTB	R0, R2
;__irgrid2_driver.c, 253 :: 		x = -x;
0x18A6	0xEEF10A62  VNEG.F32	S1, S5
; x end address is: 20 (S5)
; x start address is: 4 (S1)
; sign end address is: 0 (R0)
; x end address is: 4 (S1)
0x18AA	0xB2C5    UXTB	R5, R0
0x18AC	0xEEB00A60  VMOV.F32	S0, S1
;__irgrid2_driver.c, 254 :: 		}
0x18B0	0xE005    B	L___irgrid2_driver__pow22
L___irgrid2_driver__pow208:
;__irgrid2_driver.c, 248 :: 		if(x < 0.0) {
0x18B2	0xF88D0004  STRB	R0, [SP, #4]
0x18B6	0xEEB00A62  VMOV.F32	S0, S5
0x18BA	0xF89D5004  LDRB	R5, [SP, #4]
;__irgrid2_driver.c, 254 :: 		}
L___irgrid2_driver__pow22:
;__irgrid2_driver.c, 255 :: 		x = _log(x);
; x start address is: 0 (S0)
; sign start address is: 20 (R5)
; x end address is: 0 (S0)
0x18BE	0xF7FFFD37  BL	__irgrid2_driver__log+0
;__irgrid2_driver.c, 256 :: 		x = x*y;
0x18C2	0xEE200A02  VMUL.F32	S0, S0, S4
; y end address is: 16 (S4)
;__irgrid2_driver.c, 257 :: 		x = _exp(x);
0x18C6	0xF7FFFCB9  BL	__irgrid2_driver__exp+0
; x start address is: 4 (S1)
0x18CA	0xEEF00A40  VMOV.F32	S1, S0
;__irgrid2_driver.c, 259 :: 		if(sign)
0x18CE	0xB115    CBZ	R5, L___irgrid2_driver__pow24
; sign end address is: 20 (R5)
;__irgrid2_driver.c, 260 :: 		return -x;
0x18D0	0xEEB10A60  VNEG.F32	S0, S1
; x end address is: 4 (S1)
0x18D4	0xE001    B	L_end__pow
L___irgrid2_driver__pow24:
;__irgrid2_driver.c, 261 :: 		return x;
; x start address is: 4 (S1)
0x18D6	0xEEB00A60  VMOV.F32	S0, S1
; x end address is: 4 (S1)
;__irgrid2_driver.c, 262 :: 		}
L_end__pow:
0x18DA	0xF8DDE000  LDR	LR, [SP, #0]
0x18DE	0xB002    ADD	SP, SP, #8
0x18E0	0x4770    BX	LR
; end of __irgrid2_driver__pow
__irgrid2_driver__log:
;__irgrid2_driver.c, 213 :: 		static double _log(double x) {
0x1330	0xB082    SUB	SP, SP, #8
0x1332	0xF8CDE000  STR	LR, [SP, #0]
; x start address is: 0 (S0)
; x end address is: 0 (S0)
; x start address is: 0 (S0)
;__irgrid2_driver.c, 229 :: 		if(x <= 0.0)
0x1336	0xEEB50AC0  VCMPE.F32	S0, #0.0
0x133A	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x133E	0xDC04    BGT	L___irgrid2_driver__log19
; x end address is: 0 (S0)
;__irgrid2_driver.c, 230 :: 		return 0.0;
0x1340	0xF04F0100  MOV	R1, #0
0x1344	0xEE001A10  VMOV	S0, R1
0x1348	0xE023    B	L_end__log
L___irgrid2_driver__log19:
;__irgrid2_driver.c, 231 :: 		x = _frexp(x, &exp) * 2.0 - 1.0;
; x start address is: 0 (S0)
0x134A	0xA901    ADD	R1, SP, #4
0x134C	0x4608    MOV	R0, R1
; x end address is: 0 (S0)
0x134E	0xF7FFFA45  BL	__irgrid2_driver__frexp+0
0x1352	0xEEF00A00  VMOV.F32	S1, #2
0x1356	0xEE600A20  VMUL.F32	S1, S0, S1
0x135A	0xEEB70A00  VMOV.F32	S0, #1
0x135E	0xEE300AC0  VSUB.F32	S0, S1, S0
;__irgrid2_driver.c, 232 :: 		exp--;
0x1362	0xF9BD1004  LDRSH	R1, [SP, #4]
0x1366	0x1E49    SUBS	R1, R1, #1
0x1368	0xF8AD1004  STRH	R1, [SP, #4]
;__irgrid2_driver.c, 233 :: 		x = _eval_poly(x, coeff, sizeof coeff/sizeof coeff[0] - 1);
0x136C	0xF2400108  MOVW	R1, #8
0x1370	0xB209    SXTH	R1, R1
0x1372	0x480A    LDR	R0, [PC, #40]
0x1374	0xF7FFFD60  BL	__irgrid2_driver__eval_poly+0
;__irgrid2_driver.c, 234 :: 		return x + 0.69314718055995 * exp;
0x1378	0xF9BD1004  LDRSH	R1, [SP, #4]
0x137C	0xEE011A10  VMOV	S2, R1
0x1380	0xEEB81AC1  VCVT.F32.S32	S2, S2
0x1384	0x4906    LDR	R1, [PC, #24]
0x1386	0xEE001A90  VMOV	S1, R1
0x138A	0xEE600A81  VMUL.F32	S1, S1, S2
0x138E	0xEE300A20  VADD.F32	S0, S0, S1
;__irgrid2_driver.c, 236 :: 		}
L_end__log:
0x1392	0xF8DDE000  LDR	LR, [SP, #0]
0x1396	0xB002    ADD	SP, SP, #8
0x1398	0x4770    BX	LR
0x139A	0xBF00    NOP
0x139C	0x501C0000  	__irgrid2_driver__log_coeff_L0+0
0x13A0	0x72183F31  	#1060205080
; end of __irgrid2_driver__log
__irgrid2_driver__frexp:
;__irgrid2_driver.c, 81 :: 		static double _frexp(double value, int * eptr)
; eptr start address is: 0 (R0)
0x07DC	0xB081    SUB	SP, SP, #4
; value start address is: 0 (S0)
; eptr end address is: 0 (R0)
; value end address is: 0 (S0)
; value start address is: 0 (S0)
; eptr start address is: 0 (R0)
;__irgrid2_driver.c, 86 :: 		uv.fl = value;
0x07DE	0xED0D0A00  VSTR.32	S0, [SP, #0]
; value end address is: 0 (S0)
;__irgrid2_driver.c, 87 :: 		bb = uv.flt.exp - EXCESS;
0x07E2	0xF8BD1002  LDRH	R1, [SP, #2]
0x07E6	0xF3C111C7  UBFX	R1, R1, #7, #8
0x07EA	0x397E    SUBS	R1, #126
; bb start address is: 4 (R1)
0x07EC	0xB209    SXTH	R1, R1
;__irgrid2_driver.c, 88 :: 		*eptr = bb;
0x07EE	0x8001    STRH	R1, [R0, #0]
; eptr end address is: 0 (R0)
; bb end address is: 4 (R1)
;__irgrid2_driver.c, 89 :: 		uv.flt.exp = EXCESS;
0x07F0	0x227E    MOVS	R2, #126
0x07F2	0xF8BD1002  LDRH	R1, [SP, #2]
0x07F6	0xF36211CE  BFI	R1, R2, #7, #8
0x07FA	0xF8AD1002  STRH	R1, [SP, #2]
;__irgrid2_driver.c, 90 :: 		return uv.fl;
0x07FE	0xED1D0A00  VLDR.32	S0, [SP, #0]
;__irgrid2_driver.c, 91 :: 		}
L_end__frexp:
0x0802	0xB001    ADD	SP, SP, #4
0x0804	0x4770    BX	LR
; end of __irgrid2_driver__frexp
__irgrid2_driver__eval_poly:
;__irgrid2_driver.c, 157 :: 		static static double _eval_poly(double x, const double code * d, int n)
; n start address is: 4 (R1)
; d start address is: 0 (R0)
0x0E38	0xB081    SUB	SP, SP, #4
; x start address is: 0 (S0)
0x0E3A	0xEEF00A40  VMOV.F32	S1, S0
; n end address is: 4 (R1)
; d end address is: 0 (R0)
; x end address is: 0 (S0)
; x start address is: 4 (S1)
; d start address is: 0 (R0)
; n start address is: 4 (R1)
;__irgrid2_driver.c, 161 :: 		res = d[n];
0x0E3E	0x008A    LSLS	R2, R1, #2
0x0E40	0x1882    ADDS	R2, R0, R2
0x0E42	0xED120A00  VLDR.32	S0, [R2, #0]
; res start address is: 8 (S2)
0x0E46	0xEEB01A40  VMOV.F32	S2, S0
; x end address is: 4 (S1)
; res end address is: 8 (S2)
; n end address is: 4 (R1)
0x0E4A	0xEEB00A41  VMOV.F32	S0, S2
0x0E4E	0xEEB01A60  VMOV.F32	S2, S1
;__irgrid2_driver.c, 162 :: 		while(n)
L___irgrid2_driver__eval_poly11:
; res start address is: 0 (S0)
; x start address is: 8 (S2)
; n start address is: 4 (R1)
; d start address is: 0 (R0)
; d end address is: 0 (R0)
; x start address is: 8 (S2)
; x end address is: 8 (S2)
0x0E52	0xB179    CBZ	R1, L___irgrid2_driver__eval_poly12
; d end address is: 0 (R0)
; x end address is: 8 (S2)
;__irgrid2_driver.c, 164 :: 		res = x * res + d[--n];
; x start address is: 8 (S2)
; d start address is: 0 (R0)
0x0E54	0xEE610A00  VMUL.F32	S1, S2, S0
; res end address is: 0 (S0)
0x0E58	0x1E4A    SUBS	R2, R1, #1
0x0E5A	0xB212    SXTH	R2, R2
0x0E5C	0xB211    SXTH	R1, R2
0x0E5E	0x0092    LSLS	R2, R2, #2
0x0E60	0x1882    ADDS	R2, R0, R2
0x0E62	0xED120A00  VLDR.32	S0, [R2, #0]
0x0E66	0xEE300A80  VADD.F32	S0, S1, S0
; res start address is: 0 (S0)
;__irgrid2_driver.c, 165 :: 		}
0x0E6A	0xED0D0A00  VSTR.32	S0, [SP, #0]
; d end address is: 0 (R0)
; x end address is: 8 (S2)
; n end address is: 4 (R1)
0x0E6E	0xED1D0A00  VLDR.32	S0, [SP, #0]
0x0E72	0xE7EE    B	L___irgrid2_driver__eval_poly11
L___irgrid2_driver__eval_poly12:
;__irgrid2_driver.c, 166 :: 		return res;
; res end address is: 0 (S0)
;__irgrid2_driver.c, 167 :: 		}
L_end__eval_poly:
0x0E74	0xB001    ADD	SP, SP, #4
0x0E76	0x4770    BX	LR
; end of __irgrid2_driver__eval_poly
__irgrid2_driver__exp:
;__irgrid2_driver.c, 170 :: 		static double _exp(double x)
0x123C	0xB081    SUB	SP, SP, #4
0x123E	0xF8CDE000  STR	LR, [SP, #0]
; x start address is: 0 (S0)
0x1242	0xEEF01A40  VMOV.F32	S3, S0
; x end address is: 0 (S0)
; x start address is: 12 (S3)
;__irgrid2_driver.c, 190 :: 		if(x == 0.0)
0x1246	0xEEF51AC0  VCMPE.F32	S3, #0.0
0x124A	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x124E	0xD102    BNE	L___irgrid2_driver__exp13
; x end address is: 12 (S3)
;__irgrid2_driver.c, 191 :: 		return 1.0;
0x1250	0xEEB70A00  VMOV.F32	S0, #1
0x1254	0xE05D    B	L_end__exp
L___irgrid2_driver__exp13:
;__irgrid2_driver.c, 192 :: 		if (x > EXP_MAX)    //too big?
; x start address is: 12 (S3)
0x1256	0x4931    LDR	R1, [PC, #196]
0x1258	0xEE001A10  VMOV	S0, R1
0x125C	0xEEF41AC0  VCMPE.F32	S3, S0
0x1260	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x1264	0xDD03    BLE	L___irgrid2_driver__exp14
; x end address is: 12 (S3)
;__irgrid2_driver.c, 193 :: 		return DBL_MAX;
0x1266	0x492E    LDR	R1, [PC, #184]
0x1268	0xEE001A10  VMOV	S0, R1
0x126C	0xE051    B	L_end__exp
L___irgrid2_driver__exp14:
;__irgrid2_driver.c, 194 :: 		if (x < EXP_MIN)    //too small?
; x start address is: 12 (S3)
0x126E	0x492D    LDR	R1, [PC, #180]
0x1270	0xEE001A10  VMOV	S0, R1
0x1274	0xEEF41AC0  VCMPE.F32	S3, S0
0x1278	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x127C	0xDA04    BGE	L___irgrid2_driver__exp15
; x end address is: 12 (S3)
;__irgrid2_driver.c, 195 :: 		return 0.0;
0x127E	0xF04F0100  MOV	R1, #0
0x1282	0xEE001A10  VMOV	S0, R1
0x1286	0xE044    B	L_end__exp
L___irgrid2_driver__exp15:
;__irgrid2_driver.c, 196 :: 		sign = x < 0.0;
; x start address is: 12 (S3)
0x1288	0xEEF51AC0  VCMPE.F32	S3, #0.0
0x128C	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x1290	0xF2400100  MOVW	R1, #0
0x1294	0xDA00    BGE	L___irgrid2_driver__exp258
0x1296	0x2101    MOVS	R1, #1
L___irgrid2_driver__exp258:
; sign start address is: 12 (R3)
0x1298	0xB2CB    UXTB	R3, R1
;__irgrid2_driver.c, 197 :: 		if(sign)
0x129A	0xB2C9    UXTB	R1, R1
0x129C	0xB111    CBZ	R1, L___irgrid2_driver__exp207
;__irgrid2_driver.c, 198 :: 		x = -x;
0x129E	0xEEF10A61  VNEG.F32	S1, S3
; x end address is: 12 (S3)
; x start address is: 4 (S1)
; x end address is: 4 (S1)
0x12A2	0xE001    B	L___irgrid2_driver__exp16
L___irgrid2_driver__exp207:
;__irgrid2_driver.c, 197 :: 		if(sign)
0x12A4	0xEEF00A61  VMOV.F32	S1, S3
;__irgrid2_driver.c, 198 :: 		x = -x;
L___irgrid2_driver__exp16:
;__irgrid2_driver.c, 199 :: 		x *= 1.4426950409;            // convert to log2 //
; x start address is: 4 (S1)
0x12A8	0x491F    LDR	R1, [PC, #124]
0x12AA	0xEE001A10  VMOV	S0, R1
0x12AE	0xEE200A80  VMUL.F32	S0, S1, S0
; x end address is: 4 (S1)
; x start address is: 12 (S3)
0x12B2	0xEEF01A40  VMOV.F32	S3, S0
;__irgrid2_driver.c, 200 :: 		exp = (int)_floor(x);
0x12B6	0xF7FFFDFB  BL	__irgrid2_driver__floor+0
0x12BA	0xEEBD0A40  VCVT.S32.F32	S0, S0
0x12BE	0xEE101A10  VMOV	R1, S0
0x12C2	0xB209    SXTH	R1, R1
; exp start address is: 16 (R4)
0x12C4	0xB20C    SXTH	R4, R1
;__irgrid2_driver.c, 201 :: 		x -= (double)exp;
0x12C6	0xEE001A10  VMOV	S0, R1
0x12CA	0xEEB80AC0  VCVT.F32.S32	S0, S0
0x12CE	0xEE310AC0  VSUB.F32	S0, S3, S0
; x end address is: 12 (S3)
;__irgrid2_driver.c, 202 :: 		x = _ldexp(_eval_poly(x, coeff, sizeof coeff/sizeof coeff[0] - 1), exp);
0x12D2	0xF2400109  MOVW	R1, #9
0x12D6	0xB209    SXTH	R1, R1
0x12D8	0x4814    LDR	R0, [PC, #80]
0x12DA	0xF7FFFDAD  BL	__irgrid2_driver__eval_poly+0
0x12DE	0xB220    SXTH	R0, R4
; exp end address is: 16 (R4)
0x12E0	0xF7FFFE26  BL	__irgrid2_driver__ldexp+0
; x start address is: 4 (S1)
0x12E4	0xEEF00A40  VMOV.F32	S1, S0
;__irgrid2_driver.c, 203 :: 		if(sign) {
0x12E8	0xB18B    CBZ	R3, L___irgrid2_driver__exp17
; sign end address is: 12 (R3)
;__irgrid2_driver.c, 204 :: 		if (x == DBL_MAX)
0x12EA	0x490D    LDR	R1, [PC, #52]
0x12EC	0xEE001A10  VMOV	S0, R1
0x12F0	0xEEF40AC0  VCMPE.F32	S1, S0
0x12F4	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x12F8	0xD104    BNE	L___irgrid2_driver__exp18
; x end address is: 4 (S1)
;__irgrid2_driver.c, 205 :: 		return 0.0;
0x12FA	0xF04F0100  MOV	R1, #0
0x12FE	0xEE001A10  VMOV	S0, R1
0x1302	0xE006    B	L_end__exp
L___irgrid2_driver__exp18:
;__irgrid2_driver.c, 206 :: 		return 1.0/x;
; x start address is: 4 (S1)
0x1304	0xEEB70A00  VMOV.F32	S0, #1
0x1308	0xEE800A20  VDIV.F32	S0, S0, S1
; x end address is: 4 (S1)
0x130C	0xE001    B	L_end__exp
;__irgrid2_driver.c, 207 :: 		}
L___irgrid2_driver__exp17:
;__irgrid2_driver.c, 208 :: 		return x;
; x start address is: 4 (S1)
0x130E	0xEEB00A60  VMOV.F32	S0, S1
; x end address is: 4 (S1)
;__irgrid2_driver.c, 209 :: 		}
L_end__exp:
0x1312	0xF8DDE000  LDR	LR, [SP, #0]
0x1316	0xB001    ADD	SP, SP, #4
0x1318	0x4770    BX	LR
0x131A	0xBF00    NOP
0x131C	0xD4FE42B2  	#1119016190
0x1320	0xFFFF7F7F  	#2139095039
0x1324	0xAC50C2AE  	#-1028740016
0x1328	0xAA3B3FB8  	#1069066811
0x132C	0x4FF40000  	__irgrid2_driver__exp_coeff_L0+0
; end of __irgrid2_driver__exp
__irgrid2_driver__floor:
;__irgrid2_driver.c, 126 :: 		static double _floor(double x)
0x0EB0	0xB081    SUB	SP, SP, #4
0x0EB2	0xED0D0A00  VSTR.32	S0, [SP, #0]
;__irgrid2_driver.c, 131 :: 		expon = ((*(unsigned long *)&x >> 23) & 255);
0x0EB6	0xA900    ADD	R1, SP, #0
0x0EB8	0x6809    LDR	R1, [R1, #0]
0x0EBA	0x0DC9    LSRS	R1, R1, #23
0x0EBC	0xF00101FF  AND	R1, R1, #255
;__irgrid2_driver.c, 132 :: 		expon = expon- 127;
0x0EC0	0xB209    SXTH	R1, R1
0x0EC2	0x397F    SUBS	R1, #127
0x0EC4	0xB209    SXTH	R1, R1
; expon start address is: 0 (R0)
0x0EC6	0xB208    SXTH	R0, R1
;__irgrid2_driver.c, 133 :: 		if(expon < 0)
0x0EC8	0x2900    CMP	R1, #0
0x0ECA	0xDA0E    BGE	L___irgrid2_driver__floor6
; expon end address is: 0 (R0)
;__irgrid2_driver.c, 135 :: 		if (x < 0.0)
0x0ECC	0xED1D0A00  VLDR.32	S0, [SP, #0]
0x0ED0	0xEEB50AC0  VCMPE.F32	S0, #0.0
0x0ED4	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x0ED8	0xDA02    BGE	L___irgrid2_driver__floor7
;__irgrid2_driver.c, 137 :: 		return -1.0;
0x0EDA	0xEEBF0A00  VMOV.F32	S0, #-1
0x0EDE	0xE024    B	L_end__floor
;__irgrid2_driver.c, 138 :: 		}
L___irgrid2_driver__floor7:
;__irgrid2_driver.c, 141 :: 		return  0.0;
0x0EE0	0xF04F0100  MOV	R1, #0
0x0EE4	0xEE001A10  VMOV	S0, R1
0x0EE8	0xE01F    B	L_end__floor
;__irgrid2_driver.c, 143 :: 		}
L___irgrid2_driver__floor6:
;__irgrid2_driver.c, 144 :: 		if((unsigned)expon > sizeof(double) * CHAR_BIT - 8)
; expon start address is: 0 (R0)
0x0EEA	0xB281    UXTH	R1, R0
; expon end address is: 0 (R0)
0x0EEC	0x2918    CMP	R1, #24
0x0EEE	0xD902    BLS	L___irgrid2_driver__floor9
;__irgrid2_driver.c, 146 :: 		return x;           /* already an integer */
0x0EF0	0xED1D0A00  VLDR.32	S0, [SP, #0]
0x0EF4	0xE019    B	L_end__floor
;__irgrid2_driver.c, 147 :: 		}
L___irgrid2_driver__floor9:
;__irgrid2_driver.c, 148 :: 		i = _FRNDINT(x);
0x0EF6	0xED1D0A00  VLDR.32	S0, [SP, #0]
0x0EFA	0xEEBD0A40  VCVT.S32.F32	S0, S0
0x0EFE	0xEE101A10  VMOV	R1, S0
0x0F02	0xEE001A90  VMOV	S1, R1
0x0F06	0xEEF80AE0  VCVT.F32.S32	S1, S1
; i start address is: 8 (S2)
0x0F0A	0xEEB01A60  VMOV.F32	S2, S1
;__irgrid2_driver.c, 149 :: 		if(i > x)
0x0F0E	0xED1D0A00  VLDR.32	S0, [SP, #0]
0x0F12	0xEEF40AC0  VCMPE.F32	S1, S0
0x0F16	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x0F1A	0xDD04    BLE	L___irgrid2_driver__floor10
;__irgrid2_driver.c, 151 :: 		return i - 1.0;
0x0F1C	0xEEB70A00  VMOV.F32	S0, #1
0x0F20	0xEE310A40  VSUB.F32	S0, S2, S0
; i end address is: 8 (S2)
0x0F24	0xE001    B	L_end__floor
;__irgrid2_driver.c, 152 :: 		}
L___irgrid2_driver__floor10:
;__irgrid2_driver.c, 153 :: 		return i;
; i start address is: 8 (S2)
0x0F26	0xEEB00A41  VMOV.F32	S0, S2
; i end address is: 8 (S2)
;__irgrid2_driver.c, 154 :: 		}
L_end__floor:
0x0F2A	0xB001    ADD	SP, SP, #4
0x0F2C	0x4770    BX	LR
; end of __irgrid2_driver__floor
__irgrid2_driver__ldexp:
;__irgrid2_driver.c, 94 :: 		static double _ldexp(double value, int newexp)
; newexp start address is: 0 (R0)
0x0F30	0xB081    SUB	SP, SP, #4
; value start address is: 0 (S0)
; newexp end address is: 0 (R0)
; value end address is: 0 (S0)
; value start address is: 0 (S0)
; newexp start address is: 0 (R0)
;__irgrid2_driver.c, 98 :: 		uv.fl = value;
0x0F32	0xED0D0A00  VSTR.32	S0, [SP, #0]
;__irgrid2_driver.c, 99 :: 		newexp += uv.flt.exp;
0x0F36	0xF8BD1002  LDRH	R1, [SP, #2]
0x0F3A	0xF3C111C7  UBFX	R1, R1, #7, #8
0x0F3E	0x1841    ADDS	R1, R0, R1
0x0F40	0xB208    SXTH	R0, R1
;__irgrid2_driver.c, 100 :: 		if (newexp < 0)
0x0F42	0xB209    SXTH	R1, R1
0x0F44	0x2900    CMP	R1, #0
0x0F46	0xDA04    BGE	L___irgrid2_driver__ldexp0
; value end address is: 0 (S0)
; newexp end address is: 0 (R0)
;__irgrid2_driver.c, 102 :: 		return 0.0;
0x0F48	0xF04F0100  MOV	R1, #0
0x0F4C	0xEE001A10  VMOV	S0, R1
0x0F50	0xE019    B	L_end__ldexp
;__irgrid2_driver.c, 103 :: 		}
L___irgrid2_driver__ldexp0:
;__irgrid2_driver.c, 106 :: 		if (newexp > MAX_EXPONENT)
; newexp start address is: 0 (R0)
; value start address is: 0 (S0)
0x0F52	0xF1B00FFF  CMP	R0, #255
0x0F56	0xDD0D    BLE	L___irgrid2_driver__ldexp2
; newexp end address is: 0 (R0)
;__irgrid2_driver.c, 108 :: 		if (value < 0.0)
0x0F58	0xEEB50AC0  VCMPE.F32	S0, #0.0
0x0F5C	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x0F60	0xDA04    BGE	L___irgrid2_driver__ldexp3
; value end address is: 0 (S0)
;__irgrid2_driver.c, 110 :: 		return -DBL_MAX;
0x0F62	0xF46F0100  MVN	R1, #8388608
0x0F66	0xEE001A10  VMOV	S0, R1
0x0F6A	0xE00C    B	L_end__ldexp
;__irgrid2_driver.c, 111 :: 		}
L___irgrid2_driver__ldexp3:
;__irgrid2_driver.c, 114 :: 		return DBL_MAX;
0x0F6C	0x4907    LDR	R1, [PC, #28]
0x0F6E	0xEE001A10  VMOV	S0, R1
0x0F72	0xE008    B	L_end__ldexp
;__irgrid2_driver.c, 116 :: 		}
L___irgrid2_driver__ldexp2:
;__irgrid2_driver.c, 119 :: 		uv.flt.exp = newexp;
; newexp start address is: 0 (R0)
0x0F74	0xB282    UXTH	R2, R0
; newexp end address is: 0 (R0)
0x0F76	0xF8BD1002  LDRH	R1, [SP, #2]
0x0F7A	0xF36211CE  BFI	R1, R2, #7, #8
0x0F7E	0xF8AD1002  STRH	R1, [SP, #2]
;__irgrid2_driver.c, 122 :: 		return uv.fl;
0x0F82	0xED1D0A00  VLDR.32	S0, [SP, #0]
;__irgrid2_driver.c, 123 :: 		}
L_end__ldexp:
0x0F86	0xB001    ADD	SP, SP, #4
0x0F88	0x4770    BX	LR
0x0F8A	0xBF00    NOP
0x0F8C	0xFFFF7F7F  	#2139095039
; end of __irgrid2_driver__ldexp
__irgrid2_driver_ExtractGainParameters:
;__irgrid2_driver.c, 327 :: 		static void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
; mlx90640 start address is: 4 (R1)
; eeData start address is: 0 (R0)
; mlx90640 end address is: 4 (R1)
; eeData end address is: 0 (R0)
; eeData start address is: 0 (R0)
; mlx90640 start address is: 4 (R1)
;__irgrid2_driver.c, 331 :: 		gainEE = eeData[48];
0x1A48	0xF2000260  ADDW	R2, R0, #96
; eeData end address is: 0 (R0)
0x1A4C	0x8812    LDRH	R2, [R2, #0]
; gainEE start address is: 0 (R0)
0x1A4E	0xB210    SXTH	R0, R2
;__irgrid2_driver.c, 332 :: 		if(gainEE > 32767)
0x1A50	0xB213    SXTH	R3, R2
0x1A52	0xF64772FF  MOVW	R2, #32767
0x1A56	0x4293    CMP	R3, R2
0x1A58	0xDD03    BLE	L___irgrid2_driver_ExtractGainParameters212
;__irgrid2_driver.c, 334 :: 		gainEE = gainEE -65536;
0x1A5A	0xF5A03280  SUB	R2, R0, #65536
0x1A5E	0xB210    SXTH	R0, R2
; gainEE end address is: 0 (R0)
;__irgrid2_driver.c, 335 :: 		}
0x1A60	0xE7FF    B	L___irgrid2_driver_ExtractGainParameters29
L___irgrid2_driver_ExtractGainParameters212:
;__irgrid2_driver.c, 332 :: 		if(gainEE > 32767)
;__irgrid2_driver.c, 335 :: 		}
L___irgrid2_driver_ExtractGainParameters29:
;__irgrid2_driver.c, 336 :: 		mlx90640->gainEE = gainEE;
; gainEE start address is: 0 (R0)
0x1A62	0xF2010214  ADDW	R2, R1, #20
; mlx90640 end address is: 4 (R1)
0x1A66	0x8010    STRH	R0, [R2, #0]
; gainEE end address is: 0 (R0)
;__irgrid2_driver.c, 337 :: 		}
L_end_ExtractGainParameters:
0x1A68	0x4770    BX	LR
; end of __irgrid2_driver_ExtractGainParameters
__irgrid2_driver_ExtractTgcParameters:
;__irgrid2_driver.c, 339 :: 		static void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
; mlx90640 start address is: 4 (R1)
; eeData start address is: 0 (R0)
; mlx90640 end address is: 4 (R1)
; eeData end address is: 0 (R0)
; eeData start address is: 0 (R0)
; mlx90640 start address is: 4 (R1)
;__irgrid2_driver.c, 342 :: 		tgc = eeData[60] & 0x00FF;
0x2A0C	0xF2000278  ADDW	R2, R0, #120
; eeData end address is: 0 (R0)
0x2A10	0x8812    LDRH	R2, [R2, #0]
0x2A12	0xF00202FF  AND	R2, R2, #255
0x2A16	0xB292    UXTH	R2, R2
0x2A18	0xEE002A90  VMOV	S1, R2
0x2A1C	0xEEF80A60  VCVT.F32.U32	S1, S1
; tgc start address is: 8 (S2)
0x2A20	0xEEB01A60  VMOV.F32	S2, S1
;__irgrid2_driver.c, 343 :: 		if(tgc > 127)
0x2A24	0x4A0D    LDR	R2, [PC, #52]
0x2A26	0xEE002A10  VMOV	S0, R2
0x2A2A	0xEEF40AC0  VCMPE.F32	S1, S0
0x2A2E	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x2A32	0xDD06    BLE	L___irgrid2_driver_ExtractTgcParameters213
;__irgrid2_driver.c, 345 :: 		tgc = tgc - 256;
0x2A34	0xF04F4287  MOV	R2, #1132462080
0x2A38	0xEE002A10  VMOV	S0, R2
0x2A3C	0xEE710A40  VSUB.F32	S1, S2, S0
; tgc end address is: 8 (S2)
; tgc start address is: 4 (S1)
; tgc end address is: 4 (S1)
;__irgrid2_driver.c, 346 :: 		}
0x2A40	0xE001    B	L___irgrid2_driver_ExtractTgcParameters30
L___irgrid2_driver_ExtractTgcParameters213:
;__irgrid2_driver.c, 343 :: 		if(tgc > 127)
0x2A42	0xEEF00A41  VMOV.F32	S1, S2
;__irgrid2_driver.c, 346 :: 		}
L___irgrid2_driver_ExtractTgcParameters30:
;__irgrid2_driver.c, 347 :: 		tgc = tgc / 32.0f;
; tgc start address is: 4 (S1)
0x2A46	0xF04F4284  MOV	R2, #1107296256
0x2A4A	0xEE002A10  VMOV	S0, R2
0x2A4E	0xEE800A80  VDIV.F32	S0, S1, S0
; tgc end address is: 4 (S1)
;__irgrid2_driver.c, 349 :: 		mlx90640->tgc = tgc;
0x2A52	0xF2010218  ADDW	R2, R1, #24
; mlx90640 end address is: 4 (R1)
0x2A56	0xED020A00  VSTR.32	S0, [R2, #0]
;__irgrid2_driver.c, 350 :: 		}
L_end_ExtractTgcParameters:
0x2A5A	0x4770    BX	LR
0x2A5C	0x000042FE  	#1123942400
; end of __irgrid2_driver_ExtractTgcParameters
__irgrid2_driver_ExtractResolutionParameters:
;__irgrid2_driver.c, 352 :: 		static void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
; mlx90640 start address is: 4 (R1)
; eeData start address is: 0 (R0)
; mlx90640 end address is: 4 (R1)
; eeData end address is: 0 (R0)
; eeData start address is: 0 (R0)
; mlx90640 start address is: 4 (R1)
;__irgrid2_driver.c, 355 :: 		resolutionEE = (eeData[56] & 0x3000) >> 12;
0x29F4	0xF2000270  ADDW	R2, R0, #112
; eeData end address is: 0 (R0)
0x29F8	0x8812    LDRH	R2, [R2, #0]
0x29FA	0xF4025240  AND	R2, R2, #12288
0x29FE	0xB292    UXTH	R2, R2
0x2A00	0x0B12    LSRS	R2, R2, #12
;__irgrid2_driver.c, 357 :: 		mlx90640->resolutionEE = resolutionEE;
0x2A02	0xF2010324  ADDW	R3, R1, #36
; mlx90640 end address is: 4 (R1)
0x2A06	0xB2D2    UXTB	R2, R2
0x2A08	0x701A    STRB	R2, [R3, #0]
;__irgrid2_driver.c, 358 :: 		}
L_end_ExtractResolutionParameters:
0x2A0A	0x4770    BX	LR
; end of __irgrid2_driver_ExtractResolutionParameters
__irgrid2_driver_ExtractKsTaParameters:
;__irgrid2_driver.c, 360 :: 		static void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
; mlx90640 start address is: 4 (R1)
; eeData start address is: 0 (R0)
; mlx90640 end address is: 4 (R1)
; eeData end address is: 0 (R0)
; eeData start address is: 0 (R0)
; mlx90640 start address is: 4 (R1)
;__irgrid2_driver.c, 363 :: 		KsTa = (eeData[60] & 0xFF00) >> 8;
0x2A60	0xF2000278  ADDW	R2, R0, #120
; eeData end address is: 0 (R0)
0x2A64	0x8812    LDRH	R2, [R2, #0]
0x2A66	0xF402427F  AND	R2, R2, #65280
0x2A6A	0xB292    UXTH	R2, R2
0x2A6C	0x0A12    LSRS	R2, R2, #8
0x2A6E	0xB292    UXTH	R2, R2
0x2A70	0xEE002A90  VMOV	S1, R2
0x2A74	0xEEF80A60  VCVT.F32.U32	S1, S1
; KsTa start address is: 8 (S2)
0x2A78	0xEEB01A60  VMOV.F32	S2, S1
;__irgrid2_driver.c, 364 :: 		if(KsTa > 127)
0x2A7C	0x4A0D    LDR	R2, [PC, #52]
0x2A7E	0xEE002A10  VMOV	S0, R2
0x2A82	0xEEF40AC0  VCMPE.F32	S1, S0
0x2A86	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x2A8A	0xDD06    BLE	L___irgrid2_driver_ExtractKsTaParameters214
;__irgrid2_driver.c, 366 :: 		KsTa = KsTa -256;
0x2A8C	0xF04F4287  MOV	R2, #1132462080
0x2A90	0xEE002A10  VMOV	S0, R2
0x2A94	0xEE710A40  VSUB.F32	S1, S2, S0
; KsTa end address is: 8 (S2)
; KsTa start address is: 4 (S1)
; KsTa end address is: 4 (S1)
;__irgrid2_driver.c, 367 :: 		}
0x2A98	0xE001    B	L___irgrid2_driver_ExtractKsTaParameters31
L___irgrid2_driver_ExtractKsTaParameters214:
;__irgrid2_driver.c, 364 :: 		if(KsTa > 127)
0x2A9A	0xEEF00A41  VMOV.F32	S1, S2
;__irgrid2_driver.c, 367 :: 		}
L___irgrid2_driver_ExtractKsTaParameters31:
;__irgrid2_driver.c, 368 :: 		KsTa = KsTa / 8192.0f;
; KsTa start address is: 4 (S1)
0x2A9E	0xF04F428C  MOV	R2, #1174405120
0x2AA2	0xEE002A10  VMOV	S0, R2
0x2AA6	0xEE800A80  VDIV.F32	S0, S1, S0
; KsTa end address is: 4 (S1)
;__irgrid2_driver.c, 370 :: 		mlx90640->KsTa = KsTa;
0x2AAA	0xF2010228  ADDW	R2, R1, #40
; mlx90640 end address is: 4 (R1)
0x2AAE	0xED020A00  VSTR.32	S0, [R2, #0]
;__irgrid2_driver.c, 371 :: 		}
L_end_ExtractKsTaParameters:
0x2AB2	0x4770    BX	LR
0x2AB4	0x000042FE  	#1123942400
; end of __irgrid2_driver_ExtractKsTaParameters
__irgrid2_driver_ExtractKsToParameters:
;__irgrid2_driver.c, 373 :: 		static void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
; mlx90640 start address is: 4 (R1)
; eeData start address is: 0 (R0)
; mlx90640 end address is: 4 (R1)
; eeData end address is: 0 (R0)
; eeData start address is: 0 (R0)
; mlx90640 start address is: 4 (R1)
;__irgrid2_driver.c, 379 :: 		step = ((eeData[63] & 0x3000) >> 12) * 10;
0x2E48	0xF200027E  ADDW	R2, R0, #126
0x2E4C	0x8812    LDRH	R2, [R2, #0]
0x2E4E	0xF4025240  AND	R2, R2, #12288
0x2E52	0xB292    UXTH	R2, R2
0x2E54	0x0B13    LSRS	R3, R2, #12
0x2E56	0xB29B    UXTH	R3, R3
0x2E58	0x220A    MOVS	R2, #10
0x2E5A	0x435A    MULS	R2, R3, R2
; step start address is: 24 (R6)
0x2E5C	0xB256    SXTB	R6, R2
;__irgrid2_driver.c, 381 :: 		mlx90640->ct[0] = -40;
0x2E5E	0xF201033C  ADDW	R3, R1, #60
0x2E62	0xF64F72D8  MOVW	R2, #65496
0x2E66	0xB212    SXTH	R2, R2
0x2E68	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 382 :: 		mlx90640->ct[1] = 0;
0x2E6A	0xF201023C  ADDW	R2, R1, #60
0x2E6E	0x1C93    ADDS	R3, R2, #2
0x2E70	0x2200    MOVS	R2, #0
0x2E72	0xB212    SXTH	R2, R2
0x2E74	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 383 :: 		mlx90640->ct[2] = (eeData[63] & 0x00F0) >> 4;
0x2E76	0xF201023C  ADDW	R2, R1, #60
0x2E7A	0x1D13    ADDS	R3, R2, #4
0x2E7C	0xF200027E  ADDW	R2, R0, #126
0x2E80	0x8812    LDRH	R2, [R2, #0]
0x2E82	0xF00202F0  AND	R2, R2, #240
0x2E86	0xB292    UXTH	R2, R2
0x2E88	0x0912    LSRS	R2, R2, #4
0x2E8A	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 384 :: 		mlx90640->ct[3] = (eeData[63] & 0x0F00) >> 8;
0x2E8C	0xF201023C  ADDW	R2, R1, #60
0x2E90	0x1D93    ADDS	R3, R2, #6
0x2E92	0xF200027E  ADDW	R2, R0, #126
0x2E96	0x8812    LDRH	R2, [R2, #0]
0x2E98	0xF4026270  AND	R2, R2, #3840
0x2E9C	0xB292    UXTH	R2, R2
0x2E9E	0x0A12    LSRS	R2, R2, #8
0x2EA0	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 386 :: 		mlx90640->ct[2] = mlx90640->ct[2]*step;
0x2EA2	0xF201023C  ADDW	R2, R1, #60
0x2EA6	0x1D13    ADDS	R3, R2, #4
0x2EA8	0x1D12    ADDS	R2, R2, #4
0x2EAA	0xF9B22000  LDRSH	R2, [R2, #0]
0x2EAE	0x4372    MULS	R2, R6, R2
0x2EB0	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 387 :: 		mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
0x2EB2	0xF201053C  ADDW	R5, R1, #60
0x2EB6	0x1DAC    ADDS	R4, R5, #6
0x2EB8	0x1D2A    ADDS	R2, R5, #4
0x2EBA	0xF9B23000  LDRSH	R3, [R2, #0]
0x2EBE	0x1DAA    ADDS	R2, R5, #6
0x2EC0	0xF9B22000  LDRSH	R2, [R2, #0]
0x2EC4	0x4372    MULS	R2, R6, R2
0x2EC6	0xB212    SXTH	R2, R2
; step end address is: 24 (R6)
0x2EC8	0x189A    ADDS	R2, R3, R2
0x2ECA	0x8022    STRH	R2, [R4, #0]
;__irgrid2_driver.c, 389 :: 		KsToScale = 15;
; KsToScale start address is: 12 (R3)
0x2ECC	0x230F    MOVS	R3, #15
0x2ECE	0xB21B    SXTH	R3, R3
;__irgrid2_driver.c, 390 :: 		KsToScale = 1 << KsToScale;
0x2ED0	0x2201    MOVS	R2, #1
0x2ED2	0xB212    SXTH	R2, R2
0x2ED4	0x409A    LSLS	R2, R3
; KsToScale end address is: 12 (R3)
; KsToScale start address is: 16 (R4)
0x2ED6	0xB214    SXTH	R4, R2
;__irgrid2_driver.c, 392 :: 		mlx90640->ksTo[0] = eeData[61] & 0x00FF;
0x2ED8	0xF201032C  ADDW	R3, R1, #44
0x2EDC	0xF200027A  ADDW	R2, R0, #122
0x2EE0	0x8812    LDRH	R2, [R2, #0]
0x2EE2	0xF00202FF  AND	R2, R2, #255
0x2EE6	0xB292    UXTH	R2, R2
0x2EE8	0xEE002A10  VMOV	S0, R2
0x2EEC	0xEEB80A40  VCVT.F32.U32	S0, S0
0x2EF0	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 393 :: 		mlx90640->ksTo[1] = (eeData[61] & 0xFF00) >> 8;
0x2EF4	0xF201022C  ADDW	R2, R1, #44
0x2EF8	0x1D13    ADDS	R3, R2, #4
0x2EFA	0xF200027A  ADDW	R2, R0, #122
0x2EFE	0x8812    LDRH	R2, [R2, #0]
0x2F00	0xF402427F  AND	R2, R2, #65280
0x2F04	0xB292    UXTH	R2, R2
0x2F06	0x0A12    LSRS	R2, R2, #8
0x2F08	0xB292    UXTH	R2, R2
0x2F0A	0xEE002A10  VMOV	S0, R2
0x2F0E	0xEEB80A40  VCVT.F32.U32	S0, S0
0x2F12	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 394 :: 		mlx90640->ksTo[2] = eeData[62] & 0x00FF;
0x2F16	0xF201022C  ADDW	R2, R1, #44
0x2F1A	0xF2020308  ADDW	R3, R2, #8
0x2F1E	0xF200027C  ADDW	R2, R0, #124
0x2F22	0x8812    LDRH	R2, [R2, #0]
0x2F24	0xF00202FF  AND	R2, R2, #255
0x2F28	0xB292    UXTH	R2, R2
0x2F2A	0xEE002A10  VMOV	S0, R2
0x2F2E	0xEEB80A40  VCVT.F32.U32	S0, S0
0x2F32	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 395 :: 		mlx90640->ksTo[3] = (eeData[62] & 0xFF00) >> 8;
0x2F36	0xF201022C  ADDW	R2, R1, #44
0x2F3A	0xF202030C  ADDW	R3, R2, #12
0x2F3E	0xF200027C  ADDW	R2, R0, #124
; eeData end address is: 0 (R0)
0x2F42	0x8812    LDRH	R2, [R2, #0]
0x2F44	0xF402427F  AND	R2, R2, #65280
0x2F48	0xB292    UXTH	R2, R2
0x2F4A	0x0A12    LSRS	R2, R2, #8
0x2F4C	0xB292    UXTH	R2, R2
0x2F4E	0xEE002A10  VMOV	S0, R2
0x2F52	0xEEB80A40  VCVT.F32.U32	S0, S0
0x2F56	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 398 :: 		for( i = 0; i < 4; i++)
; i start address is: 20 (R5)
0x2F5A	0x2500    MOVS	R5, #0
0x2F5C	0xB22D    SXTH	R5, R5
; KsToScale end address is: 16 (R4)
; i end address is: 20 (R5)
0x2F5E	0xB220    SXTH	R0, R4
L___irgrid2_driver_ExtractKsToParameters32:
; i start address is: 20 (R5)
; KsToScale start address is: 0 (R0)
; KsToScale start address is: 0 (R0)
; KsToScale end address is: 0 (R0)
; mlx90640 start address is: 4 (R1)
; mlx90640 end address is: 4 (R1)
0x2F60	0x2D04    CMP	R5, #4
0x2F62	0xDA2C    BGE	L___irgrid2_driver_ExtractKsToParameters33
; KsToScale end address is: 0 (R0)
; mlx90640 end address is: 4 (R1)
;__irgrid2_driver.c, 400 :: 		if(mlx90640->ksTo[i] > 127)
; mlx90640 start address is: 4 (R1)
; KsToScale start address is: 0 (R0)
0x2F64	0xF201032C  ADDW	R3, R1, #44
0x2F68	0x00AA    LSLS	R2, R5, #2
0x2F6A	0x189A    ADDS	R2, R3, R2
0x2F6C	0xED520A00  VLDR.32	S1, [R2, #0]
0x2F70	0x4A13    LDR	R2, [PC, #76]
0x2F72	0xEE002A10  VMOV	S0, R2
0x2F76	0xEEF40AC0  VCMPE.F32	S1, S0
0x2F7A	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x2F7E	0xDD0D    BLE	L___irgrid2_driver_ExtractKsToParameters35
;__irgrid2_driver.c, 402 :: 		mlx90640->ksTo[i] = mlx90640->ksTo[i] -256;
0x2F80	0xF201032C  ADDW	R3, R1, #44
0x2F84	0x00AA    LSLS	R2, R5, #2
0x2F86	0x189C    ADDS	R4, R3, R2
0x2F88	0xED540A00  VLDR.32	S1, [R4, #0]
0x2F8C	0xF04F4287  MOV	R2, #1132462080
0x2F90	0xEE002A10  VMOV	S0, R2
0x2F94	0xEE300AC0  VSUB.F32	S0, S1, S0
0x2F98	0xED040A00  VSTR.32	S0, [R4, #0]
;__irgrid2_driver.c, 403 :: 		}
L___irgrid2_driver_ExtractKsToParameters35:
;__irgrid2_driver.c, 404 :: 		mlx90640->ksTo[i] = mlx90640->ksTo[i] / KsToScale;
0x2F9C	0xF201032C  ADDW	R3, R1, #44
0x2FA0	0x00AA    LSLS	R2, R5, #2
0x2FA2	0x189B    ADDS	R3, R3, R2
0x2FA4	0xED530A00  VLDR.32	S1, [R3, #0]
0x2FA8	0xEE000A10  VMOV	S0, R0
0x2FAC	0xEEB80AC0  VCVT.F32.S32	S0, S0
0x2FB0	0xEE800A80  VDIV.F32	S0, S1, S0
0x2FB4	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 398 :: 		for( i = 0; i < 4; i++)
0x2FB8	0x1C6D    ADDS	R5, R5, #1
0x2FBA	0xB22D    SXTH	R5, R5
;__irgrid2_driver.c, 405 :: 		}
; KsToScale end address is: 0 (R0)
; mlx90640 end address is: 4 (R1)
; i end address is: 20 (R5)
0x2FBC	0xE7D0    B	L___irgrid2_driver_ExtractKsToParameters32
L___irgrid2_driver_ExtractKsToParameters33:
;__irgrid2_driver.c, 406 :: 		}
L_end_ExtractKsToParameters:
0x2FBE	0x4770    BX	LR
0x2FC0	0x000042FE  	#1123942400
; end of __irgrid2_driver_ExtractKsToParameters
__irgrid2_driver_ExtractAlphaParameters:
;__irgrid2_driver.c, 408 :: 		static void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
0x2AB8	0xB0A7    SUB	SP, SP, #156
0x2ABA	0xF8CDE000  STR	LR, [SP, #0]
0x2ABE	0x901E    STR	R0, [SP, #120]
0x2AC0	0x911F    STR	R1, [SP, #124]
;__irgrid2_driver.c, 412 :: 		int p = 0;
;__irgrid2_driver.c, 423 :: 		accRemScale = eeData[32] & 0x000F;
0x2AC2	0x9A1E    LDR	R2, [SP, #120]
0x2AC4	0x3240    ADDS	R2, #64
0x2AC6	0x8812    LDRH	R2, [R2, #0]
0x2AC8	0xF002020F  AND	R2, R2, #15
; accRemScale start address is: 28 (R7)
0x2ACC	0xB2D7    UXTB	R7, R2
;__irgrid2_driver.c, 424 :: 		accColumnScale = (eeData[32] & 0x00F0) >> 4;
0x2ACE	0x9A1E    LDR	R2, [SP, #120]
0x2AD0	0x3240    ADDS	R2, #64
0x2AD2	0x8812    LDRH	R2, [R2, #0]
0x2AD4	0xF00202F0  AND	R2, R2, #240
0x2AD8	0xB292    UXTH	R2, R2
0x2ADA	0x0912    LSRS	R2, R2, #4
0x2ADC	0xF88D2075  STRB	R2, [SP, #117]
;__irgrid2_driver.c, 425 :: 		accRowScale = (eeData[32] & 0x0F00) >> 8;
0x2AE0	0x9A1E    LDR	R2, [SP, #120]
0x2AE2	0x3240    ADDS	R2, #64
0x2AE4	0x8812    LDRH	R2, [R2, #0]
0x2AE6	0xF4026270  AND	R2, R2, #3840
0x2AEA	0xB292    UXTH	R2, R2
0x2AEC	0x0A12    LSRS	R2, R2, #8
0x2AEE	0xF88D2074  STRB	R2, [SP, #116]
;__irgrid2_driver.c, 426 :: 		alphaScale = ((eeData[32] & 0xF000) >> 12) + 30;
0x2AF2	0x9A1E    LDR	R2, [SP, #120]
0x2AF4	0x3240    ADDS	R2, #64
0x2AF6	0x8812    LDRH	R2, [R2, #0]
0x2AF8	0xF4024270  AND	R2, R2, #61440
0x2AFC	0xB292    UXTH	R2, R2
0x2AFE	0x0B12    LSRS	R2, R2, #12
0x2B00	0xB292    UXTH	R2, R2
0x2B02	0x321E    ADDS	R2, #30
; alphaScale start address is: 4 (R1)
0x2B04	0xB2D1    UXTB	R1, R2
;__irgrid2_driver.c, 427 :: 		alphaRef = eeData[33];
0x2B06	0x9A1E    LDR	R2, [SP, #120]
0x2B08	0x3242    ADDS	R2, #66
0x2B0A	0x8810    LDRH	R0, [R2, #0]
; alphaRef start address is: 0 (R0)
;__irgrid2_driver.c, 429 :: 		for(i = 0; i < 6; i++)
; i start address is: 36 (R9)
0x2B0C	0xF2400900  MOVW	R9, #0
0x2B10	0xFA0FF989  SXTH	R9, R9
; i end address is: 36 (R9)
; accRemScale end address is: 28 (R7)
; alphaRef end address is: 0 (R0)
; alphaScale end address is: 4 (R1)
0x2B14	0xFA0FF689  SXTH	R6, R9
L___irgrid2_driver_ExtractAlphaParameters36:
; i start address is: 24 (R6)
; alphaRef start address is: 0 (R0)
; alphaScale start address is: 4 (R1)
; accRemScale start address is: 28 (R7)
0x2B18	0x2E06    CMP	R6, #6
0x2B1A	0xDA4A    BGE	L___irgrid2_driver_ExtractAlphaParameters37
;__irgrid2_driver.c, 431 :: 		p = i * 4;
0x2B1C	0x00B2    LSLS	R2, R6, #2
0x2B1E	0xB212    SXTH	R2, R2
0x2B20	0xF8AD2080  STRH	R2, [SP, #128]
;__irgrid2_driver.c, 432 :: 		accRow[p + 0] = (eeData[34 + i] & 0x000F);
0x2B24	0xAD01    ADD	R5, SP, #4
0x2B26	0x0052    LSLS	R2, R2, #1
0x2B28	0x18AC    ADDS	R4, R5, R2
0x2B2A	0xF2060222  ADDW	R2, R6, #34
0x2B2E	0xB212    SXTH	R2, R2
0x2B30	0x0053    LSLS	R3, R2, #1
0x2B32	0x9A1E    LDR	R2, [SP, #120]
0x2B34	0x18D2    ADDS	R2, R2, R3
0x2B36	0x8812    LDRH	R2, [R2, #0]
0x2B38	0xF002020F  AND	R2, R2, #15
0x2B3C	0x8022    STRH	R2, [R4, #0]
;__irgrid2_driver.c, 433 :: 		accRow[p + 1] = (eeData[34 + i] & 0x00F0) >> 4;
0x2B3E	0xF9BD2080  LDRSH	R2, [SP, #128]
0x2B42	0x1C52    ADDS	R2, R2, #1
0x2B44	0xB212    SXTH	R2, R2
0x2B46	0x0052    LSLS	R2, R2, #1
0x2B48	0x18AC    ADDS	R4, R5, R2
0x2B4A	0xF2060222  ADDW	R2, R6, #34
0x2B4E	0xB212    SXTH	R2, R2
0x2B50	0x0053    LSLS	R3, R2, #1
0x2B52	0x9A1E    LDR	R2, [SP, #120]
0x2B54	0x18D2    ADDS	R2, R2, R3
0x2B56	0x8812    LDRH	R2, [R2, #0]
0x2B58	0xF00202F0  AND	R2, R2, #240
0x2B5C	0xB292    UXTH	R2, R2
0x2B5E	0x0912    LSRS	R2, R2, #4
0x2B60	0x8022    STRH	R2, [R4, #0]
;__irgrid2_driver.c, 434 :: 		accRow[p + 2] = (eeData[34 + i] & 0x0F00) >> 8;
0x2B62	0xF9BD2080  LDRSH	R2, [SP, #128]
0x2B66	0x1C92    ADDS	R2, R2, #2
0x2B68	0xB212    SXTH	R2, R2
0x2B6A	0x0052    LSLS	R2, R2, #1
0x2B6C	0x18AC    ADDS	R4, R5, R2
0x2B6E	0xF2060222  ADDW	R2, R6, #34
0x2B72	0xB212    SXTH	R2, R2
0x2B74	0x0053    LSLS	R3, R2, #1
0x2B76	0x9A1E    LDR	R2, [SP, #120]
0x2B78	0x18D2    ADDS	R2, R2, R3
0x2B7A	0x8812    LDRH	R2, [R2, #0]
0x2B7C	0xF4026270  AND	R2, R2, #3840
0x2B80	0xB292    UXTH	R2, R2
0x2B82	0x0A12    LSRS	R2, R2, #8
0x2B84	0x8022    STRH	R2, [R4, #0]
;__irgrid2_driver.c, 435 :: 		accRow[p + 3] = (eeData[34 + i] & 0xF000) >> 12;
0x2B86	0xF9BD2080  LDRSH	R2, [SP, #128]
0x2B8A	0x1CD2    ADDS	R2, R2, #3
0x2B8C	0xB212    SXTH	R2, R2
0x2B8E	0x0052    LSLS	R2, R2, #1
0x2B90	0x18AC    ADDS	R4, R5, R2
0x2B92	0xF2060222  ADDW	R2, R6, #34
0x2B96	0xB212    SXTH	R2, R2
0x2B98	0x0053    LSLS	R3, R2, #1
0x2B9A	0x9A1E    LDR	R2, [SP, #120]
0x2B9C	0x18D2    ADDS	R2, R2, R3
0x2B9E	0x8812    LDRH	R2, [R2, #0]
0x2BA0	0xF4024270  AND	R2, R2, #61440
0x2BA4	0xB292    UXTH	R2, R2
0x2BA6	0x0B12    LSRS	R2, R2, #12
0x2BA8	0x8022    STRH	R2, [R4, #0]
;__irgrid2_driver.c, 429 :: 		for(i = 0; i < 6; i++)
0x2BAA	0x1C72    ADDS	R2, R6, #1
0x2BAC	0xB212    SXTH	R2, R2
; i end address is: 24 (R6)
; i start address is: 8 (R2)
;__irgrid2_driver.c, 436 :: 		}
; i end address is: 8 (R2)
0x2BAE	0xB216    SXTH	R6, R2
0x2BB0	0xE7B2    B	L___irgrid2_driver_ExtractAlphaParameters36
L___irgrid2_driver_ExtractAlphaParameters37:
;__irgrid2_driver.c, 438 :: 		for( i = 0; i < 24; i++)
; i start address is: 16 (R4)
0x2BB2	0x2400    MOVS	R4, #0
0x2BB4	0xB224    SXTH	R4, R4
; accRemScale end address is: 28 (R7)
; i end address is: 16 (R4)
; alphaRef end address is: 0 (R0)
; alphaScale end address is: 4 (R1)
0x2BB6	0xB2CD    UXTB	R5, R1
0x2BB8	0xFA5FF887  UXTB	R8, R7
L___irgrid2_driver_ExtractAlphaParameters39:
; i start address is: 16 (R4)
; accRemScale start address is: 32 (R8)
; alphaScale start address is: 20 (R5)
; alphaRef start address is: 0 (R0)
0x2BBC	0x2C18    CMP	R4, #24
0x2BBE	0xDA11    BGE	L___irgrid2_driver_ExtractAlphaParameters40
;__irgrid2_driver.c, 440 :: 		if (accRow[i] > 7)
0x2BC0	0xAB01    ADD	R3, SP, #4
0x2BC2	0x0062    LSLS	R2, R4, #1
0x2BC4	0x189A    ADDS	R2, R3, R2
0x2BC6	0xF9B22000  LDRSH	R2, [R2, #0]
0x2BCA	0x2A07    CMP	R2, #7
0x2BCC	0xDD06    BLE	L___irgrid2_driver_ExtractAlphaParameters42
;__irgrid2_driver.c, 442 :: 		accRow[i] = accRow[i] - 16;
0x2BCE	0xAB01    ADD	R3, SP, #4
0x2BD0	0x0062    LSLS	R2, R4, #1
0x2BD2	0x189B    ADDS	R3, R3, R2
0x2BD4	0xF9B32000  LDRSH	R2, [R3, #0]
0x2BD8	0x3A10    SUBS	R2, #16
0x2BDA	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 443 :: 		}
L___irgrid2_driver_ExtractAlphaParameters42:
;__irgrid2_driver.c, 438 :: 		for( i = 0; i < 24; i++)
0x2BDC	0x1C62    ADDS	R2, R4, #1
0x2BDE	0xB212    SXTH	R2, R2
; i end address is: 16 (R4)
; i start address is: 8 (R2)
;__irgrid2_driver.c, 444 :: 		}
; i end address is: 8 (R2)
0x2BE0	0xB214    SXTH	R4, R2
0x2BE2	0xE7EB    B	L___irgrid2_driver_ExtractAlphaParameters39
L___irgrid2_driver_ExtractAlphaParameters40:
;__irgrid2_driver.c, 446 :: 		for( i = 0; i < 8; i++)
; i start address is: 40 (R10)
0x2BE4	0xF2400A00  MOVW	R10, #0
0x2BE8	0xFA0FFA8A  SXTH	R10, R10
; i end address is: 40 (R10)
; alphaRef end address is: 0 (R0)
; alphaScale end address is: 20 (R5)
; accRemScale end address is: 32 (R8)
0x2BEC	0xB2E9    UXTB	R1, R5
0x2BEE	0xFA0FF68A  SXTH	R6, R10
L___irgrid2_driver_ExtractAlphaParameters43:
; i start address is: 24 (R6)
; alphaRef start address is: 0 (R0)
; alphaScale start address is: 4 (R1)
; accRemScale start address is: 32 (R8)
0x2BF2	0x2E08    CMP	R6, #8
0x2BF4	0xDA4A    BGE	L___irgrid2_driver_ExtractAlphaParameters44
;__irgrid2_driver.c, 448 :: 		p = i * 4;
0x2BF6	0x00B2    LSLS	R2, R6, #2
0x2BF8	0xB212    SXTH	R2, R2
0x2BFA	0xF8AD2080  STRH	R2, [SP, #128]
;__irgrid2_driver.c, 449 :: 		accColumn[p + 0] = (eeData[40 + i] & 0x000F);
0x2BFE	0xAD0D    ADD	R5, SP, #52
0x2C00	0x0052    LSLS	R2, R2, #1
0x2C02	0x18AC    ADDS	R4, R5, R2
0x2C04	0xF2060228  ADDW	R2, R6, #40
0x2C08	0xB212    SXTH	R2, R2
0x2C0A	0x0053    LSLS	R3, R2, #1
0x2C0C	0x9A1E    LDR	R2, [SP, #120]
0x2C0E	0x18D2    ADDS	R2, R2, R3
0x2C10	0x8812    LDRH	R2, [R2, #0]
0x2C12	0xF002020F  AND	R2, R2, #15
0x2C16	0x8022    STRH	R2, [R4, #0]
;__irgrid2_driver.c, 450 :: 		accColumn[p + 1] = (eeData[40 + i] & 0x00F0) >> 4;
0x2C18	0xF9BD2080  LDRSH	R2, [SP, #128]
0x2C1C	0x1C52    ADDS	R2, R2, #1
0x2C1E	0xB212    SXTH	R2, R2
0x2C20	0x0052    LSLS	R2, R2, #1
0x2C22	0x18AC    ADDS	R4, R5, R2
0x2C24	0xF2060228  ADDW	R2, R6, #40
0x2C28	0xB212    SXTH	R2, R2
0x2C2A	0x0053    LSLS	R3, R2, #1
0x2C2C	0x9A1E    LDR	R2, [SP, #120]
0x2C2E	0x18D2    ADDS	R2, R2, R3
0x2C30	0x8812    LDRH	R2, [R2, #0]
0x2C32	0xF00202F0  AND	R2, R2, #240
0x2C36	0xB292    UXTH	R2, R2
0x2C38	0x0912    LSRS	R2, R2, #4
0x2C3A	0x8022    STRH	R2, [R4, #0]
;__irgrid2_driver.c, 451 :: 		accColumn[p + 2] = (eeData[40 + i] & 0x0F00) >> 8;
0x2C3C	0xF9BD2080  LDRSH	R2, [SP, #128]
0x2C40	0x1C92    ADDS	R2, R2, #2
0x2C42	0xB212    SXTH	R2, R2
0x2C44	0x0052    LSLS	R2, R2, #1
0x2C46	0x18AC    ADDS	R4, R5, R2
0x2C48	0xF2060228  ADDW	R2, R6, #40
0x2C4C	0xB212    SXTH	R2, R2
0x2C4E	0x0053    LSLS	R3, R2, #1
0x2C50	0x9A1E    LDR	R2, [SP, #120]
0x2C52	0x18D2    ADDS	R2, R2, R3
0x2C54	0x8812    LDRH	R2, [R2, #0]
0x2C56	0xF4026270  AND	R2, R2, #3840
0x2C5A	0xB292    UXTH	R2, R2
0x2C5C	0x0A12    LSRS	R2, R2, #8
0x2C5E	0x8022    STRH	R2, [R4, #0]
;__irgrid2_driver.c, 452 :: 		accColumn[p + 3] = (eeData[40 + i] & 0xF000) >> 12;
0x2C60	0xF9BD2080  LDRSH	R2, [SP, #128]
0x2C64	0x1CD2    ADDS	R2, R2, #3
0x2C66	0xB212    SXTH	R2, R2
0x2C68	0x0052    LSLS	R2, R2, #1
0x2C6A	0x18AC    ADDS	R4, R5, R2
0x2C6C	0xF2060228  ADDW	R2, R6, #40
0x2C70	0xB212    SXTH	R2, R2
0x2C72	0x0053    LSLS	R3, R2, #1
0x2C74	0x9A1E    LDR	R2, [SP, #120]
0x2C76	0x18D2    ADDS	R2, R2, R3
0x2C78	0x8812    LDRH	R2, [R2, #0]
0x2C7A	0xF4024270  AND	R2, R2, #61440
0x2C7E	0xB292    UXTH	R2, R2
0x2C80	0x0B12    LSRS	R2, R2, #12
0x2C82	0x8022    STRH	R2, [R4, #0]
;__irgrid2_driver.c, 446 :: 		for( i = 0; i < 8; i++)
0x2C84	0x1C72    ADDS	R2, R6, #1
0x2C86	0xB212    SXTH	R2, R2
; i end address is: 24 (R6)
; i start address is: 8 (R2)
;__irgrid2_driver.c, 453 :: 		}
; i end address is: 8 (R2)
0x2C88	0xB216    SXTH	R6, R2
0x2C8A	0xE7B2    B	L___irgrid2_driver_ExtractAlphaParameters43
L___irgrid2_driver_ExtractAlphaParameters44:
;__irgrid2_driver.c, 455 :: 		for( i = 0; i < 32; i ++)
; i start address is: 44 (R11)
0x2C8C	0xF2400B00  MOVW	R11, #0
0x2C90	0xFA0FFB8B  SXTH	R11, R11
; alphaRef end address is: 0 (R0)
; alphaScale end address is: 4 (R1)
; i end address is: 44 (R11)
; accRemScale end address is: 32 (R8)
0x2C94	0xFA0FFC80  SXTH	R12, R0
0x2C98	0xB2CD    UXTB	R5, R1
0x2C9A	0xFA5FF488  UXTB	R4, R8
0x2C9E	0xFA0FF68B  SXTH	R6, R11
L___irgrid2_driver_ExtractAlphaParameters46:
; i start address is: 24 (R6)
; accRemScale start address is: 16 (R4)
; alphaScale start address is: 20 (R5)
; alphaRef start address is: 48 (R12)
0x2CA2	0x2E20    CMP	R6, #32
0x2CA4	0xDA10    BGE	L___irgrid2_driver_ExtractAlphaParameters47
;__irgrid2_driver.c, 457 :: 		if (accColumn[i] > 7)
0x2CA6	0xAB0D    ADD	R3, SP, #52
0x2CA8	0x0072    LSLS	R2, R6, #1
0x2CAA	0x189A    ADDS	R2, R3, R2
0x2CAC	0xF9B22000  LDRSH	R2, [R2, #0]
0x2CB0	0x2A07    CMP	R2, #7
0x2CB2	0xDD06    BLE	L___irgrid2_driver_ExtractAlphaParameters49
;__irgrid2_driver.c, 459 :: 		accColumn[i] = accColumn[i] - 16;
0x2CB4	0xAB0D    ADD	R3, SP, #52
0x2CB6	0x0072    LSLS	R2, R6, #1
0x2CB8	0x189B    ADDS	R3, R3, R2
0x2CBA	0xF9B32000  LDRSH	R2, [R3, #0]
0x2CBE	0x3A10    SUBS	R2, #16
0x2CC0	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 460 :: 		}
L___irgrid2_driver_ExtractAlphaParameters49:
;__irgrid2_driver.c, 455 :: 		for( i = 0; i < 32; i ++)
0x2CC2	0x1C72    ADDS	R2, R6, #1
; i end address is: 24 (R6)
; i start address is: 8 (R2)
;__irgrid2_driver.c, 461 :: 		}
; i end address is: 8 (R2)
0x2CC4	0xB216    SXTH	R6, R2
0x2CC6	0xE7EC    B	L___irgrid2_driver_ExtractAlphaParameters46
L___irgrid2_driver_ExtractAlphaParameters47:
;__irgrid2_driver.c, 463 :: 		for( i = 0; i < 24; i++)
; i start address is: 0 (R0)
0x2CC8	0x2000    MOVS	R0, #0
0x2CCA	0xB200    SXTH	R0, R0
; alphaScale end address is: 20 (R5)
; accRemScale end address is: 16 (R4)
; alphaRef end address is: 48 (R12)
; i end address is: 0 (R0)
0x2CCC	0xB2EB    UXTB	R3, R5
0x2CCE	0xFA0FF18C  SXTH	R1, R12
L___irgrid2_driver_ExtractAlphaParameters50:
; i start address is: 0 (R0)
; alphaRef start address is: 4 (R1)
; alphaScale start address is: 12 (R3)
; accRemScale start address is: 16 (R4)
0x2CD2	0x2818    CMP	R0, #24
0x2CD4	0xF28080B3  BGE	L___irgrid2_driver_ExtractAlphaParameters51
;__irgrid2_driver.c, 465 :: 		for( j = 0; j < 32; j ++)
; j start address is: 24 (R6)
0x2CD8	0x2600    MOVS	R6, #0
0x2CDA	0xB236    SXTH	R6, R6
; alphaRef end address is: 4 (R1)
; alphaScale end address is: 12 (R3)
; accRemScale end address is: 16 (R4)
; j end address is: 24 (R6)
; i end address is: 0 (R0)
0x2CDC	0xB207    SXTH	R7, R0
0x2CDE	0xFA0FFC81  SXTH	R12, R1
0x2CE2	0xFA5FFB83  UXTB	R11, R3
0x2CE6	0xFA5FF884  UXTB	R8, R4
L___irgrid2_driver_ExtractAlphaParameters53:
; j start address is: 24 (R6)
; accRemScale start address is: 32 (R8)
; alphaScale start address is: 44 (R11)
; alphaRef start address is: 48 (R12)
; i start address is: 28 (R7)
0x2CEA	0x2E20    CMP	R6, #32
0x2CEC	0xF280809E  BGE	L___irgrid2_driver_ExtractAlphaParameters54
;__irgrid2_driver.c, 467 :: 		p = 32 * i +j;
0x2CF0	0x017A    LSLS	R2, R7, #5
0x2CF2	0xB212    SXTH	R2, R2
0x2CF4	0x1995    ADDS	R5, R2, R6
0x2CF6	0xB22D    SXTH	R5, R5
0x2CF8	0xF8AD5080  STRH	R5, [SP, #128]
;__irgrid2_driver.c, 468 :: 		mlx90640->alpha[p] = (eeData[64 + p] & 0x03F0) >> 4;
0x2CFC	0x9A1F    LDR	R2, [SP, #124]
0x2CFE	0xF2020344  ADDW	R3, R2, #68
0x2D02	0x00AA    LSLS	R2, R5, #2
0x2D04	0x189C    ADDS	R4, R3, R2
0x2D06	0xF2050240  ADDW	R2, R5, #64
0x2D0A	0xB212    SXTH	R2, R2
0x2D0C	0x0053    LSLS	R3, R2, #1
0x2D0E	0x9A1E    LDR	R2, [SP, #120]
0x2D10	0x18D2    ADDS	R2, R2, R3
0x2D12	0x8812    LDRH	R2, [R2, #0]
0x2D14	0xF402727C  AND	R2, R2, #1008
0x2D18	0xB292    UXTH	R2, R2
0x2D1A	0x0912    LSRS	R2, R2, #4
0x2D1C	0xB292    UXTH	R2, R2
0x2D1E	0xEE002A10  VMOV	S0, R2
0x2D22	0xEEB80A40  VCVT.F32.U32	S0, S0
0x2D26	0xED040A00  VSTR.32	S0, [R4, #0]
;__irgrid2_driver.c, 469 :: 		if (mlx90640->alpha[p] > 31)
0x2D2A	0x9A1F    LDR	R2, [SP, #124]
0x2D2C	0xF2020344  ADDW	R3, R2, #68
0x2D30	0xF9BD2080  LDRSH	R2, [SP, #128]
0x2D34	0x0092    LSLS	R2, R2, #2
0x2D36	0x189A    ADDS	R2, R3, R2
0x2D38	0xED520A00  VLDR.32	S1, [R2, #0]
0x2D3C	0xEEB30A0F  VMOV.F32	S0, #31
0x2D40	0xEEF40AC0  VCMPE.F32	S1, S0
0x2D44	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x2D48	0xDD10    BLE	L___irgrid2_driver_ExtractAlphaParameters56
;__irgrid2_driver.c, 471 :: 		mlx90640->alpha[p] = mlx90640->alpha[p] - 64;
0x2D4A	0x9A1F    LDR	R2, [SP, #124]
0x2D4C	0xF2020344  ADDW	R3, R2, #68
0x2D50	0xF9BD2080  LDRSH	R2, [SP, #128]
0x2D54	0x0092    LSLS	R2, R2, #2
0x2D56	0x189C    ADDS	R4, R3, R2
0x2D58	0xED540A00  VLDR.32	S1, [R4, #0]
0x2D5C	0xF04F4285  MOV	R2, #1115684864
0x2D60	0xEE002A10  VMOV	S0, R2
0x2D64	0xEE300AC0  VSUB.F32	S0, S1, S0
0x2D68	0xED040A00  VSTR.32	S0, [R4, #0]
;__irgrid2_driver.c, 472 :: 		}
L___irgrid2_driver_ExtractAlphaParameters56:
;__irgrid2_driver.c, 473 :: 		mlx90640->alpha[p] = mlx90640->alpha[p]*(1 << accRemScale);
0x2D6C	0x9A1F    LDR	R2, [SP, #124]
0x2D6E	0xF2020344  ADDW	R3, R2, #68
0x2D72	0xF9BD2080  LDRSH	R2, [SP, #128]
0x2D76	0x0092    LSLS	R2, R2, #2
0x2D78	0x189C    ADDS	R4, R3, R2
0x2D7A	0xED540A00  VLDR.32	S1, [R4, #0]
0x2D7E	0x2201    MOVS	R2, #1
0x2D80	0xB212    SXTH	R2, R2
0x2D82	0xFA02F208  LSL	R2, R2, R8
0x2D86	0xB212    SXTH	R2, R2
0x2D88	0xEE002A10  VMOV	S0, R2
0x2D8C	0xEEB80AC0  VCVT.F32.S32	S0, S0
0x2D90	0xEE200A80  VMUL.F32	S0, S1, S0
0x2D94	0xED040A00  VSTR.32	S0, [R4, #0]
;__irgrid2_driver.c, 474 :: 		mlx90640->alpha[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + mlx90640->alpha[p]);
0x2D98	0x9A1F    LDR	R2, [SP, #124]
0x2D9A	0xF2020344  ADDW	R3, R2, #68
0x2D9E	0xF9BD2080  LDRSH	R2, [SP, #128]
0x2DA2	0x0092    LSLS	R2, R2, #2
0x2DA4	0x189D    ADDS	R5, R3, R2
0x2DA6	0xAB01    ADD	R3, SP, #4
0x2DA8	0x007A    LSLS	R2, R7, #1
0x2DAA	0x189A    ADDS	R2, R3, R2
0x2DAC	0xF9B23000  LDRSH	R3, [R2, #0]
0x2DB0	0xF89D2074  LDRB	R2, [SP, #116]
0x2DB4	0xFA03F202  LSL	R2, R3, R2
0x2DB8	0xB212    SXTH	R2, R2
0x2DBA	0xEB0C0402  ADD	R4, R12, R2, LSL #0
0x2DBE	0xB224    SXTH	R4, R4
0x2DC0	0xAB0D    ADD	R3, SP, #52
0x2DC2	0x0072    LSLS	R2, R6, #1
0x2DC4	0x189A    ADDS	R2, R3, R2
0x2DC6	0xF9B23000  LDRSH	R3, [R2, #0]
0x2DCA	0xF89D2075  LDRB	R2, [SP, #117]
0x2DCE	0xFA03F202  LSL	R2, R3, R2
0x2DD2	0xB212    SXTH	R2, R2
0x2DD4	0x18A2    ADDS	R2, R4, R2
0x2DD6	0xB212    SXTH	R2, R2
0x2DD8	0xEE002A90  VMOV	S1, R2
0x2DDC	0xEEF80AE0  VCVT.F32.S32	S1, S1
0x2DE0	0xED150A00  VLDR.32	S0, [R5, #0]
0x2DE4	0xEE300A80  VADD.F32	S0, S1, S0
0x2DE8	0xED050A00  VSTR.32	S0, [R5, #0]
;__irgrid2_driver.c, 475 :: 		mlx90640->alpha[p] = mlx90640->alpha[p] / _pow(2,(double)alphaScale);
0x2DEC	0x9A1F    LDR	R2, [SP, #124]
0x2DEE	0xF2020344  ADDW	R3, R2, #68
0x2DF2	0xF9BD2080  LDRSH	R2, [SP, #128]
0x2DF6	0x0092    LSLS	R2, R2, #2
0x2DF8	0x189A    ADDS	R2, R3, R2
0x2DFA	0x9226    STR	R2, [SP, #152]
0x2DFC	0xED120A00  VLDR.32	S0, [R2, #0]
0x2E00	0xED8D0A25  VSTR.32	S0, [SP, #148]
0x2E04	0xEE00BA10  VMOV	S0, R11
0x2E08	0xEEB80A40  VCVT.F32.U32	S0, S0
0x2E0C	0xEEF00A40  VMOV.F32	S1, S0
0x2E10	0xEEB00A00  VMOV.F32	S0, #2
0x2E14	0xF7FEFD12  BL	__irgrid2_driver__pow+0
0x2E18	0xEDDD0A25  VLDR.32	S1, [SP, #148]
0x2E1C	0xEE800A80  VDIV.F32	S0, S1, S0
0x2E20	0x9A26    LDR	R2, [SP, #152]
0x2E22	0xED020A00  VSTR.32	S0, [R2, #0]
;__irgrid2_driver.c, 465 :: 		for( j = 0; j < 32; j ++)
0x2E26	0x1C72    ADDS	R2, R6, #1
; j end address is: 24 (R6)
; j start address is: 8 (R2)
;__irgrid2_driver.c, 476 :: 		}
; j end address is: 8 (R2)
0x2E28	0xB216    SXTH	R6, R2
0x2E2A	0xE75E    B	L___irgrid2_driver_ExtractAlphaParameters53
L___irgrid2_driver_ExtractAlphaParameters54:
;__irgrid2_driver.c, 463 :: 		for( i = 0; i < 24; i++)
0x2E2C	0x1C7A    ADDS	R2, R7, #1
; i end address is: 28 (R7)
; i start address is: 0 (R0)
0x2E2E	0xB210    SXTH	R0, R2
;__irgrid2_driver.c, 477 :: 		}
0x2E30	0xFA5FF488  UXTB	R4, R8
; accRemScale end address is: 32 (R8)
; alphaScale end address is: 44 (R11)
; alphaRef end address is: 48 (R12)
; i end address is: 0 (R0)
0x2E34	0xFA5FF38B  UXTB	R3, R11
0x2E38	0xFA0FF18C  SXTH	R1, R12
0x2E3C	0xE749    B	L___irgrid2_driver_ExtractAlphaParameters50
L___irgrid2_driver_ExtractAlphaParameters51:
;__irgrid2_driver.c, 478 :: 		}
L_end_ExtractAlphaParameters:
0x2E3E	0xF8DDE000  LDR	LR, [SP, #0]
0x2E42	0xB027    ADD	SP, SP, #156
0x2E44	0x4770    BX	LR
; end of __irgrid2_driver_ExtractAlphaParameters
__irgrid2_driver_ExtractOffsetParameters:
;__irgrid2_driver.c, 480 :: 		static void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
; mlx90640 start address is: 4 (R1)
; eeData start address is: 0 (R0)
0x2710	0xB09C    SUB	SP, SP, #112
; mlx90640 end address is: 4 (R1)
; eeData end address is: 0 (R0)
; eeData start address is: 0 (R0)
; mlx90640 start address is: 4 (R1)
;__irgrid2_driver.c, 484 :: 		int p = 0;
;__irgrid2_driver.c, 493 :: 		occRemScale = (eeData[16] & 0x000F);
0x2712	0xF2000220  ADDW	R2, R0, #32
0x2716	0x8812    LDRH	R2, [R2, #0]
0x2718	0xF002020F  AND	R2, R2, #15
; occRemScale start address is: 24 (R6)
0x271C	0xB2D6    UXTB	R6, R2
;__irgrid2_driver.c, 494 :: 		occColumnScale = (eeData[16] & 0x00F0) >> 4;
0x271E	0xF2000220  ADDW	R2, R0, #32
0x2722	0x8812    LDRH	R2, [R2, #0]
0x2724	0xF00202F0  AND	R2, R2, #240
0x2728	0xB292    UXTH	R2, R2
0x272A	0x0912    LSRS	R2, R2, #4
; occColumnScale start address is: 20 (R5)
0x272C	0xB2D5    UXTB	R5, R2
;__irgrid2_driver.c, 495 :: 		occRowScale = (eeData[16] & 0x0F00) >> 8;
0x272E	0xF2000220  ADDW	R2, R0, #32
0x2732	0x8812    LDRH	R2, [R2, #0]
0x2734	0xF4026270  AND	R2, R2, #3840
0x2738	0xB292    UXTH	R2, R2
0x273A	0x0A12    LSRS	R2, R2, #8
; occRowScale start address is: 16 (R4)
0x273C	0xB2D4    UXTB	R4, R2
;__irgrid2_driver.c, 496 :: 		offsetRef = eeData[17];
0x273E	0xF2000222  ADDW	R2, R0, #34
0x2742	0x8812    LDRH	R2, [R2, #0]
; offsetRef start address is: 28 (R7)
0x2744	0xB217    SXTH	R7, R2
;__irgrid2_driver.c, 497 :: 		if (offsetRef > 32767)
0x2746	0xB213    SXTH	R3, R2
0x2748	0xF64772FF  MOVW	R2, #32767
0x274C	0x4293    CMP	R3, R2
0x274E	0xDD04    BLE	L___irgrid2_driver_ExtractOffsetParameters215
;__irgrid2_driver.c, 499 :: 		offsetRef = offsetRef - 65536;
0x2750	0xF5A73280  SUB	R2, R7, #65536
; offsetRef end address is: 28 (R7)
; offsetRef start address is: 12 (R3)
0x2754	0xB213    SXTH	R3, R2
; offsetRef end address is: 12 (R3)
0x2756	0xB21A    SXTH	R2, R3
;__irgrid2_driver.c, 500 :: 		}
0x2758	0xE000    B	L___irgrid2_driver_ExtractOffsetParameters57
L___irgrid2_driver_ExtractOffsetParameters215:
;__irgrid2_driver.c, 497 :: 		if (offsetRef > 32767)
0x275A	0xB23A    SXTH	R2, R7
;__irgrid2_driver.c, 500 :: 		}
L___irgrid2_driver_ExtractOffsetParameters57:
;__irgrid2_driver.c, 502 :: 		for( i = 0; i < 6; i++)
; offsetRef start address is: 8 (R2)
; i start address is: 36 (R9)
0x275C	0xF2400900  MOVW	R9, #0
0x2760	0xFA0FF989  SXTH	R9, R9
; occRowScale end address is: 16 (R4)
; offsetRef end address is: 8 (R2)
; i end address is: 36 (R9)
; occColumnScale end address is: 20 (R5)
; eeData end address is: 0 (R0)
; mlx90640 end address is: 4 (R1)
; occRemScale end address is: 24 (R6)
0x2764	0x4680    MOV	R8, R0
0x2766	0xB210    SXTH	R0, R2
0x2768	0x460F    MOV	R7, R1
0x276A	0xB2E1    UXTB	R1, R4
L___irgrid2_driver_ExtractOffsetParameters58:
; i start address is: 36 (R9)
; offsetRef start address is: 0 (R0)
; occRowScale start address is: 4 (R1)
; occColumnScale start address is: 20 (R5)
; occRemScale start address is: 24 (R6)
; mlx90640 start address is: 28 (R7)
; eeData start address is: 32 (R8)
0x276C	0xF1B90F06  CMP	R9, #6
0x2770	0xDA49    BGE	L___irgrid2_driver_ExtractOffsetParameters59
;__irgrid2_driver.c, 504 :: 		p = i * 4;
0x2772	0xEA4F0289  LSL	R2, R9, #2
0x2776	0xB212    SXTH	R2, R2
; p start address is: 40 (R10)
0x2778	0xFA0FFA82  SXTH	R10, R2
;__irgrid2_driver.c, 505 :: 		occRow[p + 0] = (eeData[18 + i] & 0x000F);
0x277C	0xAC00    ADD	R4, SP, #0
0x277E	0x0052    LSLS	R2, R2, #1
0x2780	0x18A3    ADDS	R3, R4, R2
0x2782	0xF1090212  ADD	R2, R9, #18
0x2786	0xB212    SXTH	R2, R2
0x2788	0x0052    LSLS	R2, R2, #1
0x278A	0xEB080202  ADD	R2, R8, R2, LSL #0
0x278E	0x8812    LDRH	R2, [R2, #0]
0x2790	0xF002020F  AND	R2, R2, #15
0x2794	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 506 :: 		occRow[p + 1] = (eeData[18 + i] & 0x00F0) >> 4;
0x2796	0xF10A0201  ADD	R2, R10, #1
0x279A	0xB212    SXTH	R2, R2
0x279C	0x0052    LSLS	R2, R2, #1
0x279E	0x18A3    ADDS	R3, R4, R2
0x27A0	0xF1090212  ADD	R2, R9, #18
0x27A4	0xB212    SXTH	R2, R2
0x27A6	0x0052    LSLS	R2, R2, #1
0x27A8	0xEB080202  ADD	R2, R8, R2, LSL #0
0x27AC	0x8812    LDRH	R2, [R2, #0]
0x27AE	0xF00202F0  AND	R2, R2, #240
0x27B2	0xB292    UXTH	R2, R2
0x27B4	0x0912    LSRS	R2, R2, #4
0x27B6	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 507 :: 		occRow[p + 2] = (eeData[18 + i] & 0x0F00) >> 8;
0x27B8	0xF10A0202  ADD	R2, R10, #2
0x27BC	0xB212    SXTH	R2, R2
0x27BE	0x0052    LSLS	R2, R2, #1
0x27C0	0x18A3    ADDS	R3, R4, R2
0x27C2	0xF1090212  ADD	R2, R9, #18
0x27C6	0xB212    SXTH	R2, R2
0x27C8	0x0052    LSLS	R2, R2, #1
0x27CA	0xEB080202  ADD	R2, R8, R2, LSL #0
0x27CE	0x8812    LDRH	R2, [R2, #0]
0x27D0	0xF4026270  AND	R2, R2, #3840
0x27D4	0xB292    UXTH	R2, R2
0x27D6	0x0A12    LSRS	R2, R2, #8
0x27D8	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 508 :: 		occRow[p + 3] = (eeData[18 + i] & 0xF000) >> 12;
0x27DA	0xF10A0203  ADD	R2, R10, #3
0x27DE	0xB212    SXTH	R2, R2
; p end address is: 40 (R10)
0x27E0	0x0052    LSLS	R2, R2, #1
0x27E2	0x18A3    ADDS	R3, R4, R2
0x27E4	0xF1090212  ADD	R2, R9, #18
0x27E8	0xB212    SXTH	R2, R2
0x27EA	0x0052    LSLS	R2, R2, #1
0x27EC	0xEB080202  ADD	R2, R8, R2, LSL #0
0x27F0	0x8812    LDRH	R2, [R2, #0]
0x27F2	0xF4024270  AND	R2, R2, #61440
0x27F6	0xB292    UXTH	R2, R2
0x27F8	0x0B12    LSRS	R2, R2, #12
0x27FA	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 502 :: 		for( i = 0; i < 6; i++)
0x27FC	0xF1090901  ADD	R9, R9, #1
0x2800	0xFA0FF989  SXTH	R9, R9
;__irgrid2_driver.c, 509 :: 		}
; i end address is: 36 (R9)
0x2804	0xE7B2    B	L___irgrid2_driver_ExtractOffsetParameters58
L___irgrid2_driver_ExtractOffsetParameters59:
;__irgrid2_driver.c, 511 :: 		for( i = 0; i < 24; i++)
; i start address is: 16 (R4)
0x2806	0x2400    MOVS	R4, #0
0x2808	0xB224    SXTH	R4, R4
; i end address is: 16 (R4)
; offsetRef end address is: 0 (R0)
; occRowScale end address is: 4 (R1)
; mlx90640 end address is: 28 (R7)
; eeData end address is: 32 (R8)
; occColumnScale end address is: 20 (R5)
; occRemScale end address is: 24 (R6)
L___irgrid2_driver_ExtractOffsetParameters61:
; i start address is: 16 (R4)
; eeData start address is: 32 (R8)
; mlx90640 start address is: 28 (R7)
; occRemScale start address is: 24 (R6)
; occColumnScale start address is: 20 (R5)
; occRowScale start address is: 4 (R1)
; offsetRef start address is: 0 (R0)
0x280A	0x2C18    CMP	R4, #24
0x280C	0xDA10    BGE	L___irgrid2_driver_ExtractOffsetParameters62
;__irgrid2_driver.c, 513 :: 		if (occRow[i] > 7)
0x280E	0xAB00    ADD	R3, SP, #0
0x2810	0x0062    LSLS	R2, R4, #1
0x2812	0x189A    ADDS	R2, R3, R2
0x2814	0xF9B22000  LDRSH	R2, [R2, #0]
0x2818	0x2A07    CMP	R2, #7
0x281A	0xDD06    BLE	L___irgrid2_driver_ExtractOffsetParameters64
;__irgrid2_driver.c, 515 :: 		occRow[i] = occRow[i] - 16;
0x281C	0xAB00    ADD	R3, SP, #0
0x281E	0x0062    LSLS	R2, R4, #1
0x2820	0x189B    ADDS	R3, R3, R2
0x2822	0xF9B32000  LDRSH	R2, [R3, #0]
0x2826	0x3A10    SUBS	R2, #16
0x2828	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 516 :: 		}
L___irgrid2_driver_ExtractOffsetParameters64:
;__irgrid2_driver.c, 511 :: 		for( i = 0; i < 24; i++)
0x282A	0x1C64    ADDS	R4, R4, #1
0x282C	0xB224    SXTH	R4, R4
;__irgrid2_driver.c, 517 :: 		}
; i end address is: 16 (R4)
0x282E	0xE7EC    B	L___irgrid2_driver_ExtractOffsetParameters61
L___irgrid2_driver_ExtractOffsetParameters62:
;__irgrid2_driver.c, 519 :: 		for( i = 0; i < 8; i++)
; i start address is: 36 (R9)
0x2830	0xF2400900  MOVW	R9, #0
0x2834	0xFA0FF989  SXTH	R9, R9
; offsetRef end address is: 0 (R0)
; occRowScale end address is: 4 (R1)
; mlx90640 end address is: 28 (R7)
; eeData end address is: 32 (R8)
; i end address is: 36 (R9)
; occColumnScale end address is: 20 (R5)
; occRemScale end address is: 24 (R6)
L___irgrid2_driver_ExtractOffsetParameters65:
; i start address is: 36 (R9)
; offsetRef start address is: 0 (R0)
; occRowScale start address is: 4 (R1)
; occColumnScale start address is: 20 (R5)
; occRemScale start address is: 24 (R6)
; mlx90640 start address is: 28 (R7)
; eeData start address is: 32 (R8)
0x2838	0xF1B90F08  CMP	R9, #8
0x283C	0xDA49    BGE	L___irgrid2_driver_ExtractOffsetParameters66
;__irgrid2_driver.c, 521 :: 		p = i * 4;
0x283E	0xEA4F0289  LSL	R2, R9, #2
0x2842	0xB212    SXTH	R2, R2
; p start address is: 40 (R10)
0x2844	0xFA0FFA82  SXTH	R10, R2
;__irgrid2_driver.c, 522 :: 		occColumn[p + 0] = (eeData[24 + i] & 0x000F);
0x2848	0xAC0C    ADD	R4, SP, #48
0x284A	0x0052    LSLS	R2, R2, #1
0x284C	0x18A3    ADDS	R3, R4, R2
0x284E	0xF1090218  ADD	R2, R9, #24
0x2852	0xB212    SXTH	R2, R2
0x2854	0x0052    LSLS	R2, R2, #1
0x2856	0xEB080202  ADD	R2, R8, R2, LSL #0
0x285A	0x8812    LDRH	R2, [R2, #0]
0x285C	0xF002020F  AND	R2, R2, #15
0x2860	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 523 :: 		occColumn[p + 1] = (eeData[24 + i] & 0x00F0) >> 4;
0x2862	0xF10A0201  ADD	R2, R10, #1
0x2866	0xB212    SXTH	R2, R2
0x2868	0x0052    LSLS	R2, R2, #1
0x286A	0x18A3    ADDS	R3, R4, R2
0x286C	0xF1090218  ADD	R2, R9, #24
0x2870	0xB212    SXTH	R2, R2
0x2872	0x0052    LSLS	R2, R2, #1
0x2874	0xEB080202  ADD	R2, R8, R2, LSL #0
0x2878	0x8812    LDRH	R2, [R2, #0]
0x287A	0xF00202F0  AND	R2, R2, #240
0x287E	0xB292    UXTH	R2, R2
0x2880	0x0912    LSRS	R2, R2, #4
0x2882	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 524 :: 		occColumn[p + 2] = (eeData[24 + i] & 0x0F00) >> 8;
0x2884	0xF10A0202  ADD	R2, R10, #2
0x2888	0xB212    SXTH	R2, R2
0x288A	0x0052    LSLS	R2, R2, #1
0x288C	0x18A3    ADDS	R3, R4, R2
0x288E	0xF1090218  ADD	R2, R9, #24
0x2892	0xB212    SXTH	R2, R2
0x2894	0x0052    LSLS	R2, R2, #1
0x2896	0xEB080202  ADD	R2, R8, R2, LSL #0
0x289A	0x8812    LDRH	R2, [R2, #0]
0x289C	0xF4026270  AND	R2, R2, #3840
0x28A0	0xB292    UXTH	R2, R2
0x28A2	0x0A12    LSRS	R2, R2, #8
0x28A4	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 525 :: 		occColumn[p + 3] = (eeData[24 + i] & 0xF000) >> 12;
0x28A6	0xF10A0203  ADD	R2, R10, #3
0x28AA	0xB212    SXTH	R2, R2
; p end address is: 40 (R10)
0x28AC	0x0052    LSLS	R2, R2, #1
0x28AE	0x18A3    ADDS	R3, R4, R2
0x28B0	0xF1090218  ADD	R2, R9, #24
0x28B4	0xB212    SXTH	R2, R2
0x28B6	0x0052    LSLS	R2, R2, #1
0x28B8	0xEB080202  ADD	R2, R8, R2, LSL #0
0x28BC	0x8812    LDRH	R2, [R2, #0]
0x28BE	0xF4024270  AND	R2, R2, #61440
0x28C2	0xB292    UXTH	R2, R2
0x28C4	0x0B12    LSRS	R2, R2, #12
0x28C6	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 519 :: 		for( i = 0; i < 8; i++)
0x28C8	0xF1090901  ADD	R9, R9, #1
0x28CC	0xFA0FF989  SXTH	R9, R9
;__irgrid2_driver.c, 526 :: 		}
; i end address is: 36 (R9)
0x28D0	0xE7B2    B	L___irgrid2_driver_ExtractOffsetParameters65
L___irgrid2_driver_ExtractOffsetParameters66:
;__irgrid2_driver.c, 528 :: 		for( i = 0; i < 32; i ++)
; i start address is: 8 (R2)
0x28D2	0x2200    MOVS	R2, #0
0x28D4	0xB212    SXTH	R2, R2
; offsetRef end address is: 0 (R0)
; occRowScale end address is: 4 (R1)
; mlx90640 end address is: 28 (R7)
; eeData end address is: 32 (R8)
; i end address is: 8 (R2)
; occColumnScale end address is: 20 (R5)
; occRemScale end address is: 24 (R6)
0x28D6	0xB2F4    UXTB	R4, R6
0x28D8	0xB2CE    UXTB	R6, R1
0x28DA	0x4639    MOV	R1, R7
0x28DC	0xB207    SXTH	R7, R0
0x28DE	0x4640    MOV	R0, R8
0x28E0	0xFA0FF882  SXTH	R8, R2
L___irgrid2_driver_ExtractOffsetParameters68:
; i start address is: 32 (R8)
; eeData start address is: 0 (R0)
; mlx90640 start address is: 4 (R1)
; occRemScale start address is: 16 (R4)
; occColumnScale start address is: 20 (R5)
; occRowScale start address is: 24 (R6)
; offsetRef start address is: 28 (R7)
0x28E4	0xF1B80F20  CMP	R8, #32
0x28E8	0xDA14    BGE	L___irgrid2_driver_ExtractOffsetParameters69
;__irgrid2_driver.c, 530 :: 		if (occColumn[i] > 7)
0x28EA	0xAB0C    ADD	R3, SP, #48
0x28EC	0xEA4F0248  LSL	R2, R8, #1
0x28F0	0x189A    ADDS	R2, R3, R2
0x28F2	0xF9B22000  LDRSH	R2, [R2, #0]
0x28F6	0x2A07    CMP	R2, #7
0x28F8	0xDD07    BLE	L___irgrid2_driver_ExtractOffsetParameters71
;__irgrid2_driver.c, 532 :: 		occColumn[i] = occColumn[i] - 16;
0x28FA	0xAB0C    ADD	R3, SP, #48
0x28FC	0xEA4F0248  LSL	R2, R8, #1
0x2900	0x189B    ADDS	R3, R3, R2
0x2902	0xF9B32000  LDRSH	R2, [R3, #0]
0x2906	0x3A10    SUBS	R2, #16
0x2908	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 533 :: 		}
L___irgrid2_driver_ExtractOffsetParameters71:
;__irgrid2_driver.c, 528 :: 		for( i = 0; i < 32; i ++)
0x290A	0xF1080801  ADD	R8, R8, #1
0x290E	0xFA0FF888  SXTH	R8, R8
;__irgrid2_driver.c, 534 :: 		}
; i end address is: 32 (R8)
0x2912	0xE7E7    B	L___irgrid2_driver_ExtractOffsetParameters68
L___irgrid2_driver_ExtractOffsetParameters69:
;__irgrid2_driver.c, 536 :: 		for( i = 0; i < 24; i++)
; i start address is: 40 (R10)
0x2914	0xF2400A00  MOVW	R10, #0
0x2918	0xFA0FFA8A  SXTH	R10, R10
; occRemScale end address is: 16 (R4)
; occColumnScale end address is: 20 (R5)
; occRowScale end address is: 24 (R6)
; offsetRef end address is: 28 (R7)
; eeData end address is: 0 (R0)
; mlx90640 end address is: 4 (R1)
; i end address is: 40 (R10)
0x291C	0xFA5FF886  UXTB	R8, R6
0x2920	0xB2E6    UXTB	R6, R4
0x2922	0xFA0FF987  SXTH	R9, R7
0x2926	0xB2EF    UXTB	R7, R5
L___irgrid2_driver_ExtractOffsetParameters72:
; i start address is: 40 (R10)
; offsetRef start address is: 36 (R9)
; occRowScale start address is: 32 (R8)
; occColumnScale start address is: 28 (R7)
; occRemScale start address is: 24 (R6)
; mlx90640 start address is: 4 (R1)
; eeData start address is: 0 (R0)
0x2928	0xF1BA0F18  CMP	R10, #24
0x292C	0xDA60    BGE	L___irgrid2_driver_ExtractOffsetParameters73
;__irgrid2_driver.c, 538 :: 		for( j = 0; j < 32; j ++)
; j start address is: 44 (R11)
0x292E	0xF2400B00  MOVW	R11, #0
0x2932	0xFA0FFB8B  SXTH	R11, R11
; eeData end address is: 0 (R0)
; mlx90640 end address is: 4 (R1)
; occRemScale end address is: 24 (R6)
; occColumnScale end address is: 28 (R7)
; occRowScale end address is: 32 (R8)
; offsetRef end address is: 36 (R9)
; j end address is: 44 (R11)
; i end address is: 40 (R10)
L___irgrid2_driver_ExtractOffsetParameters75:
; j start address is: 44 (R11)
; eeData start address is: 0 (R0)
; mlx90640 start address is: 4 (R1)
; occRemScale start address is: 24 (R6)
; occColumnScale start address is: 28 (R7)
; occRowScale start address is: 32 (R8)
; offsetRef start address is: 36 (R9)
; i start address is: 40 (R10)
0x2936	0xF1BB0F20  CMP	R11, #32
0x293A	0xDA54    BGE	L___irgrid2_driver_ExtractOffsetParameters76
;__irgrid2_driver.c, 540 :: 		p = 32 * i +j;
0x293C	0xEA4F124A  LSL	R2, R10, #5
0x2940	0xB212    SXTH	R2, R2
0x2942	0xEB02040B  ADD	R4, R2, R11, LSL #0
0x2946	0xB224    SXTH	R4, R4
; p start address is: 20 (R5)
0x2948	0xB225    SXTH	R5, R4
;__irgrid2_driver.c, 541 :: 		mlx90640->offset[p] = (eeData[64 + p] & 0xFC00) >> 10;
0x294A	0xF6014344  ADDW	R3, R1, #3140
0x294E	0x0062    LSLS	R2, R4, #1
0x2950	0x189B    ADDS	R3, R3, R2
0x2952	0xF2040240  ADDW	R2, R4, #64
0x2956	0xB212    SXTH	R2, R2
0x2958	0x0052    LSLS	R2, R2, #1
0x295A	0x1882    ADDS	R2, R0, R2
0x295C	0x8812    LDRH	R2, [R2, #0]
0x295E	0xF402427C  AND	R2, R2, #64512
0x2962	0xB292    UXTH	R2, R2
0x2964	0x0A92    LSRS	R2, R2, #10
0x2966	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 542 :: 		if (mlx90640->offset[p] > 31)
0x2968	0xF6014344  ADDW	R3, R1, #3140
0x296C	0x006A    LSLS	R2, R5, #1
0x296E	0x189A    ADDS	R2, R3, R2
0x2970	0xF9B22000  LDRSH	R2, [R2, #0]
0x2974	0x2A1F    CMP	R2, #31
0x2976	0xDD07    BLE	L___irgrid2_driver_ExtractOffsetParameters78
;__irgrid2_driver.c, 544 :: 		mlx90640->offset[p] = mlx90640->offset[p] - 64;
0x2978	0xF6014344  ADDW	R3, R1, #3140
0x297C	0x006A    LSLS	R2, R5, #1
0x297E	0x189B    ADDS	R3, R3, R2
0x2980	0xF9B32000  LDRSH	R2, [R3, #0]
0x2984	0x3A40    SUBS	R2, #64
0x2986	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 545 :: 		}
L___irgrid2_driver_ExtractOffsetParameters78:
;__irgrid2_driver.c, 546 :: 		mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
0x2988	0xF6014344  ADDW	R3, R1, #3140
0x298C	0x006A    LSLS	R2, R5, #1
0x298E	0x189C    ADDS	R4, R3, R2
0x2990	0xF9B43000  LDRSH	R3, [R4, #0]
0x2994	0x2201    MOVS	R2, #1
0x2996	0xB212    SXTH	R2, R2
0x2998	0x40B2    LSLS	R2, R6
0x299A	0xB212    SXTH	R2, R2
0x299C	0x435A    MULS	R2, R3, R2
0x299E	0x8022    STRH	R2, [R4, #0]
;__irgrid2_driver.c, 547 :: 		mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
0x29A0	0xF6014344  ADDW	R3, R1, #3140
0x29A4	0x006A    LSLS	R2, R5, #1
; p end address is: 20 (R5)
0x29A6	0x189D    ADDS	R5, R3, R2
0x29A8	0xAB00    ADD	R3, SP, #0
0x29AA	0xEA4F024A  LSL	R2, R10, #1
0x29AE	0x189A    ADDS	R2, R3, R2
0x29B0	0xF9B22000  LDRSH	R2, [R2, #0]
0x29B4	0xFA02F208  LSL	R2, R2, R8
0x29B8	0xB212    SXTH	R2, R2
0x29BA	0xEB090402  ADD	R4, R9, R2, LSL #0
0x29BE	0xB224    SXTH	R4, R4
0x29C0	0xAB0C    ADD	R3, SP, #48
0x29C2	0xEA4F024B  LSL	R2, R11, #1
0x29C6	0x189A    ADDS	R2, R3, R2
0x29C8	0xF9B22000  LDRSH	R2, [R2, #0]
0x29CC	0x40BA    LSLS	R2, R7
0x29CE	0xB212    SXTH	R2, R2
0x29D0	0x18A3    ADDS	R3, R4, R2
0x29D2	0xB21B    SXTH	R3, R3
0x29D4	0xF9B52000  LDRSH	R2, [R5, #0]
0x29D8	0x189A    ADDS	R2, R3, R2
0x29DA	0x802A    STRH	R2, [R5, #0]
;__irgrid2_driver.c, 538 :: 		for( j = 0; j < 32; j ++)
0x29DC	0xF10B0B01  ADD	R11, R11, #1
0x29E0	0xFA0FFB8B  SXTH	R11, R11
;__irgrid2_driver.c, 548 :: 		}
; j end address is: 44 (R11)
0x29E4	0xE7A7    B	L___irgrid2_driver_ExtractOffsetParameters75
L___irgrid2_driver_ExtractOffsetParameters76:
;__irgrid2_driver.c, 536 :: 		for( i = 0; i < 24; i++)
0x29E6	0xF10A0A01  ADD	R10, R10, #1
0x29EA	0xFA0FFA8A  SXTH	R10, R10
;__irgrid2_driver.c, 549 :: 		}
; eeData end address is: 0 (R0)
; mlx90640 end address is: 4 (R1)
; occRemScale end address is: 24 (R6)
; occColumnScale end address is: 28 (R7)
; occRowScale end address is: 32 (R8)
; offsetRef end address is: 36 (R9)
; i end address is: 40 (R10)
0x29EE	0xE79B    B	L___irgrid2_driver_ExtractOffsetParameters72
L___irgrid2_driver_ExtractOffsetParameters73:
;__irgrid2_driver.c, 550 :: 		}
L_end_ExtractOffsetParameters:
0x29F0	0xB01C    ADD	SP, SP, #112
0x29F2	0x4770    BX	LR
; end of __irgrid2_driver_ExtractOffsetParameters
__irgrid2_driver_ExtractKtaPixelParameters:
;__irgrid2_driver.c, 552 :: 		static void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
; mlx90640 start address is: 4 (R1)
; eeData start address is: 0 (R0)
0x1ECC	0xB084    SUB	SP, SP, #16
0x1ECE	0xF8CDE000  STR	LR, [SP, #0]
; mlx90640 end address is: 4 (R1)
; eeData end address is: 0 (R0)
; eeData start address is: 0 (R0)
; mlx90640 start address is: 4 (R1)
;__irgrid2_driver.c, 554 :: 		int p = 0;
;__irgrid2_driver.c, 567 :: 		KtaRoCo = (eeData[54] & 0xFF00) >> 8;
0x1ED2	0xF200026C  ADDW	R2, R0, #108
0x1ED6	0x8812    LDRH	R2, [R2, #0]
0x1ED8	0xF402427F  AND	R2, R2, #65280
0x1EDC	0xB292    UXTH	R2, R2
0x1EDE	0x0A12    LSRS	R2, R2, #8
; KtaRoCo start address is: 12 (R3)
0x1EE0	0xB253    SXTB	R3, R2
;__irgrid2_driver.c, 568 :: 		if (KtaRoCo > 127)
0x1EE2	0xB252    SXTB	R2, R2
0x1EE4	0x2A7F    CMP	R2, #127
0x1EE6	0xDD03    BLE	L___irgrid2_driver_ExtractKtaPixelParameters216
;__irgrid2_driver.c, 570 :: 		KtaRoCo = KtaRoCo - 256;
0x1EE8	0xF5A37280  SUB	R2, R3, #256
0x1EEC	0xB253    SXTB	R3, R2
; KtaRoCo end address is: 12 (R3)
;__irgrid2_driver.c, 571 :: 		}
0x1EEE	0xE7FF    B	L___irgrid2_driver_ExtractKtaPixelParameters79
L___irgrid2_driver_ExtractKtaPixelParameters216:
;__irgrid2_driver.c, 568 :: 		if (KtaRoCo > 127)
;__irgrid2_driver.c, 571 :: 		}
L___irgrid2_driver_ExtractKtaPixelParameters79:
;__irgrid2_driver.c, 572 :: 		KtaRC[0] = KtaRoCo;
; KtaRoCo start address is: 12 (R3)
0x1EF0	0xAA01    ADD	R2, SP, #4
0x1EF2	0x7013    STRB	R3, [R2, #0]
; KtaRoCo end address is: 12 (R3)
;__irgrid2_driver.c, 574 :: 		KtaReCo = (eeData[54] & 0x00FF);
0x1EF4	0xF200026C  ADDW	R2, R0, #108
0x1EF8	0x8812    LDRH	R2, [R2, #0]
0x1EFA	0xF00202FF  AND	R2, R2, #255
; KtaReCo start address is: 12 (R3)
0x1EFE	0xB253    SXTB	R3, R2
;__irgrid2_driver.c, 575 :: 		if (KtaReCo > 127)
0x1F00	0xB252    SXTB	R2, R2
0x1F02	0x2A7F    CMP	R2, #127
0x1F04	0xDD03    BLE	L___irgrid2_driver_ExtractKtaPixelParameters217
;__irgrid2_driver.c, 577 :: 		KtaReCo = KtaReCo - 256;
0x1F06	0xF5A37280  SUB	R2, R3, #256
0x1F0A	0xB253    SXTB	R3, R2
; KtaReCo end address is: 12 (R3)
;__irgrid2_driver.c, 578 :: 		}
0x1F0C	0xE7FF    B	L___irgrid2_driver_ExtractKtaPixelParameters80
L___irgrid2_driver_ExtractKtaPixelParameters217:
;__irgrid2_driver.c, 575 :: 		if (KtaReCo > 127)
;__irgrid2_driver.c, 578 :: 		}
L___irgrid2_driver_ExtractKtaPixelParameters80:
;__irgrid2_driver.c, 579 :: 		KtaRC[2] = KtaReCo;
; KtaReCo start address is: 12 (R3)
0x1F0E	0xAA01    ADD	R2, SP, #4
0x1F10	0x1C92    ADDS	R2, R2, #2
0x1F12	0x7013    STRB	R3, [R2, #0]
; KtaReCo end address is: 12 (R3)
;__irgrid2_driver.c, 581 :: 		KtaRoCe = (eeData[55] & 0xFF00) >> 8;
0x1F14	0xF200026E  ADDW	R2, R0, #110
0x1F18	0x8812    LDRH	R2, [R2, #0]
0x1F1A	0xF402427F  AND	R2, R2, #65280
0x1F1E	0xB292    UXTH	R2, R2
0x1F20	0x0A12    LSRS	R2, R2, #8
; KtaRoCe start address is: 12 (R3)
0x1F22	0xB253    SXTB	R3, R2
;__irgrid2_driver.c, 582 :: 		if (KtaRoCe > 127)
0x1F24	0xB252    SXTB	R2, R2
0x1F26	0x2A7F    CMP	R2, #127
0x1F28	0xDD03    BLE	L___irgrid2_driver_ExtractKtaPixelParameters218
;__irgrid2_driver.c, 584 :: 		KtaRoCe = KtaRoCe - 256;
0x1F2A	0xF5A37280  SUB	R2, R3, #256
0x1F2E	0xB253    SXTB	R3, R2
; KtaRoCe end address is: 12 (R3)
;__irgrid2_driver.c, 585 :: 		}
0x1F30	0xE7FF    B	L___irgrid2_driver_ExtractKtaPixelParameters81
L___irgrid2_driver_ExtractKtaPixelParameters218:
;__irgrid2_driver.c, 582 :: 		if (KtaRoCe > 127)
;__irgrid2_driver.c, 585 :: 		}
L___irgrid2_driver_ExtractKtaPixelParameters81:
;__irgrid2_driver.c, 586 :: 		KtaRC[1] = KtaRoCe;
; KtaRoCe start address is: 12 (R3)
0x1F32	0xAA01    ADD	R2, SP, #4
0x1F34	0x1C52    ADDS	R2, R2, #1
0x1F36	0x7013    STRB	R3, [R2, #0]
; KtaRoCe end address is: 12 (R3)
;__irgrid2_driver.c, 588 :: 		KtaReCe = (eeData[55] & 0x00FF);
0x1F38	0xF200026E  ADDW	R2, R0, #110
0x1F3C	0x8812    LDRH	R2, [R2, #0]
0x1F3E	0xF00202FF  AND	R2, R2, #255
; KtaReCe start address is: 12 (R3)
0x1F42	0xB253    SXTB	R3, R2
;__irgrid2_driver.c, 589 :: 		if (KtaReCe > 127)
0x1F44	0xB252    SXTB	R2, R2
0x1F46	0x2A7F    CMP	R2, #127
0x1F48	0xDD03    BLE	L___irgrid2_driver_ExtractKtaPixelParameters219
;__irgrid2_driver.c, 591 :: 		KtaReCe = KtaReCe - 256;
0x1F4A	0xF5A37280  SUB	R2, R3, #256
0x1F4E	0xB253    SXTB	R3, R2
; KtaReCe end address is: 12 (R3)
;__irgrid2_driver.c, 592 :: 		}
0x1F50	0xE7FF    B	L___irgrid2_driver_ExtractKtaPixelParameters82
L___irgrid2_driver_ExtractKtaPixelParameters219:
;__irgrid2_driver.c, 589 :: 		if (KtaReCe > 127)
;__irgrid2_driver.c, 592 :: 		}
L___irgrid2_driver_ExtractKtaPixelParameters82:
;__irgrid2_driver.c, 593 :: 		KtaRC[3] = KtaReCe;
; KtaReCe start address is: 12 (R3)
0x1F52	0xAA01    ADD	R2, SP, #4
0x1F54	0x1CD2    ADDS	R2, R2, #3
0x1F56	0x7013    STRB	R3, [R2, #0]
; KtaReCe end address is: 12 (R3)
;__irgrid2_driver.c, 595 :: 		ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;
0x1F58	0xF2000270  ADDW	R2, R0, #112
0x1F5C	0x8812    LDRH	R2, [R2, #0]
0x1F5E	0xF00202F0  AND	R2, R2, #240
0x1F62	0xB292    UXTH	R2, R2
0x1F64	0x0912    LSRS	R2, R2, #4
0x1F66	0xB292    UXTH	R2, R2
0x1F68	0x3208    ADDS	R2, #8
; ktaScale1 start address is: 32 (R8)
0x1F6A	0xFA5FF882  UXTB	R8, R2
;__irgrid2_driver.c, 596 :: 		ktaScale2 = (eeData[56] & 0x000F);
0x1F6E	0xF2000270  ADDW	R2, R0, #112
0x1F72	0x8812    LDRH	R2, [R2, #0]
0x1F74	0xF002020F  AND	R2, R2, #15
; ktaScale2 start address is: 36 (R9)
0x1F78	0xFA5FF982  UXTB	R9, R2
;__irgrid2_driver.c, 598 :: 		for(i = 0; i < 24; i++)
; i start address is: 40 (R10)
0x1F7C	0xF2400A00  MOVW	R10, #0
0x1F80	0xFA0FFA8A  SXTH	R10, R10
; eeData end address is: 0 (R0)
; mlx90640 end address is: 4 (R1)
; ktaScale1 end address is: 32 (R8)
; ktaScale2 end address is: 36 (R9)
; i end address is: 40 (R10)
0x1F84	0x4606    MOV	R6, R0
0x1F86	0x460F    MOV	R7, R1
L___irgrid2_driver_ExtractKtaPixelParameters83:
; i start address is: 40 (R10)
; ktaScale2 start address is: 36 (R9)
; ktaScale1 start address is: 32 (R8)
; mlx90640 start address is: 28 (R7)
; eeData start address is: 24 (R6)
0x1F88	0xF1BA0F18  CMP	R10, #24
0x1F8C	0xF28080AB  BGE	L___irgrid2_driver_ExtractKtaPixelParameters84
;__irgrid2_driver.c, 600 :: 		for( j = 0; j < 32; j ++)
; j start address is: 44 (R11)
0x1F90	0xF2400B00  MOVW	R11, #0
0x1F94	0xFA0FFB8B  SXTH	R11, R11
; eeData end address is: 24 (R6)
; mlx90640 end address is: 28 (R7)
; ktaScale1 end address is: 32 (R8)
; ktaScale2 end address is: 36 (R9)
; j end address is: 44 (R11)
; i end address is: 40 (R10)
L___irgrid2_driver_ExtractKtaPixelParameters86:
; j start address is: 44 (R11)
; eeData start address is: 24 (R6)
; mlx90640 start address is: 28 (R7)
; ktaScale1 start address is: 32 (R8)
; ktaScale2 start address is: 36 (R9)
; i start address is: 40 (R10)
0x1F98	0xF1BB0F20  CMP	R11, #32
0x1F9C	0xF280809E  BGE	L___irgrid2_driver_ExtractKtaPixelParameters87
;__irgrid2_driver.c, 602 :: 		p = 32 * i +j;
0x1FA0	0xEA4F124A  LSL	R2, R10, #5
0x1FA4	0xB212    SXTH	R2, R2
0x1FA6	0xEB02050B  ADD	R5, R2, R11, LSL #0
0x1FAA	0xB22D    SXTH	R5, R5
; p start address is: 48 (R12)
0x1FAC	0xFA0FFC85  SXTH	R12, R5
;__irgrid2_driver.c, 603 :: 		split = 2*(p/32 - (p/64)*2) + p%2;
0x1FB0	0x2220    MOVS	R2, #32
0x1FB2	0xB212    SXTH	R2, R2
0x1FB4	0xFB95F3F2  SDIV	R3, R5, R2
0x1FB8	0xB21B    SXTH	R3, R3
0x1FBA	0x2240    MOVS	R2, #64
0x1FBC	0xB212    SXTH	R2, R2
0x1FBE	0xFB95F2F2  SDIV	R2, R5, R2
0x1FC2	0xB212    SXTH	R2, R2
0x1FC4	0x0052    LSLS	R2, R2, #1
0x1FC6	0xB212    SXTH	R2, R2
0x1FC8	0x1A9A    SUB	R2, R3, R2
0x1FCA	0xB212    SXTH	R2, R2
0x1FCC	0x0054    LSLS	R4, R2, #1
0x1FCE	0xB224    SXTH	R4, R4
0x1FD0	0x2302    MOVS	R3, #2
0x1FD2	0xB21B    SXTH	R3, R3
0x1FD4	0xFB95F2F3  SDIV	R2, R5, R3
0x1FD8	0xFB035212  MLS	R2, R3, R2, R5
0x1FDC	0xB212    SXTH	R2, R2
0x1FDE	0x18A2    ADDS	R2, R4, R2
; split start address is: 0 (R0)
0x1FE0	0xB2D0    UXTB	R0, R2
;__irgrid2_driver.c, 604 :: 		mlx90640->kta[p] = (eeData[64 + p] & 0x000E) >> 1;
0x1FE2	0xF2412244  MOVW	R2, #4676
0x1FE6	0x18BB    ADDS	R3, R7, R2
0x1FE8	0x00AA    LSLS	R2, R5, #2
0x1FEA	0x189B    ADDS	R3, R3, R2
0x1FEC	0xF2050240  ADDW	R2, R5, #64
0x1FF0	0xB212    SXTH	R2, R2
0x1FF2	0x0052    LSLS	R2, R2, #1
0x1FF4	0x18B2    ADDS	R2, R6, R2
0x1FF6	0x8812    LDRH	R2, [R2, #0]
0x1FF8	0xF002020E  AND	R2, R2, #14
0x1FFC	0xB292    UXTH	R2, R2
0x1FFE	0x0852    LSRS	R2, R2, #1
0x2000	0xB292    UXTH	R2, R2
0x2002	0xEE002A10  VMOV	S0, R2
0x2006	0xEEB80A40  VCVT.F32.U32	S0, S0
0x200A	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 605 :: 		if (mlx90640->kta[p] > 3)
0x200E	0xF2412244  MOVW	R2, #4676
0x2012	0x18BB    ADDS	R3, R7, R2
0x2014	0xEA4F028C  LSL	R2, R12, #2
0x2018	0x189A    ADDS	R2, R3, R2
0x201A	0xED520A00  VLDR.32	S1, [R2, #0]
0x201E	0xEEB00A08  VMOV.F32	S0, #3
0x2022	0xEEF40AC0  VCMPE.F32	S1, S0
0x2026	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x202A	0xDD0D    BLE	L___irgrid2_driver_ExtractKtaPixelParameters89
;__irgrid2_driver.c, 607 :: 		mlx90640->kta[p] = mlx90640->kta[p] - 8;
0x202C	0xF2412244  MOVW	R2, #4676
0x2030	0x18BB    ADDS	R3, R7, R2
0x2032	0xEA4F028C  LSL	R2, R12, #2
0x2036	0x189B    ADDS	R3, R3, R2
0x2038	0xED530A00  VLDR.32	S1, [R3, #0]
0x203C	0xEEB20A00  VMOV.F32	S0, #8
0x2040	0xEE300AC0  VSUB.F32	S0, S1, S0
0x2044	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 608 :: 		}
L___irgrid2_driver_ExtractKtaPixelParameters89:
;__irgrid2_driver.c, 609 :: 		mlx90640->kta[p] = mlx90640->kta[p] * (1 << ktaScale2);
0x2048	0xF2412244  MOVW	R2, #4676
0x204C	0x18BB    ADDS	R3, R7, R2
0x204E	0xEA4F028C  LSL	R2, R12, #2
0x2052	0x189C    ADDS	R4, R3, R2
0x2054	0xED540A00  VLDR.32	S1, [R4, #0]
0x2058	0x2201    MOVS	R2, #1
0x205A	0xB212    SXTH	R2, R2
0x205C	0xFA02F209  LSL	R2, R2, R9
0x2060	0xB212    SXTH	R2, R2
0x2062	0xEE002A10  VMOV	S0, R2
0x2066	0xEEB80AC0  VCVT.F32.S32	S0, S0
0x206A	0xEE200A80  VMUL.F32	S0, S1, S0
0x206E	0xED040A00  VSTR.32	S0, [R4, #0]
;__irgrid2_driver.c, 610 :: 		mlx90640->kta[p] = KtaRC[split] + mlx90640->kta[p];
0x2072	0xF2412244  MOVW	R2, #4676
0x2076	0x18BB    ADDS	R3, R7, R2
0x2078	0xEA4F028C  LSL	R2, R12, #2
0x207C	0x189C    ADDS	R4, R3, R2
0x207E	0xAA01    ADD	R2, SP, #4
0x2080	0x1812    ADDS	R2, R2, R0
; split end address is: 0 (R0)
0x2082	0xF9922000  LDRSB	R2, [R2, #0]
0x2086	0xEE002A90  VMOV	S1, R2
0x208A	0xEEF80AE0  VCVT.F32.S32	S1, S1
0x208E	0xED140A00  VLDR.32	S0, [R4, #0]
0x2092	0xEE300A80  VADD.F32	S0, S1, S0
0x2096	0xED040A00  VSTR.32	S0, [R4, #0]
;__irgrid2_driver.c, 611 :: 		mlx90640->kta[p] = mlx90640->kta[p] / _pow(2,(double)ktaScale1);
0x209A	0xF2412244  MOVW	R2, #4676
0x209E	0x18BB    ADDS	R3, R7, R2
0x20A0	0xEA4F028C  LSL	R2, R12, #2
; p end address is: 48 (R12)
0x20A4	0x189A    ADDS	R2, R3, R2
0x20A6	0x9203    STR	R2, [SP, #12]
0x20A8	0xED120A00  VLDR.32	S0, [R2, #0]
0x20AC	0xED8D0A02  VSTR.32	S0, [SP, #8]
0x20B0	0xEE008A10  VMOV	S0, R8
0x20B4	0xEEB80A40  VCVT.F32.U32	S0, S0
0x20B8	0xEEF00A40  VMOV.F32	S1, S0
0x20BC	0xEEB00A00  VMOV.F32	S0, #2
0x20C0	0xF7FFFBBC  BL	__irgrid2_driver__pow+0
0x20C4	0xEDDD0A02  VLDR.32	S1, [SP, #8]
0x20C8	0xEE800A80  VDIV.F32	S0, S1, S0
0x20CC	0x9A03    LDR	R2, [SP, #12]
0x20CE	0xED020A00  VSTR.32	S0, [R2, #0]
;__irgrid2_driver.c, 600 :: 		for( j = 0; j < 32; j ++)
0x20D2	0xF10B0B01  ADD	R11, R11, #1
0x20D6	0xFA0FFB8B  SXTH	R11, R11
;__irgrid2_driver.c, 612 :: 		}
; j end address is: 44 (R11)
0x20DA	0xE75D    B	L___irgrid2_driver_ExtractKtaPixelParameters86
L___irgrid2_driver_ExtractKtaPixelParameters87:
;__irgrid2_driver.c, 598 :: 		for(i = 0; i < 24; i++)
0x20DC	0xF10A0A01  ADD	R10, R10, #1
0x20E0	0xFA0FFA8A  SXTH	R10, R10
;__irgrid2_driver.c, 613 :: 		}
; eeData end address is: 24 (R6)
; mlx90640 end address is: 28 (R7)
; ktaScale1 end address is: 32 (R8)
; ktaScale2 end address is: 36 (R9)
; i end address is: 40 (R10)
0x20E4	0xE750    B	L___irgrid2_driver_ExtractKtaPixelParameters83
L___irgrid2_driver_ExtractKtaPixelParameters84:
;__irgrid2_driver.c, 614 :: 		}
L_end_ExtractKtaPixelParameters:
0x20E6	0xF8DDE000  LDR	LR, [SP, #0]
0x20EA	0xB004    ADD	SP, SP, #16
0x20EC	0x4770    BX	LR
; end of __irgrid2_driver_ExtractKtaPixelParameters
__irgrid2_driver_ExtractKvPixelParameters:
;__irgrid2_driver.c, 616 :: 		static void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
; mlx90640 start address is: 4 (R1)
; eeData start address is: 0 (R0)
0x1D58	0xB084    SUB	SP, SP, #16
0x1D5A	0xF8CDE000  STR	LR, [SP, #0]
; mlx90640 end address is: 4 (R1)
; eeData end address is: 0 (R0)
; eeData start address is: 0 (R0)
; mlx90640 start address is: 4 (R1)
;__irgrid2_driver.c, 618 :: 		int p = 0;
;__irgrid2_driver.c, 630 :: 		KvRoCo = (eeData[52] & 0xF000) >> 12;
0x1D5E	0xF2000268  ADDW	R2, R0, #104
0x1D62	0x8812    LDRH	R2, [R2, #0]
0x1D64	0xF4024270  AND	R2, R2, #61440
0x1D68	0xB292    UXTH	R2, R2
0x1D6A	0x0B12    LSRS	R2, R2, #12
; KvRoCo start address is: 12 (R3)
0x1D6C	0xB253    SXTB	R3, R2
;__irgrid2_driver.c, 631 :: 		if (KvRoCo > 7)
0x1D6E	0xB252    SXTB	R2, R2
0x1D70	0x2A07    CMP	R2, #7
0x1D72	0xDD03    BLE	L___irgrid2_driver_ExtractKvPixelParameters220
;__irgrid2_driver.c, 633 :: 		KvRoCo = KvRoCo - 16;
0x1D74	0xF2A30210  SUBW	R2, R3, #16
0x1D78	0xB253    SXTB	R3, R2
; KvRoCo end address is: 12 (R3)
;__irgrid2_driver.c, 634 :: 		}
0x1D7A	0xE7FF    B	L___irgrid2_driver_ExtractKvPixelParameters90
L___irgrid2_driver_ExtractKvPixelParameters220:
;__irgrid2_driver.c, 631 :: 		if (KvRoCo > 7)
;__irgrid2_driver.c, 634 :: 		}
L___irgrid2_driver_ExtractKvPixelParameters90:
;__irgrid2_driver.c, 635 :: 		KvT[0] = KvRoCo;
; KvRoCo start address is: 12 (R3)
0x1D7C	0xAA01    ADD	R2, SP, #4
0x1D7E	0x7013    STRB	R3, [R2, #0]
; KvRoCo end address is: 12 (R3)
;__irgrid2_driver.c, 637 :: 		KvReCo = (eeData[52] & 0x0F00) >> 8;
0x1D80	0xF2000268  ADDW	R2, R0, #104
0x1D84	0x8812    LDRH	R2, [R2, #0]
0x1D86	0xF4026270  AND	R2, R2, #3840
0x1D8A	0xB292    UXTH	R2, R2
0x1D8C	0x0A12    LSRS	R2, R2, #8
; KvReCo start address is: 12 (R3)
0x1D8E	0xB253    SXTB	R3, R2
;__irgrid2_driver.c, 638 :: 		if (KvReCo > 7)
0x1D90	0xB252    SXTB	R2, R2
0x1D92	0x2A07    CMP	R2, #7
0x1D94	0xDD03    BLE	L___irgrid2_driver_ExtractKvPixelParameters221
;__irgrid2_driver.c, 640 :: 		KvReCo = KvReCo - 16;
0x1D96	0xF2A30210  SUBW	R2, R3, #16
0x1D9A	0xB253    SXTB	R3, R2
; KvReCo end address is: 12 (R3)
;__irgrid2_driver.c, 641 :: 		}
0x1D9C	0xE7FF    B	L___irgrid2_driver_ExtractKvPixelParameters91
L___irgrid2_driver_ExtractKvPixelParameters221:
;__irgrid2_driver.c, 638 :: 		if (KvReCo > 7)
;__irgrid2_driver.c, 641 :: 		}
L___irgrid2_driver_ExtractKvPixelParameters91:
;__irgrid2_driver.c, 642 :: 		KvT[2] = KvReCo;
; KvReCo start address is: 12 (R3)
0x1D9E	0xAA01    ADD	R2, SP, #4
0x1DA0	0x1C92    ADDS	R2, R2, #2
0x1DA2	0x7013    STRB	R3, [R2, #0]
; KvReCo end address is: 12 (R3)
;__irgrid2_driver.c, 644 :: 		KvRoCe = (eeData[52] & 0x00F0) >> 4;
0x1DA4	0xF2000268  ADDW	R2, R0, #104
0x1DA8	0x8812    LDRH	R2, [R2, #0]
0x1DAA	0xF00202F0  AND	R2, R2, #240
0x1DAE	0xB292    UXTH	R2, R2
0x1DB0	0x0912    LSRS	R2, R2, #4
; KvRoCe start address is: 12 (R3)
0x1DB2	0xB253    SXTB	R3, R2
;__irgrid2_driver.c, 645 :: 		if (KvRoCe > 7)
0x1DB4	0xB252    SXTB	R2, R2
0x1DB6	0x2A07    CMP	R2, #7
0x1DB8	0xDD03    BLE	L___irgrid2_driver_ExtractKvPixelParameters222
;__irgrid2_driver.c, 647 :: 		KvRoCe = KvRoCe - 16;
0x1DBA	0xF2A30210  SUBW	R2, R3, #16
0x1DBE	0xB253    SXTB	R3, R2
; KvRoCe end address is: 12 (R3)
;__irgrid2_driver.c, 648 :: 		}
0x1DC0	0xE7FF    B	L___irgrid2_driver_ExtractKvPixelParameters92
L___irgrid2_driver_ExtractKvPixelParameters222:
;__irgrid2_driver.c, 645 :: 		if (KvRoCe > 7)
;__irgrid2_driver.c, 648 :: 		}
L___irgrid2_driver_ExtractKvPixelParameters92:
;__irgrid2_driver.c, 649 :: 		KvT[1] = KvRoCe;
; KvRoCe start address is: 12 (R3)
0x1DC2	0xAA01    ADD	R2, SP, #4
0x1DC4	0x1C52    ADDS	R2, R2, #1
0x1DC6	0x7013    STRB	R3, [R2, #0]
; KvRoCe end address is: 12 (R3)
;__irgrid2_driver.c, 651 :: 		KvReCe = (eeData[52] & 0x000F);
0x1DC8	0xF2000268  ADDW	R2, R0, #104
0x1DCC	0x8812    LDRH	R2, [R2, #0]
0x1DCE	0xF002020F  AND	R2, R2, #15
; KvReCe start address is: 12 (R3)
0x1DD2	0xB253    SXTB	R3, R2
;__irgrid2_driver.c, 652 :: 		if (KvReCe > 7)
0x1DD4	0xB252    SXTB	R2, R2
0x1DD6	0x2A07    CMP	R2, #7
0x1DD8	0xDD03    BLE	L___irgrid2_driver_ExtractKvPixelParameters223
;__irgrid2_driver.c, 654 :: 		KvReCe = KvReCe - 16;
0x1DDA	0xF2A30210  SUBW	R2, R3, #16
0x1DDE	0xB253    SXTB	R3, R2
; KvReCe end address is: 12 (R3)
;__irgrid2_driver.c, 655 :: 		}
0x1DE0	0xE7FF    B	L___irgrid2_driver_ExtractKvPixelParameters93
L___irgrid2_driver_ExtractKvPixelParameters223:
;__irgrid2_driver.c, 652 :: 		if (KvReCe > 7)
;__irgrid2_driver.c, 655 :: 		}
L___irgrid2_driver_ExtractKvPixelParameters93:
;__irgrid2_driver.c, 656 :: 		KvT[3] = KvReCe;
; KvReCe start address is: 12 (R3)
0x1DE2	0xAA01    ADD	R2, SP, #4
0x1DE4	0x1CD2    ADDS	R2, R2, #3
0x1DE6	0x7013    STRB	R3, [R2, #0]
; KvReCe end address is: 12 (R3)
;__irgrid2_driver.c, 658 :: 		kvScale = (eeData[56] & 0x0F00) >> 8;
0x1DE8	0xF2000270  ADDW	R2, R0, #112
; eeData end address is: 0 (R0)
0x1DEC	0x8812    LDRH	R2, [R2, #0]
0x1DEE	0xF4026270  AND	R2, R2, #3840
0x1DF2	0xB292    UXTH	R2, R2
0x1DF4	0x0A12    LSRS	R2, R2, #8
; kvScale start address is: 32 (R8)
0x1DF6	0xFA5FF882  UXTB	R8, R2
;__irgrid2_driver.c, 661 :: 		for(i = 0; i < 24; i++)
; i start address is: 36 (R9)
0x1DFA	0xF2400900  MOVW	R9, #0
0x1DFE	0xFA0FF989  SXTH	R9, R9
; mlx90640 end address is: 4 (R1)
; kvScale end address is: 32 (R8)
; i end address is: 36 (R9)
0x1E02	0x460F    MOV	R7, R1
L___irgrid2_driver_ExtractKvPixelParameters94:
; i start address is: 36 (R9)
; kvScale start address is: 32 (R8)
; mlx90640 start address is: 28 (R7)
0x1E04	0xF1B90F18  CMP	R9, #24
0x1E08	0xDA5B    BGE	L___irgrid2_driver_ExtractKvPixelParameters95
;__irgrid2_driver.c, 663 :: 		for(j = 0; j < 32; j ++)
; j start address is: 40 (R10)
0x1E0A	0xF2400A00  MOVW	R10, #0
0x1E0E	0xFA0FFA8A  SXTH	R10, R10
; mlx90640 end address is: 28 (R7)
; kvScale end address is: 32 (R8)
; j end address is: 40 (R10)
; i end address is: 36 (R9)
L___irgrid2_driver_ExtractKvPixelParameters97:
; j start address is: 40 (R10)
; mlx90640 start address is: 28 (R7)
; kvScale start address is: 32 (R8)
; i start address is: 36 (R9)
0x1E12	0xF1BA0F20  CMP	R10, #32
0x1E16	0xDA4F    BGE	L___irgrid2_driver_ExtractKvPixelParameters98
;__irgrid2_driver.c, 665 :: 		p = 32 * i +j;
0x1E18	0xEA4F1249  LSL	R2, R9, #5
0x1E1C	0xB212    SXTH	R2, R2
0x1E1E	0xEB02060A  ADD	R6, R2, R10, LSL #0
0x1E22	0xB236    SXTH	R6, R6
; p start address is: 0 (R0)
0x1E24	0xB230    SXTH	R0, R6
;__irgrid2_driver.c, 666 :: 		split = 2*(p/32 - (p/64)*2) + p%2;
0x1E26	0x2220    MOVS	R2, #32
0x1E28	0xB212    SXTH	R2, R2
0x1E2A	0xFB96F3F2  SDIV	R3, R6, R2
0x1E2E	0xB21B    SXTH	R3, R3
0x1E30	0x2240    MOVS	R2, #64
0x1E32	0xB212    SXTH	R2, R2
0x1E34	0xFB96F2F2  SDIV	R2, R6, R2
0x1E38	0xB212    SXTH	R2, R2
0x1E3A	0x0052    LSLS	R2, R2, #1
0x1E3C	0xB212    SXTH	R2, R2
0x1E3E	0x1A9A    SUB	R2, R3, R2
0x1E40	0xB212    SXTH	R2, R2
0x1E42	0x0054    LSLS	R4, R2, #1
0x1E44	0xB224    SXTH	R4, R4
0x1E46	0x2302    MOVS	R3, #2
0x1E48	0xB21B    SXTH	R3, R3
0x1E4A	0xFB96F2F3  SDIV	R2, R6, R3
0x1E4E	0xFB036212  MLS	R2, R3, R2, R6
0x1E52	0xB212    SXTH	R2, R2
0x1E54	0x18A5    ADDS	R5, R4, R2
0x1E56	0xB22D    SXTH	R5, R5
;__irgrid2_driver.c, 667 :: 		mlx90640->kv[p] = KvT[split];
0x1E58	0xF6416244  MOVW	R2, #7748
0x1E5C	0x18BB    ADDS	R3, R7, R2
0x1E5E	0x00B2    LSLS	R2, R6, #2
0x1E60	0x189C    ADDS	R4, R3, R2
0x1E62	0xAB01    ADD	R3, SP, #4
0x1E64	0xB2EA    UXTB	R2, R5
0x1E66	0x189A    ADDS	R2, R3, R2
0x1E68	0xF9922000  LDRSB	R2, [R2, #0]
0x1E6C	0xEE002A10  VMOV	S0, R2
0x1E70	0xEEB80AC0  VCVT.F32.S32	S0, S0
0x1E74	0xED040A00  VSTR.32	S0, [R4, #0]
;__irgrid2_driver.c, 668 :: 		mlx90640->kv[p] = mlx90640->kv[p] / _pow(2,(double)kvScale);
0x1E78	0xF6416244  MOVW	R2, #7748
0x1E7C	0x18BB    ADDS	R3, R7, R2
0x1E7E	0x0082    LSLS	R2, R0, #2
; p end address is: 0 (R0)
0x1E80	0x189A    ADDS	R2, R3, R2
0x1E82	0x9203    STR	R2, [SP, #12]
0x1E84	0xED120A00  VLDR.32	S0, [R2, #0]
0x1E88	0xED8D0A02  VSTR.32	S0, [SP, #8]
0x1E8C	0xEE008A10  VMOV	S0, R8
0x1E90	0xEEB80A40  VCVT.F32.U32	S0, S0
0x1E94	0xEEF00A40  VMOV.F32	S1, S0
0x1E98	0xEEB00A00  VMOV.F32	S0, #2
0x1E9C	0xF7FFFCCE  BL	__irgrid2_driver__pow+0
0x1EA0	0xEDDD0A02  VLDR.32	S1, [SP, #8]
0x1EA4	0xEE800A80  VDIV.F32	S0, S1, S0
0x1EA8	0x9A03    LDR	R2, [SP, #12]
0x1EAA	0xED020A00  VSTR.32	S0, [R2, #0]
;__irgrid2_driver.c, 663 :: 		for(j = 0; j < 32; j ++)
0x1EAE	0xF10A0A01  ADD	R10, R10, #1
0x1EB2	0xFA0FFA8A  SXTH	R10, R10
;__irgrid2_driver.c, 669 :: 		}
; j end address is: 40 (R10)
0x1EB6	0xE7AC    B	L___irgrid2_driver_ExtractKvPixelParameters97
L___irgrid2_driver_ExtractKvPixelParameters98:
;__irgrid2_driver.c, 661 :: 		for(i = 0; i < 24; i++)
0x1EB8	0xF1090901  ADD	R9, R9, #1
0x1EBC	0xFA0FF989  SXTH	R9, R9
;__irgrid2_driver.c, 670 :: 		}
; mlx90640 end address is: 28 (R7)
; kvScale end address is: 32 (R8)
; i end address is: 36 (R9)
0x1EC0	0xE7A0    B	L___irgrid2_driver_ExtractKvPixelParameters94
L___irgrid2_driver_ExtractKvPixelParameters95:
;__irgrid2_driver.c, 671 :: 		}
L_end_ExtractKvPixelParameters:
0x1EC2	0xF8DDE000  LDR	LR, [SP, #0]
0x1EC6	0xB004    ADD	SP, SP, #16
0x1EC8	0x4770    BX	LR
; end of __irgrid2_driver_ExtractKvPixelParameters
__irgrid2_driver_ExtractCPParameters:
;__irgrid2_driver.c, 673 :: 		static void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
; mlx90640 start address is: 4 (R1)
; eeData start address is: 0 (R0)
0x20F0	0xB086    SUB	SP, SP, #24
0x20F2	0xF8CDE000  STR	LR, [SP, #0]
0x20F6	0x4606    MOV	R6, R0
0x20F8	0x460F    MOV	R7, R1
; mlx90640 end address is: 4 (R1)
; eeData end address is: 0 (R0)
; eeData start address is: 24 (R6)
; mlx90640 start address is: 28 (R7)
;__irgrid2_driver.c, 683 :: 		alphaScale = ((eeData[32] & 0xF000) >> 12) + 27;
0x20FA	0xF2060240  ADDW	R2, R6, #64
0x20FE	0x8812    LDRH	R2, [R2, #0]
0x2100	0xF4024270  AND	R2, R2, #61440
0x2104	0xB292    UXTH	R2, R2
0x2106	0x0B12    LSRS	R2, R2, #12
0x2108	0xB292    UXTH	R2, R2
0x210A	0x321B    ADDS	R2, #27
; alphaScale start address is: 0 (R0)
0x210C	0xB2D0    UXTB	R0, R2
;__irgrid2_driver.c, 685 :: 		offsetSP[0] = (eeData[58] & 0x03FF);
0x210E	0xAC03    ADD	R4, SP, #12
0x2110	0xF2060274  ADDW	R2, R6, #116
0x2114	0x8813    LDRH	R3, [R2, #0]
0x2116	0xF24032FF  MOVW	R2, #1023
0x211A	0xEA030202  AND	R2, R3, R2, LSL #0
0x211E	0x8022    STRH	R2, [R4, #0]
;__irgrid2_driver.c, 686 :: 		if (offsetSP[0] > 511)
0x2120	0xF9B43000  LDRSH	R3, [R4, #0]
0x2124	0xF24012FF  MOVW	R2, #511
0x2128	0x4293    CMP	R3, R2
0x212A	0xDD05    BLE	L___irgrid2_driver_ExtractCPParameters100
;__irgrid2_driver.c, 688 :: 		offsetSP[0] = offsetSP[0] - 1024;
0x212C	0xAB03    ADD	R3, SP, #12
0x212E	0xF9B32000  LDRSH	R2, [R3, #0]
0x2132	0xF5A26280  SUB	R2, R2, #1024
0x2136	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 689 :: 		}
L___irgrid2_driver_ExtractCPParameters100:
;__irgrid2_driver.c, 691 :: 		offsetSP[1] = (eeData[58] & 0xFC00) >> 10;
0x2138	0xAC03    ADD	R4, SP, #12
0x213A	0x1CA3    ADDS	R3, R4, #2
0x213C	0xF2060274  ADDW	R2, R6, #116
0x2140	0x8812    LDRH	R2, [R2, #0]
0x2142	0xF402427C  AND	R2, R2, #64512
0x2146	0xB292    UXTH	R2, R2
0x2148	0x0A92    LSRS	R2, R2, #10
0x214A	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 692 :: 		if (offsetSP[1] > 31)
0x214C	0x1CA2    ADDS	R2, R4, #2
0x214E	0xF9B22000  LDRSH	R2, [R2, #0]
0x2152	0x2A1F    CMP	R2, #31
0x2154	0xDD06    BLE	L___irgrid2_driver_ExtractCPParameters101
;__irgrid2_driver.c, 694 :: 		offsetSP[1] = offsetSP[1] - 64;
0x2156	0xAA03    ADD	R2, SP, #12
0x2158	0x1C93    ADDS	R3, R2, #2
0x215A	0x1C92    ADDS	R2, R2, #2
0x215C	0xF9B22000  LDRSH	R2, [R2, #0]
0x2160	0x3A40    SUBS	R2, #64
0x2162	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 695 :: 		}
L___irgrid2_driver_ExtractCPParameters101:
;__irgrid2_driver.c, 696 :: 		offsetSP[1] = offsetSP[1] + offsetSP[0];
0x2164	0xAD03    ADD	R5, SP, #12
0x2166	0x1CAC    ADDS	R4, R5, #2
0x2168	0x1CAA    ADDS	R2, R5, #2
0x216A	0xF9B23000  LDRSH	R3, [R2, #0]
0x216E	0xF9B52000  LDRSH	R2, [R5, #0]
0x2172	0x189A    ADDS	R2, R3, R2
0x2174	0x8022    STRH	R2, [R4, #0]
;__irgrid2_driver.c, 698 :: 		alphaSP[0] = (eeData[57] & 0x03FF);
0x2176	0xAC01    ADD	R4, SP, #4
0x2178	0xF2060272  ADDW	R2, R6, #114
0x217C	0x8813    LDRH	R3, [R2, #0]
0x217E	0xF24032FF  MOVW	R2, #1023
0x2182	0xEA030202  AND	R2, R3, R2, LSL #0
0x2186	0xB292    UXTH	R2, R2
0x2188	0xEE002A10  VMOV	S0, R2
0x218C	0xEEB80A40  VCVT.F32.U32	S0, S0
0x2190	0xED040A00  VSTR.32	S0, [R4, #0]
;__irgrid2_driver.c, 699 :: 		if (alphaSP[0] > 511)
0x2194	0xED540A00  VLDR.32	S1, [R4, #0]
0x2198	0x4A82    LDR	R2, [PC, #520]
0x219A	0xEE002A10  VMOV	S0, R2
0x219E	0xEEF40AC0  VCMPE.F32	S1, S0
0x21A2	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x21A6	0xDD0A    BLE	L___irgrid2_driver_ExtractCPParameters102
;__irgrid2_driver.c, 701 :: 		alphaSP[0] = alphaSP[0] - 1024;
0x21A8	0xAB01    ADD	R3, SP, #4
0x21AA	0xED530A00  VLDR.32	S1, [R3, #0]
0x21AE	0xF04F4289  MOV	R2, #1149239296
0x21B2	0xEE002A10  VMOV	S0, R2
0x21B6	0xEE300AC0  VSUB.F32	S0, S1, S0
0x21BA	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 702 :: 		}
L___irgrid2_driver_ExtractCPParameters102:
;__irgrid2_driver.c, 703 :: 		alphaSP[0] = alphaSP[0] /  _pow(2,(double)alphaScale);
0x21BE	0xAB01    ADD	R3, SP, #4
0x21C0	0x461A    MOV	R2, R3
0x21C2	0x9205    STR	R2, [SP, #20]
0x21C4	0xED130A00  VLDR.32	S0, [R3, #0]
0x21C8	0xED8D0A04  VSTR.32	S0, [SP, #16]
0x21CC	0xEE000A10  VMOV	S0, R0
0x21D0	0xEEB80A40  VCVT.F32.U32	S0, S0
; alphaScale end address is: 0 (R0)
0x21D4	0xEEF00A40  VMOV.F32	S1, S0
0x21D8	0xEEB00A00  VMOV.F32	S0, #2
0x21DC	0xF7FFFB2E  BL	__irgrid2_driver__pow+0
0x21E0	0xEDDD0A04  VLDR.32	S1, [SP, #16]
0x21E4	0xEE800A80  VDIV.F32	S0, S1, S0
0x21E8	0x9A05    LDR	R2, [SP, #20]
0x21EA	0xED020A00  VSTR.32	S0, [R2, #0]
;__irgrid2_driver.c, 705 :: 		alphaSP[1] = (eeData[57] & 0xFC00) >> 10;
0x21EE	0xAC01    ADD	R4, SP, #4
0x21F0	0x1D23    ADDS	R3, R4, #4
0x21F2	0xF2060272  ADDW	R2, R6, #114
0x21F6	0x8812    LDRH	R2, [R2, #0]
0x21F8	0xF402427C  AND	R2, R2, #64512
0x21FC	0xB292    UXTH	R2, R2
0x21FE	0x0A92    LSRS	R2, R2, #10
0x2200	0xB292    UXTH	R2, R2
0x2202	0xEE002A10  VMOV	S0, R2
0x2206	0xEEB80A40  VCVT.F32.U32	S0, S0
0x220A	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 706 :: 		if (alphaSP[1] > 31)
0x220E	0x1D22    ADDS	R2, R4, #4
0x2210	0xED520A00  VLDR.32	S1, [R2, #0]
0x2214	0xEEB30A0F  VMOV.F32	S0, #31
0x2218	0xEEF40AC0  VCMPE.F32	S1, S0
0x221C	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x2220	0xDD0C    BLE	L___irgrid2_driver_ExtractCPParameters103
;__irgrid2_driver.c, 708 :: 		alphaSP[1] = alphaSP[1] - 64;
0x2222	0xAA01    ADD	R2, SP, #4
0x2224	0x1D13    ADDS	R3, R2, #4
0x2226	0x1D12    ADDS	R2, R2, #4
0x2228	0xED520A00  VLDR.32	S1, [R2, #0]
0x222C	0xF04F4285  MOV	R2, #1115684864
0x2230	0xEE002A10  VMOV	S0, R2
0x2234	0xEE300AC0  VSUB.F32	S0, S1, S0
0x2238	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 709 :: 		}
L___irgrid2_driver_ExtractCPParameters103:
;__irgrid2_driver.c, 710 :: 		alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
0x223C	0xAC01    ADD	R4, SP, #4
0x223E	0x1D23    ADDS	R3, R4, #4
0x2240	0x1D22    ADDS	R2, R4, #4
0x2242	0xED520A00  VLDR.32	S1, [R2, #0]
0x2246	0xF04F4286  MOV	R2, #1124073472
0x224A	0xEE002A10  VMOV	S0, R2
0x224E	0xEEC00A80  VDIV.F32	S1, S1, S0
0x2252	0xEEB70A00  VMOV.F32	S0, #1
0x2256	0xEE700A20  VADD.F32	S1, S0, S1
0x225A	0xED140A00  VLDR.32	S0, [R4, #0]
0x225E	0xEE200A80  VMUL.F32	S0, S1, S0
0x2262	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 712 :: 		cpKta = (eeData[59] & 0x00FF);
0x2266	0xF2060276  ADDW	R2, R6, #118
0x226A	0x8812    LDRH	R2, [R2, #0]
0x226C	0xF00202FF  AND	R2, R2, #255
0x2270	0xB292    UXTH	R2, R2
0x2272	0xEE002A90  VMOV	S1, R2
0x2276	0xEEF80A60  VCVT.F32.U32	S1, S1
; cpKta start address is: 8 (S2)
0x227A	0xEEB01A60  VMOV.F32	S2, S1
;__irgrid2_driver.c, 713 :: 		if (cpKta > 127)
0x227E	0x4A4A    LDR	R2, [PC, #296]
0x2280	0xEE002A10  VMOV	S0, R2
0x2284	0xEEF40AC0  VCMPE.F32	S1, S0
0x2288	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x228C	0xDD0A    BLE	L___irgrid2_driver_ExtractCPParameters224
;__irgrid2_driver.c, 715 :: 		cpKta = cpKta - 256;
0x228E	0xF04F4287  MOV	R2, #1132462080
0x2292	0xEE002A10  VMOV	S0, R2
0x2296	0xEE310A40  VSUB.F32	S0, S2, S0
; cpKta end address is: 8 (S2)
; cpKta start address is: 4 (S1)
0x229A	0xEEF00A40  VMOV.F32	S1, S0
; cpKta end address is: 4 (S1)
0x229E	0xEEB03A60  VMOV.F32	S6, S1
;__irgrid2_driver.c, 716 :: 		}
0x22A2	0xE001    B	L___irgrid2_driver_ExtractCPParameters104
L___irgrid2_driver_ExtractCPParameters224:
;__irgrid2_driver.c, 713 :: 		if (cpKta > 127)
0x22A4	0xEEB03A41  VMOV.F32	S6, S2
;__irgrid2_driver.c, 716 :: 		}
L___irgrid2_driver_ExtractCPParameters104:
;__irgrid2_driver.c, 717 :: 		ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;
; cpKta start address is: 24 (S6)
0x22A8	0xF2060270  ADDW	R2, R6, #112
0x22AC	0x8812    LDRH	R2, [R2, #0]
0x22AE	0xF00202F0  AND	R2, R2, #240
0x22B2	0xB292    UXTH	R2, R2
0x22B4	0x0912    LSRS	R2, R2, #4
0x22B6	0xB292    UXTH	R2, R2
0x22B8	0xF2020308  ADDW	R3, R2, #8
0x22BC	0xB29B    UXTH	R3, R3
;__irgrid2_driver.c, 718 :: 		mlx90640->cpKta = cpKta / _pow(2,(double)ktaScale1);
0x22BE	0xF2070220  ADDW	R2, R7, #32
0x22C2	0x9204    STR	R2, [SP, #16]
0x22C4	0xEE003A10  VMOV	S0, R3
0x22C8	0xEEB80A40  VCVT.F32.U32	S0, S0
0x22CC	0xEEF00A40  VMOV.F32	S1, S0
0x22D0	0xEEB00A00  VMOV.F32	S0, #2
0x22D4	0xF7FFFAB2  BL	__irgrid2_driver__pow+0
0x22D8	0xEE830A00  VDIV.F32	S0, S6, S0
; cpKta end address is: 24 (S6)
0x22DC	0x9A04    LDR	R2, [SP, #16]
0x22DE	0xED020A00  VSTR.32	S0, [R2, #0]
;__irgrid2_driver.c, 720 :: 		cpKv = (eeData[59] & 0xFF00) >> 8;
0x22E2	0xF2060276  ADDW	R2, R6, #118
0x22E6	0x8812    LDRH	R2, [R2, #0]
0x22E8	0xF402427F  AND	R2, R2, #65280
0x22EC	0xB292    UXTH	R2, R2
0x22EE	0x0A12    LSRS	R2, R2, #8
0x22F0	0xB292    UXTH	R2, R2
0x22F2	0xEE002A90  VMOV	S1, R2
0x22F6	0xEEF80A60  VCVT.F32.U32	S1, S1
; cpKv start address is: 8 (S2)
0x22FA	0xEEB01A60  VMOV.F32	S2, S1
;__irgrid2_driver.c, 721 :: 		if (cpKv > 127)
0x22FE	0x4A2A    LDR	R2, [PC, #168]
0x2300	0xEE002A10  VMOV	S0, R2
0x2304	0xEEF40AC0  VCMPE.F32	S1, S0
0x2308	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x230C	0xDD0A    BLE	L___irgrid2_driver_ExtractCPParameters225
;__irgrid2_driver.c, 723 :: 		cpKv = cpKv - 256;
0x230E	0xF04F4287  MOV	R2, #1132462080
0x2312	0xEE002A10  VMOV	S0, R2
0x2316	0xEE310A40  VSUB.F32	S0, S2, S0
; cpKv end address is: 8 (S2)
; cpKv start address is: 4 (S1)
0x231A	0xEEF00A40  VMOV.F32	S1, S0
; cpKv end address is: 4 (S1)
0x231E	0xEEB03A60  VMOV.F32	S6, S1
;__irgrid2_driver.c, 724 :: 		}
0x2322	0xE001    B	L___irgrid2_driver_ExtractCPParameters105
L___irgrid2_driver_ExtractCPParameters225:
;__irgrid2_driver.c, 721 :: 		if (cpKv > 127)
0x2324	0xEEB03A41  VMOV.F32	S6, S2
;__irgrid2_driver.c, 724 :: 		}
L___irgrid2_driver_ExtractCPParameters105:
;__irgrid2_driver.c, 725 :: 		kvScale = (eeData[56] & 0x0F00) >> 8;
; cpKv start address is: 24 (S6)
0x2328	0xF2060270  ADDW	R2, R6, #112
; eeData end address is: 24 (R6)
0x232C	0x8812    LDRH	R2, [R2, #0]
0x232E	0xF4026270  AND	R2, R2, #3840
0x2332	0xB292    UXTH	R2, R2
0x2334	0x0A13    LSRS	R3, R2, #8
0x2336	0xB29B    UXTH	R3, R3
;__irgrid2_driver.c, 726 :: 		mlx90640->cpKv = cpKv / _pow(2,(double)kvScale);
0x2338	0xF207021C  ADDW	R2, R7, #28
0x233C	0x9204    STR	R2, [SP, #16]
0x233E	0xEE003A10  VMOV	S0, R3
0x2342	0xEEB80A40  VCVT.F32.U32	S0, S0
0x2346	0xEEF00A40  VMOV.F32	S1, S0
0x234A	0xEEB00A00  VMOV.F32	S0, #2
0x234E	0xF7FFFA75  BL	__irgrid2_driver__pow+0
0x2352	0xEE830A00  VDIV.F32	S0, S6, S0
; cpKv end address is: 24 (S6)
0x2356	0x9A04    LDR	R2, [SP, #16]
0x2358	0xED020A00  VSTR.32	S0, [R2, #0]
;__irgrid2_driver.c, 728 :: 		mlx90640->cpAlpha[0] = alphaSP[0];
0x235C	0xF6422244  MOVW	R2, #10820
0x2360	0x18BB    ADDS	R3, R7, R2
0x2362	0xAC01    ADD	R4, SP, #4
0x2364	0xED140A00  VLDR.32	S0, [R4, #0]
0x2368	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 729 :: 		mlx90640->cpAlpha[1] = alphaSP[1];
0x236C	0xF6422244  MOVW	R2, #10820
0x2370	0x18BA    ADDS	R2, R7, R2
0x2372	0x1D13    ADDS	R3, R2, #4
0x2374	0x1D22    ADDS	R2, R4, #4
0x2376	0xED120A00  VLDR.32	S0, [R2, #0]
0x237A	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 730 :: 		mlx90640->cpOffset[0] = offsetSP[0];
0x237E	0xF642224C  MOVW	R2, #10828
0x2382	0x18BB    ADDS	R3, R7, R2
0x2384	0xAC03    ADD	R4, SP, #12
0x2386	0xF9B42000  LDRSH	R2, [R4, #0]
0x238A	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 731 :: 		mlx90640->cpOffset[1] = offsetSP[1];
0x238C	0xF642224C  MOVW	R2, #10828
0x2390	0x18BA    ADDS	R2, R7, R2
; mlx90640 end address is: 28 (R7)
0x2392	0x1C93    ADDS	R3, R2, #2
0x2394	0x1CA2    ADDS	R2, R4, #2
0x2396	0xF9B22000  LDRSH	R2, [R2, #0]
0x239A	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 732 :: 		}
L_end_ExtractCPParameters:
0x239C	0xF8DDE000  LDR	LR, [SP, #0]
0x23A0	0xB006    ADD	SP, SP, #24
0x23A2	0x4770    BX	LR
0x23A4	0x800043FF  	#1140817920
0x23A8	0x000042FE  	#1123942400
; end of __irgrid2_driver_ExtractCPParameters
__irgrid2_driver_ExtractCILCParameters:
;__irgrid2_driver.c, 734 :: 		static void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
; mlx90640 start address is: 4 (R1)
; eeData start address is: 0 (R0)
0x2594	0xB083    SUB	SP, SP, #12
; mlx90640 end address is: 4 (R1)
; eeData end address is: 0 (R0)
; eeData start address is: 0 (R0)
; mlx90640 start address is: 4 (R1)
;__irgrid2_driver.c, 739 :: 		calibrationModeEE = (eeData[10] & 0x0800) >> 4;
0x2596	0xF2000214  ADDW	R2, R0, #20
0x259A	0x8812    LDRH	R2, [R2, #0]
0x259C	0xF4026200  AND	R2, R2, #2048
0x25A0	0xB292    UXTH	R2, R2
0x25A2	0x0912    LSRS	R2, R2, #4
;__irgrid2_driver.c, 740 :: 		calibrationModeEE = calibrationModeEE ^ 0x80;
0x25A4	0xB2D2    UXTB	R2, R2
0x25A6	0xF0820280  EOR	R2, R2, #128
; calibrationModeEE start address is: 20 (R5)
0x25AA	0xB2D5    UXTB	R5, R2
;__irgrid2_driver.c, 742 :: 		ilChessC[0] = (eeData[53] & 0x003F);
0x25AC	0xAB00    ADD	R3, SP, #0
0x25AE	0xF200026A  ADDW	R2, R0, #106
0x25B2	0x8812    LDRH	R2, [R2, #0]
0x25B4	0xF002023F  AND	R2, R2, #63
0x25B8	0xB292    UXTH	R2, R2
0x25BA	0xEE002A10  VMOV	S0, R2
0x25BE	0xEEB80A40  VCVT.F32.U32	S0, S0
0x25C2	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 743 :: 		if (ilChessC[0] > 31)
0x25C6	0xED530A00  VLDR.32	S1, [R3, #0]
0x25CA	0xEEB30A0F  VMOV.F32	S0, #31
0x25CE	0xEEF40AC0  VCMPE.F32	S1, S0
0x25D2	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x25D6	0xDD0A    BLE	L___irgrid2_driver_ExtractCILCParameters106
;__irgrid2_driver.c, 745 :: 		ilChessC[0] = ilChessC[0] - 64;
0x25D8	0xAB00    ADD	R3, SP, #0
0x25DA	0xED530A00  VLDR.32	S1, [R3, #0]
0x25DE	0xF04F4285  MOV	R2, #1115684864
0x25E2	0xEE002A10  VMOV	S0, R2
0x25E6	0xEE300AC0  VSUB.F32	S0, S1, S0
0x25EA	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 746 :: 		}
L___irgrid2_driver_ExtractCILCParameters106:
;__irgrid2_driver.c, 747 :: 		ilChessC[0] = ilChessC[0] / 16.0f;
0x25EE	0xAC00    ADD	R4, SP, #0
0x25F0	0xED540A00  VLDR.32	S1, [R4, #0]
0x25F4	0xEEB30A00  VMOV.F32	S0, #16
0x25F8	0xEE800A80  VDIV.F32	S0, S1, S0
0x25FC	0xED040A00  VSTR.32	S0, [R4, #0]
;__irgrid2_driver.c, 749 :: 		ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
0x2600	0x1D23    ADDS	R3, R4, #4
0x2602	0xF200026A  ADDW	R2, R0, #106
0x2606	0x8812    LDRH	R2, [R2, #0]
0x2608	0xF40262F8  AND	R2, R2, #1984
0x260C	0xB292    UXTH	R2, R2
0x260E	0x0992    LSRS	R2, R2, #6
0x2610	0xB292    UXTH	R2, R2
0x2612	0xEE002A10  VMOV	S0, R2
0x2616	0xEEB80A40  VCVT.F32.U32	S0, S0
0x261A	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 750 :: 		if (ilChessC[1] > 15)
0x261E	0x1D22    ADDS	R2, R4, #4
0x2620	0xED520A00  VLDR.32	S1, [R2, #0]
0x2624	0xEEB20A0E  VMOV.F32	S0, #15
0x2628	0xEEF40AC0  VCMPE.F32	S1, S0
0x262C	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x2630	0xDD0C    BLE	L___irgrid2_driver_ExtractCILCParameters107
;__irgrid2_driver.c, 752 :: 		ilChessC[1] = ilChessC[1] - 32;
0x2632	0xAA00    ADD	R2, SP, #0
0x2634	0x1D13    ADDS	R3, R2, #4
0x2636	0x1D12    ADDS	R2, R2, #4
0x2638	0xED520A00  VLDR.32	S1, [R2, #0]
0x263C	0xF04F4284  MOV	R2, #1107296256
0x2640	0xEE002A10  VMOV	S0, R2
0x2644	0xEE300AC0  VSUB.F32	S0, S1, S0
0x2648	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 753 :: 		}
L___irgrid2_driver_ExtractCILCParameters107:
;__irgrid2_driver.c, 754 :: 		ilChessC[1] = ilChessC[1] / 2.0f;
0x264C	0xAC00    ADD	R4, SP, #0
0x264E	0x1D23    ADDS	R3, R4, #4
0x2650	0x1D22    ADDS	R2, R4, #4
0x2652	0xED520A00  VLDR.32	S1, [R2, #0]
0x2656	0xEEB00A00  VMOV.F32	S0, #2
0x265A	0xEE800A80  VDIV.F32	S0, S1, S0
0x265E	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 756 :: 		ilChessC[2] = (eeData[53] & 0xF800) >> 11;
0x2662	0xF2040308  ADDW	R3, R4, #8
0x2666	0xF200026A  ADDW	R2, R0, #106
; eeData end address is: 0 (R0)
0x266A	0x8812    LDRH	R2, [R2, #0]
0x266C	0xF4024278  AND	R2, R2, #63488
0x2670	0xB292    UXTH	R2, R2
0x2672	0x0AD2    LSRS	R2, R2, #11
0x2674	0xB292    UXTH	R2, R2
0x2676	0xEE002A10  VMOV	S0, R2
0x267A	0xEEB80A40  VCVT.F32.U32	S0, S0
0x267E	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 757 :: 		if (ilChessC[2] > 15)
0x2682	0xF2040208  ADDW	R2, R4, #8
0x2686	0xED520A00  VLDR.32	S1, [R2, #0]
0x268A	0xEEB20A0E  VMOV.F32	S0, #15
0x268E	0xEEF40AC0  VCMPE.F32	S1, S0
0x2692	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x2696	0xDD0D    BLE	L___irgrid2_driver_ExtractCILCParameters108
;__irgrid2_driver.c, 759 :: 		ilChessC[2] = ilChessC[2] - 32;
0x2698	0xAA00    ADD	R2, SP, #0
0x269A	0xF2020308  ADDW	R3, R2, #8
0x269E	0x3208    ADDS	R2, #8
0x26A0	0xED520A00  VLDR.32	S1, [R2, #0]
0x26A4	0xF04F4284  MOV	R2, #1107296256
0x26A8	0xEE002A10  VMOV	S0, R2
0x26AC	0xEE300AC0  VSUB.F32	S0, S1, S0
0x26B0	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 760 :: 		}
L___irgrid2_driver_ExtractCILCParameters108:
;__irgrid2_driver.c, 761 :: 		ilChessC[2] = ilChessC[2] / 8.0f;
0x26B4	0xAC00    ADD	R4, SP, #0
0x26B6	0xF2040308  ADDW	R3, R4, #8
0x26BA	0xF2040208  ADDW	R2, R4, #8
0x26BE	0xED520A00  VLDR.32	S1, [R2, #0]
0x26C2	0xEEB20A00  VMOV.F32	S0, #8
0x26C6	0xEE800A80  VDIV.F32	S0, S1, S0
0x26CA	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 763 :: 		mlx90640->calibrationModeEE = calibrationModeEE;
0x26CE	0xF2010225  ADDW	R2, R1, #37
0x26D2	0x7015    STRB	R5, [R2, #0]
; calibrationModeEE end address is: 20 (R5)
;__irgrid2_driver.c, 764 :: 		mlx90640->ilChessC[0] = ilChessC[0];
0x26D4	0xF6422250  MOVW	R2, #10832
0x26D8	0x188B    ADDS	R3, R1, R2
0x26DA	0xED140A00  VLDR.32	S0, [R4, #0]
0x26DE	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 765 :: 		mlx90640->ilChessC[1] = ilChessC[1];
0x26E2	0xF6422250  MOVW	R2, #10832
0x26E6	0x188A    ADDS	R2, R1, R2
0x26E8	0x1D13    ADDS	R3, R2, #4
0x26EA	0x1D22    ADDS	R2, R4, #4
0x26EC	0xED120A00  VLDR.32	S0, [R2, #0]
0x26F0	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 766 :: 		mlx90640->ilChessC[2] = ilChessC[2];
0x26F4	0xF6422250  MOVW	R2, #10832
0x26F8	0x188A    ADDS	R2, R1, R2
; mlx90640 end address is: 4 (R1)
0x26FA	0xF2020308  ADDW	R3, R2, #8
0x26FE	0xF2040208  ADDW	R2, R4, #8
0x2702	0xED120A00  VLDR.32	S0, [R2, #0]
0x2706	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 767 :: 		}
L_end_ExtractCILCParameters:
0x270A	0xB003    ADD	SP, SP, #12
0x270C	0x4770    BX	LR
; end of __irgrid2_driver_ExtractCILCParameters
__irgrid2_driver_ExtractDeviatingPixels:
;__irgrid2_driver.c, 790 :: 		static int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
; mlx90640 start address is: 4 (R1)
; eeData start address is: 0 (R0)
0x23AC	0xB082    SUB	SP, SP, #8
0x23AE	0xF8CDE000  STR	LR, [SP, #0]
; mlx90640 end address is: 4 (R1)
; eeData end address is: 0 (R0)
; eeData start address is: 0 (R0)
; mlx90640 start address is: 4 (R1)
;__irgrid2_driver.c, 792 :: 		uint16_t pixCnt = 0;
;__irgrid2_driver.c, 793 :: 		uint16_t brokenPixCnt = 0;
; brokenPixCnt start address is: 24 (R6)
0x23B2	0xF2400600  MOVW	R6, #0
;__irgrid2_driver.c, 794 :: 		uint16_t outlierPixCnt = 0;
; outlierPixCnt start address is: 8 (R2)
0x23B6	0xF2400200  MOVW	R2, #0
;__irgrid2_driver.c, 795 :: 		int warn = 0;
; warn start address is: 12 (R3)
0x23BA	0xF2400300  MOVW	R3, #0
0x23BE	0xB21B    SXTH	R3, R3
;__irgrid2_driver.c, 798 :: 		for(pixCnt = 0; pixCnt<5; pixCnt++)
; pixCnt start address is: 28 (R7)
0x23C0	0x2700    MOVS	R7, #0
; eeData end address is: 0 (R0)
; mlx90640 end address is: 4 (R1)
; outlierPixCnt end address is: 8 (R2)
; warn end address is: 12 (R3)
; pixCnt end address is: 28 (R7)
; brokenPixCnt end address is: 24 (R6)
0x23C2	0x4605    MOV	R5, R0
0x23C4	0xB290    UXTH	R0, R2
0x23C6	0x460C    MOV	R4, R1
0x23C8	0xB219    SXTH	R1, R3
L___irgrid2_driver_ExtractDeviatingPixels118:
; pixCnt start address is: 28 (R7)
; warn start address is: 4 (R1)
; outlierPixCnt start address is: 0 (R0)
; brokenPixCnt start address is: 24 (R6)
; mlx90640 start address is: 16 (R4)
; eeData start address is: 20 (R5)
0x23CA	0x2F05    CMP	R7, #5
0x23CC	0xD212    BCS	L___irgrid2_driver_ExtractDeviatingPixels119
;__irgrid2_driver.c, 800 :: 		mlx90640->brokenPixels[pixCnt] = 0xFFFF;
0x23CE	0xF642225C  MOVW	R2, #10844
0x23D2	0x18A3    ADDS	R3, R4, R2
0x23D4	0x007A    LSLS	R2, R7, #1
0x23D6	0x189B    ADDS	R3, R3, R2
0x23D8	0xF64F72FF  MOVW	R2, #65535
0x23DC	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 801 :: 		mlx90640->outlierPixels[pixCnt] = 0xFFFF;
0x23DE	0xF6422266  MOVW	R2, #10854
0x23E2	0x18A3    ADDS	R3, R4, R2
0x23E4	0x007A    LSLS	R2, R7, #1
0x23E6	0x189B    ADDS	R3, R3, R2
0x23E8	0xF64F72FF  MOVW	R2, #65535
0x23EC	0x801A    STRH	R2, [R3, #0]
;__irgrid2_driver.c, 798 :: 		for(pixCnt = 0; pixCnt<5; pixCnt++)
0x23EE	0x1C7F    ADDS	R7, R7, #1
0x23F0	0xB2BF    UXTH	R7, R7
;__irgrid2_driver.c, 802 :: 		}
; pixCnt end address is: 28 (R7)
0x23F2	0xE7EA    B	L___irgrid2_driver_ExtractDeviatingPixels118
L___irgrid2_driver_ExtractDeviatingPixels119:
;__irgrid2_driver.c, 804 :: 		pixCnt = 0;
; pixCnt start address is: 8 (R2)
0x23F4	0x2200    MOVS	R2, #0
; outlierPixCnt end address is: 0 (R0)
; mlx90640 end address is: 16 (R4)
; eeData end address is: 20 (R5)
; pixCnt end address is: 8 (R2)
; brokenPixCnt end address is: 24 (R6)
; warn end address is: 4 (R1)
0x23F6	0xB287    UXTH	R7, R0
0x23F8	0x4620    MOV	R0, R4
0x23FA	0x462C    MOV	R4, R5
0x23FC	0xB295    UXTH	R5, R2
;__irgrid2_driver.c, 805 :: 		while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
L___irgrid2_driver_ExtractDeviatingPixels121:
; pixCnt start address is: 20 (R5)
; eeData start address is: 16 (R4)
; eeData start address is: 16 (R4)
; eeData end address is: 16 (R4)
; mlx90640 start address is: 0 (R0)
; brokenPixCnt start address is: 24 (R6)
; outlierPixCnt start address is: 28 (R7)
; warn start address is: 4 (R1)
0x23FE	0xF5B57F40  CMP	R5, #768
0x2402	0xD22A    BCS	L___irgrid2_driver_ExtractDeviatingPixels238
; eeData end address is: 16 (R4)
; eeData start address is: 16 (R4)
0x2404	0x2E05    CMP	R6, #5
0x2406	0xD228    BCS	L___irgrid2_driver_ExtractDeviatingPixels237
0x2408	0x2F05    CMP	R7, #5
0x240A	0xD226    BCS	L___irgrid2_driver_ExtractDeviatingPixels236
L___irgrid2_driver_ExtractDeviatingPixels235:
;__irgrid2_driver.c, 807 :: 		if(eeData[pixCnt+64] == 0)
0x240C	0xF2050240  ADDW	R2, R5, #64
0x2410	0xB292    UXTH	R2, R2
0x2412	0x0052    LSLS	R2, R2, #1
0x2414	0x18A2    ADDS	R2, R4, R2
0x2416	0x8812    LDRH	R2, [R2, #0]
0x2418	0xB942    CBNZ	R2, L___irgrid2_driver_ExtractDeviatingPixels125
;__irgrid2_driver.c, 809 :: 		mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
0x241A	0xF642225C  MOVW	R2, #10844
0x241E	0x1883    ADDS	R3, R0, R2
0x2420	0x0072    LSLS	R2, R6, #1
0x2422	0x189A    ADDS	R2, R3, R2
0x2424	0x8015    STRH	R5, [R2, #0]
;__irgrid2_driver.c, 810 :: 		brokenPixCnt = brokenPixCnt + 1;
0x2426	0x1C76    ADDS	R6, R6, #1
0x2428	0xB2B6    UXTH	R6, R6
;__irgrid2_driver.c, 811 :: 		}
0x242A	0xE013    B	L___irgrid2_driver_ExtractDeviatingPixels126
L___irgrid2_driver_ExtractDeviatingPixels125:
;__irgrid2_driver.c, 812 :: 		else if((eeData[pixCnt+64] & 0x0001) != 0)
0x242C	0xF2050240  ADDW	R2, R5, #64
0x2430	0xB292    UXTH	R2, R2
0x2432	0x0052    LSLS	R2, R2, #1
0x2434	0x18A2    ADDS	R2, R4, R2
0x2436	0x8812    LDRH	R2, [R2, #0]
0x2438	0xF0020201  AND	R2, R2, #1
0x243C	0xB292    UXTH	R2, R2
0x243E	0xB14A    CBZ	R2, L___irgrid2_driver_ExtractDeviatingPixels239
;__irgrid2_driver.c, 814 :: 		mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
0x2440	0xF6422266  MOVW	R2, #10854
0x2444	0x1883    ADDS	R3, R0, R2
0x2446	0x007A    LSLS	R2, R7, #1
0x2448	0x189A    ADDS	R2, R3, R2
0x244A	0x8015    STRH	R5, [R2, #0]
;__irgrid2_driver.c, 815 :: 		outlierPixCnt = outlierPixCnt + 1;
0x244C	0x1C7A    ADDS	R2, R7, #1
; outlierPixCnt end address is: 28 (R7)
; outlierPixCnt start address is: 12 (R3)
0x244E	0xB293    UXTH	R3, R2
; outlierPixCnt end address is: 12 (R3)
0x2450	0xB29F    UXTH	R7, R3
;__irgrid2_driver.c, 816 :: 		}
0x2452	0xE7FF    B	L___irgrid2_driver_ExtractDeviatingPixels127
L___irgrid2_driver_ExtractDeviatingPixels239:
;__irgrid2_driver.c, 812 :: 		else if((eeData[pixCnt+64] & 0x0001) != 0)
;__irgrid2_driver.c, 816 :: 		}
L___irgrid2_driver_ExtractDeviatingPixels127:
; outlierPixCnt start address is: 28 (R7)
; brokenPixCnt end address is: 24 (R6)
; outlierPixCnt end address is: 28 (R7)
L___irgrid2_driver_ExtractDeviatingPixels126:
;__irgrid2_driver.c, 818 :: 		pixCnt = pixCnt + 1;
; outlierPixCnt start address is: 28 (R7)
; brokenPixCnt start address is: 24 (R6)
0x2454	0x1C6D    ADDS	R5, R5, #1
0x2456	0xB2AD    UXTH	R5, R5
;__irgrid2_driver.c, 820 :: 		}
; eeData end address is: 16 (R4)
; pixCnt end address is: 20 (R5)
0x2458	0xE7D1    B	L___irgrid2_driver_ExtractDeviatingPixels121
;__irgrid2_driver.c, 805 :: 		while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
L___irgrid2_driver_ExtractDeviatingPixels238:
L___irgrid2_driver_ExtractDeviatingPixels237:
L___irgrid2_driver_ExtractDeviatingPixels236:
;__irgrid2_driver.c, 822 :: 		if(brokenPixCnt > 4)
0x245A	0x2E04    CMP	R6, #4
0x245C	0xD903    BLS	L___irgrid2_driver_ExtractDeviatingPixels128
; mlx90640 end address is: 0 (R0)
; brokenPixCnt end address is: 24 (R6)
; outlierPixCnt end address is: 28 (R7)
; warn end address is: 4 (R1)
;__irgrid2_driver.c, 824 :: 		warn = -3;
; warn start address is: 0 (R0)
0x245E	0xF64F70FD  MOVW	R0, #65533
0x2462	0xB200    SXTH	R0, R0
;__irgrid2_driver.c, 825 :: 		}
; warn end address is: 0 (R0)
0x2464	0xE091    B	L___irgrid2_driver_ExtractDeviatingPixels129
L___irgrid2_driver_ExtractDeviatingPixels128:
;__irgrid2_driver.c, 826 :: 		else if(outlierPixCnt > 4)
; warn start address is: 4 (R1)
; outlierPixCnt start address is: 28 (R7)
; brokenPixCnt start address is: 24 (R6)
; mlx90640 start address is: 0 (R0)
0x2466	0x2F04    CMP	R7, #4
0x2468	0xD903    BLS	L___irgrid2_driver_ExtractDeviatingPixels130
; mlx90640 end address is: 0 (R0)
; brokenPixCnt end address is: 24 (R6)
; outlierPixCnt end address is: 28 (R7)
; warn end address is: 4 (R1)
;__irgrid2_driver.c, 828 :: 		warn = -4;
; warn start address is: 0 (R0)
0x246A	0xF64F70FC  MOVW	R0, #65532
0x246E	0xB200    SXTH	R0, R0
;__irgrid2_driver.c, 829 :: 		}
; warn end address is: 0 (R0)
0x2470	0xE08B    B	L___irgrid2_driver_ExtractDeviatingPixels131
L___irgrid2_driver_ExtractDeviatingPixels130:
;__irgrid2_driver.c, 830 :: 		else if((brokenPixCnt + outlierPixCnt) > 4)
; warn start address is: 4 (R1)
; outlierPixCnt start address is: 28 (R7)
; brokenPixCnt start address is: 24 (R6)
; mlx90640 start address is: 0 (R0)
0x2472	0x19F2    ADDS	R2, R6, R7
0x2474	0xB292    UXTH	R2, R2
0x2476	0x2A04    CMP	R2, #4
0x2478	0xD903    BLS	L___irgrid2_driver_ExtractDeviatingPixels132
; mlx90640 end address is: 0 (R0)
; brokenPixCnt end address is: 24 (R6)
; outlierPixCnt end address is: 28 (R7)
; warn end address is: 4 (R1)
;__irgrid2_driver.c, 832 :: 		warn = -5;
; warn start address is: 0 (R0)
0x247A	0xF64F70FB  MOVW	R0, #65531
0x247E	0xB200    SXTH	R0, R0
;__irgrid2_driver.c, 833 :: 		}
; warn end address is: 0 (R0)
0x2480	0xE083    B	L___irgrid2_driver_ExtractDeviatingPixels133
L___irgrid2_driver_ExtractDeviatingPixels132:
;__irgrid2_driver.c, 836 :: 		for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
; warn start address is: 4 (R1)
; outlierPixCnt start address is: 28 (R7)
; brokenPixCnt start address is: 24 (R6)
; pixCnt start address is: 8 (R2)
; mlx90640 start address is: 0 (R0)
0x2482	0x2200    MOVS	R2, #0
; mlx90640 end address is: 0 (R0)
; pixCnt end address is: 8 (R2)
; brokenPixCnt end address is: 24 (R6)
; outlierPixCnt end address is: 28 (R7)
; warn end address is: 4 (R1)
0x2484	0xFA1FF887  UXTH	R8, R7
0x2488	0xB2B7    UXTH	R7, R6
0x248A	0x4606    MOV	R6, R0
0x248C	0xB290    UXTH	R0, R2
L___irgrid2_driver_ExtractDeviatingPixels134:
; pixCnt start address is: 0 (R0)
; warn start address is: 4 (R1)
; outlierPixCnt start address is: 32 (R8)
; brokenPixCnt start address is: 28 (R7)
; mlx90640 start address is: 24 (R6)
0x248E	0x42B8    CMP	R0, R7
0x2490	0xD21F    BCS	L___irgrid2_driver_ExtractDeviatingPixels135
;__irgrid2_driver.c, 838 :: 		for(i=pixCnt+1; i<brokenPixCnt; i++)
0x2492	0x1C45    ADDS	R5, R0, #1
0x2494	0xB22D    SXTH	R5, R5
; i start address is: 20 (R5)
; mlx90640 end address is: 24 (R6)
; outlierPixCnt end address is: 32 (R8)
; brokenPixCnt end address is: 28 (R7)
; i end address is: 20 (R5)
; pixCnt end address is: 0 (R0)
; warn end address is: 4 (R1)
0x2496	0xFA1FF980  UXTH	R9, R0
L___irgrid2_driver_ExtractDeviatingPixels137:
; i start address is: 20 (R5)
; mlx90640 start address is: 24 (R6)
; brokenPixCnt start address is: 28 (R7)
; outlierPixCnt start address is: 32 (R8)
; warn start address is: 4 (R1)
; pixCnt start address is: 36 (R9)
0x249A	0x42BD    CMP	R5, R7
0x249C	0xD215    BCS	L___irgrid2_driver_ExtractDeviatingPixels138
; warn end address is: 4 (R1)
;__irgrid2_driver.c, 840 :: 		warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
0x249E	0xF642225C  MOVW	R2, #10844
0x24A2	0x18B4    ADDS	R4, R6, R2
0x24A4	0x006A    LSLS	R2, R5, #1
0x24A6	0x18A2    ADDS	R2, R4, R2
0x24A8	0x8812    LDRH	R2, [R2, #0]
0x24AA	0xB293    UXTH	R3, R2
0x24AC	0xEA4F0249  LSL	R2, R9, #1
0x24B0	0x18A2    ADDS	R2, R4, R2
0x24B2	0x8812    LDRH	R2, [R2, #0]
0x24B4	0xB299    UXTH	R1, R3
0x24B6	0xB290    UXTH	R0, R2
0x24B8	0xF7FFFA14  BL	__irgrid2_driver_CheckAdjacentPixels+0
; warn start address is: 4 (R1)
0x24BC	0xB201    SXTH	R1, R0
;__irgrid2_driver.c, 841 :: 		if(warn != 0)
0x24BE	0xB108    CBZ	R0, L___irgrid2_driver_ExtractDeviatingPixels140
; mlx90640 end address is: 24 (R6)
; outlierPixCnt end address is: 32 (R8)
; brokenPixCnt end address is: 28 (R7)
; i end address is: 20 (R5)
; pixCnt end address is: 36 (R9)
;__irgrid2_driver.c, 843 :: 		return warn;
0x24C0	0xB208    SXTH	R0, R1
; warn end address is: 4 (R1)
0x24C2	0xE062    B	L_end_ExtractDeviatingPixels
;__irgrid2_driver.c, 844 :: 		}
L___irgrid2_driver_ExtractDeviatingPixels140:
;__irgrid2_driver.c, 838 :: 		for(i=pixCnt+1; i<brokenPixCnt; i++)
; pixCnt start address is: 36 (R9)
; warn start address is: 4 (R1)
; i start address is: 20 (R5)
; brokenPixCnt start address is: 28 (R7)
; outlierPixCnt start address is: 32 (R8)
; mlx90640 start address is: 24 (R6)
0x24C4	0x1C6D    ADDS	R5, R5, #1
0x24C6	0xB22D    SXTH	R5, R5
;__irgrid2_driver.c, 845 :: 		}
; i end address is: 20 (R5)
0x24C8	0xE7E7    B	L___irgrid2_driver_ExtractDeviatingPixels137
L___irgrid2_driver_ExtractDeviatingPixels138:
;__irgrid2_driver.c, 836 :: 		for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
0x24CA	0xF1090001  ADD	R0, R9, #1
0x24CE	0xB280    UXTH	R0, R0
; pixCnt end address is: 36 (R9)
; pixCnt start address is: 0 (R0)
;__irgrid2_driver.c, 846 :: 		}
; pixCnt end address is: 0 (R0)
0x24D0	0xE7DD    B	L___irgrid2_driver_ExtractDeviatingPixels134
L___irgrid2_driver_ExtractDeviatingPixels135:
;__irgrid2_driver.c, 848 :: 		for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
; pixCnt start address is: 0 (R0)
0x24D2	0x2000    MOVS	R0, #0
; mlx90640 end address is: 24 (R6)
; outlierPixCnt end address is: 32 (R8)
; brokenPixCnt end address is: 28 (R7)
; pixCnt end address is: 0 (R0)
; warn end address is: 4 (R1)
0x24D4	0x9601    STR	R6, [SP, #4]
0x24D6	0xFA1FF688  UXTH	R6, R8
0x24DA	0xF8DD8004  LDR	R8, [SP, #4]
L___irgrid2_driver_ExtractDeviatingPixels141:
; pixCnt start address is: 0 (R0)
; mlx90640 start address is: 32 (R8)
; brokenPixCnt start address is: 28 (R7)
; outlierPixCnt start address is: 24 (R6)
; warn start address is: 4 (R1)
0x24DE	0x42B0    CMP	R0, R6
0x24E0	0xD220    BCS	L___irgrid2_driver_ExtractDeviatingPixels142
;__irgrid2_driver.c, 850 :: 		for(i=pixCnt+1; i<outlierPixCnt; i++)
0x24E2	0x1C45    ADDS	R5, R0, #1
0x24E4	0xB22D    SXTH	R5, R5
; i start address is: 20 (R5)
; outlierPixCnt end address is: 24 (R6)
; brokenPixCnt end address is: 28 (R7)
; mlx90640 end address is: 32 (R8)
; i end address is: 20 (R5)
; pixCnt end address is: 0 (R0)
; warn end address is: 4 (R1)
0x24E6	0xFA1FF980  UXTH	R9, R0
L___irgrid2_driver_ExtractDeviatingPixels144:
; i start address is: 20 (R5)
; warn start address is: 4 (R1)
; outlierPixCnt start address is: 24 (R6)
; brokenPixCnt start address is: 28 (R7)
; mlx90640 start address is: 32 (R8)
; pixCnt start address is: 36 (R9)
0x24EA	0x42B5    CMP	R5, R6
0x24EC	0xD216    BCS	L___irgrid2_driver_ExtractDeviatingPixels145
; warn end address is: 4 (R1)
;__irgrid2_driver.c, 852 :: 		warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
0x24EE	0xF6422266  MOVW	R2, #10854
0x24F2	0xEB080402  ADD	R4, R8, R2, LSL #0
0x24F6	0x006A    LSLS	R2, R5, #1
0x24F8	0x18A2    ADDS	R2, R4, R2
0x24FA	0x8812    LDRH	R2, [R2, #0]
0x24FC	0xB293    UXTH	R3, R2
0x24FE	0xEA4F0249  LSL	R2, R9, #1
0x2502	0x18A2    ADDS	R2, R4, R2
0x2504	0x8812    LDRH	R2, [R2, #0]
0x2506	0xB299    UXTH	R1, R3
0x2508	0xB290    UXTH	R0, R2
0x250A	0xF7FFF9EB  BL	__irgrid2_driver_CheckAdjacentPixels+0
; warn start address is: 4 (R1)
0x250E	0xB201    SXTH	R1, R0
;__irgrid2_driver.c, 853 :: 		if(warn != 0)
0x2510	0xB108    CBZ	R0, L___irgrid2_driver_ExtractDeviatingPixels147
; outlierPixCnt end address is: 24 (R6)
; brokenPixCnt end address is: 28 (R7)
; mlx90640 end address is: 32 (R8)
; i end address is: 20 (R5)
; pixCnt end address is: 36 (R9)
;__irgrid2_driver.c, 855 :: 		return warn;
0x2512	0xB208    SXTH	R0, R1
; warn end address is: 4 (R1)
0x2514	0xE039    B	L_end_ExtractDeviatingPixels
;__irgrid2_driver.c, 856 :: 		}
L___irgrid2_driver_ExtractDeviatingPixels147:
;__irgrid2_driver.c, 850 :: 		for(i=pixCnt+1; i<outlierPixCnt; i++)
; pixCnt start address is: 36 (R9)
; warn start address is: 4 (R1)
; i start address is: 20 (R5)
; mlx90640 start address is: 32 (R8)
; brokenPixCnt start address is: 28 (R7)
; outlierPixCnt start address is: 24 (R6)
0x2516	0x1C6D    ADDS	R5, R5, #1
0x2518	0xB22D    SXTH	R5, R5
;__irgrid2_driver.c, 857 :: 		}
; i end address is: 20 (R5)
0x251A	0xE7E6    B	L___irgrid2_driver_ExtractDeviatingPixels144
L___irgrid2_driver_ExtractDeviatingPixels145:
;__irgrid2_driver.c, 848 :: 		for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
0x251C	0xF1090201  ADD	R2, R9, #1
; pixCnt end address is: 36 (R9)
; pixCnt start address is: 0 (R0)
0x2520	0xB290    UXTH	R0, R2
;__irgrid2_driver.c, 858 :: 		}
; pixCnt end address is: 0 (R0)
0x2522	0xE7DC    B	L___irgrid2_driver_ExtractDeviatingPixels141
L___irgrid2_driver_ExtractDeviatingPixels142:
;__irgrid2_driver.c, 860 :: 		for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
; pixCnt start address is: 36 (R9)
0x2524	0xF2400900  MOVW	R9, #0
; outlierPixCnt end address is: 24 (R6)
; brokenPixCnt end address is: 28 (R7)
; mlx90640 end address is: 32 (R8)
; warn end address is: 4 (R1)
; pixCnt end address is: 36 (R9)
0x2528	0xF8AD6004  STRH	R6, [SP, #4]
0x252C	0x4645    MOV	R5, R8
0x252E	0xB2BE    UXTH	R6, R7
0x2530	0xB208    SXTH	R0, R1
0x2532	0xF8BD7004  LDRH	R7, [SP, #4]
L___irgrid2_driver_ExtractDeviatingPixels148:
; pixCnt start address is: 36 (R9)
; warn start address is: 0 (R0)
; outlierPixCnt start address is: 28 (R7)
; brokenPixCnt start address is: 24 (R6)
; mlx90640 start address is: 20 (R5)
0x2536	0x45B1    CMP	R9, R6
0x2538	0xD227    BCS	L___irgrid2_driver_ExtractDeviatingPixels149
;__irgrid2_driver.c, 862 :: 		for(i=0; i<outlierPixCnt; i++)
; i start address is: 32 (R8)
0x253A	0xF2400800  MOVW	R8, #0
0x253E	0xFA0FF888  SXTH	R8, R8
; mlx90640 end address is: 20 (R5)
; brokenPixCnt end address is: 24 (R6)
; outlierPixCnt end address is: 28 (R7)
; i end address is: 32 (R8)
; pixCnt end address is: 36 (R9)
; warn end address is: 0 (R0)
L___irgrid2_driver_ExtractDeviatingPixels151:
; i start address is: 32 (R8)
; mlx90640 start address is: 20 (R5)
; brokenPixCnt start address is: 24 (R6)
; outlierPixCnt start address is: 28 (R7)
; warn start address is: 0 (R0)
; pixCnt start address is: 36 (R9)
0x2542	0x45B8    CMP	R8, R7
0x2544	0xD21C    BCS	L___irgrid2_driver_ExtractDeviatingPixels152
; warn end address is: 0 (R0)
;__irgrid2_driver.c, 864 :: 		warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
0x2546	0xF6422266  MOVW	R2, #10854
0x254A	0x18AB    ADDS	R3, R5, R2
0x254C	0xEA4F0248  LSL	R2, R8, #1
0x2550	0x189A    ADDS	R2, R3, R2
0x2552	0x8812    LDRH	R2, [R2, #0]
0x2554	0xB294    UXTH	R4, R2
0x2556	0xF642225C  MOVW	R2, #10844
0x255A	0x18AB    ADDS	R3, R5, R2
0x255C	0xEA4F0249  LSL	R2, R9, #1
0x2560	0x189A    ADDS	R2, R3, R2
0x2562	0x8812    LDRH	R2, [R2, #0]
0x2564	0xB2A1    UXTH	R1, R4
0x2566	0xB290    UXTH	R0, R2
0x2568	0xF7FFF9BC  BL	__irgrid2_driver_CheckAdjacentPixels+0
; warn start address is: 4 (R1)
0x256C	0xB201    SXTH	R1, R0
;__irgrid2_driver.c, 865 :: 		if(warn != 0)
0x256E	0xB108    CBZ	R0, L___irgrid2_driver_ExtractDeviatingPixels154
; mlx90640 end address is: 20 (R5)
; brokenPixCnt end address is: 24 (R6)
; outlierPixCnt end address is: 28 (R7)
; i end address is: 32 (R8)
; pixCnt end address is: 36 (R9)
;__irgrid2_driver.c, 867 :: 		return warn;
0x2570	0xB208    SXTH	R0, R1
; warn end address is: 4 (R1)
0x2572	0xE00A    B	L_end_ExtractDeviatingPixels
;__irgrid2_driver.c, 868 :: 		}
L___irgrid2_driver_ExtractDeviatingPixels154:
;__irgrid2_driver.c, 862 :: 		for(i=0; i<outlierPixCnt; i++)
; pixCnt start address is: 36 (R9)
; i start address is: 32 (R8)
; warn start address is: 4 (R1)
; outlierPixCnt start address is: 28 (R7)
; brokenPixCnt start address is: 24 (R6)
; mlx90640 start address is: 20 (R5)
0x2574	0xF1080801  ADD	R8, R8, #1
0x2578	0xFA0FF888  SXTH	R8, R8
;__irgrid2_driver.c, 869 :: 		}
; warn end address is: 4 (R1)
; i end address is: 32 (R8)
0x257C	0xB208    SXTH	R0, R1
0x257E	0xE7E0    B	L___irgrid2_driver_ExtractDeviatingPixels151
L___irgrid2_driver_ExtractDeviatingPixels152:
;__irgrid2_driver.c, 860 :: 		for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
; warn start address is: 0 (R0)
0x2580	0xF1090901  ADD	R9, R9, #1
0x2584	0xFA1FF989  UXTH	R9, R9
;__irgrid2_driver.c, 870 :: 		}
; mlx90640 end address is: 20 (R5)
; brokenPixCnt end address is: 24 (R6)
; outlierPixCnt end address is: 28 (R7)
; pixCnt end address is: 36 (R9)
0x2588	0xE7D5    B	L___irgrid2_driver_ExtractDeviatingPixels148
L___irgrid2_driver_ExtractDeviatingPixels149:
;__irgrid2_driver.c, 872 :: 		}
L___irgrid2_driver_ExtractDeviatingPixels133:
; warn end address is: 0 (R0)
; warn start address is: 0 (R0)
; warn end address is: 0 (R0)
L___irgrid2_driver_ExtractDeviatingPixels131:
; warn start address is: 0 (R0)
; warn end address is: 0 (R0)
L___irgrid2_driver_ExtractDeviatingPixels129:
;__irgrid2_driver.c, 873 :: 		return warn;
; warn start address is: 0 (R0)
; warn end address is: 0 (R0)
;__irgrid2_driver.c, 874 :: 		}
L_end_ExtractDeviatingPixels:
0x258A	0xF8DDE000  LDR	LR, [SP, #0]
0x258E	0xB002    ADD	SP, SP, #8
0x2590	0x4770    BX	LR
; end of __irgrid2_driver_ExtractDeviatingPixels
__irgrid2_driver_CheckAdjacentPixels:
;__irgrid2_driver.c, 769 :: 		static int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
; pix2 start address is: 4 (R1)
; pix1 start address is: 0 (R0)
; pix2 end address is: 4 (R1)
; pix1 end address is: 0 (R0)
; pix1 start address is: 0 (R0)
; pix2 start address is: 4 (R1)
;__irgrid2_driver.c, 773 :: 		pixPosDif = pix1 - pix2;
0x18E4	0x1A42    SUB	R2, R0, R1
; pix1 end address is: 0 (R0)
; pix2 end address is: 4 (R1)
; pixPosDif start address is: 0 (R0)
0x18E6	0xB210    SXTH	R0, R2
;__irgrid2_driver.c, 774 :: 		if(pixPosDif > -34 && pixPosDif < -30)
0x18E8	0xB213    SXTH	R3, R2
0x18EA	0xF06F0221  MVN	R2, #33
0x18EE	0x4293    CMP	R3, R2
0x18F0	0xDD07    BLE	L___irgrid2_driver_CheckAdjacentPixels230
0x18F2	0xF06F021D  MVN	R2, #29
0x18F6	0x4290    CMP	R0, R2
0x18F8	0xDA03    BGE	L___irgrid2_driver_CheckAdjacentPixels229
; pixPosDif end address is: 0 (R0)
L___irgrid2_driver_CheckAdjacentPixels228:
;__irgrid2_driver.c, 776 :: 		return -6;
0x18FA	0xF64F70FA  MOVW	R0, #65530
0x18FE	0xB200    SXTH	R0, R0
0x1900	0xE013    B	L_end_CheckAdjacentPixels
;__irgrid2_driver.c, 774 :: 		if(pixPosDif > -34 && pixPosDif < -30)
L___irgrid2_driver_CheckAdjacentPixels230:
; pixPosDif start address is: 0 (R0)
L___irgrid2_driver_CheckAdjacentPixels229:
;__irgrid2_driver.c, 778 :: 		if(pixPosDif > -2 && pixPosDif < 2)
0x1902	0xF06F0201  MVN	R2, #1
0x1906	0x4290    CMP	R0, R2
0x1908	0xDD05    BLE	L___irgrid2_driver_CheckAdjacentPixels232
0x190A	0x2802    CMP	R0, #2
0x190C	0xDA03    BGE	L___irgrid2_driver_CheckAdjacentPixels231
; pixPosDif end address is: 0 (R0)
L___irgrid2_driver_CheckAdjacentPixels227:
;__irgrid2_driver.c, 780 :: 		return -6;
0x190E	0xF64F70FA  MOVW	R0, #65530
0x1912	0xB200    SXTH	R0, R0
0x1914	0xE009    B	L_end_CheckAdjacentPixels
;__irgrid2_driver.c, 778 :: 		if(pixPosDif > -2 && pixPosDif < 2)
L___irgrid2_driver_CheckAdjacentPixels232:
; pixPosDif start address is: 0 (R0)
L___irgrid2_driver_CheckAdjacentPixels231:
;__irgrid2_driver.c, 782 :: 		if(pixPosDif > 30 && pixPosDif < 34)
0x1916	0x281E    CMP	R0, #30
0x1918	0xDD05    BLE	L___irgrid2_driver_CheckAdjacentPixels234
0x191A	0x2822    CMP	R0, #34
0x191C	0xDA03    BGE	L___irgrid2_driver_CheckAdjacentPixels233
; pixPosDif end address is: 0 (R0)
L___irgrid2_driver_CheckAdjacentPixels226:
;__irgrid2_driver.c, 784 :: 		return -6;
0x191E	0xF64F70FA  MOVW	R0, #65530
0x1922	0xB200    SXTH	R0, R0
0x1924	0xE001    B	L_end_CheckAdjacentPixels
;__irgrid2_driver.c, 782 :: 		if(pixPosDif > 30 && pixPosDif < 34)
L___irgrid2_driver_CheckAdjacentPixels234:
L___irgrid2_driver_CheckAdjacentPixels233:
;__irgrid2_driver.c, 787 :: 		return 0;
0x1926	0x2000    MOVS	R0, #0
0x1928	0xB200    SXTH	R0, R0
;__irgrid2_driver.c, 788 :: 		}
L_end_CheckAdjacentPixels:
0x192A	0x4770    BX	LR
; end of __irgrid2_driver_CheckAdjacentPixels
_irgrid2_setRefreshRate:
;__irgrid2_driver.c, 1081 :: 		void irgrid2_setRefreshRate(uint8_t refreshRate)
; refreshRate start address is: 0 (R0)
0x3BAC	0xB082    SUB	SP, SP, #8
0x3BAE	0xF8CDE000  STR	LR, [SP, #0]
; refreshRate end address is: 0 (R0)
; refreshRate start address is: 0 (R0)
;__irgrid2_driver.c, 1086 :: 		value = (refreshRate & 0x07)<<7;
0x3BB2	0xF0000107  AND	R1, R0, #7
0x3BB6	0xB2C9    UXTB	R1, R1
; refreshRate end address is: 0 (R0)
0x3BB8	0x01C9    LSLS	R1, R1, #7
0x3BBA	0xF8AD1006  STRH	R1, [SP, #6]
;__irgrid2_driver.c, 1087 :: 		irgrid2_readData(0x800D, 1, &controlRegister1);
0x3BBE	0xA901    ADD	R1, SP, #4
0x3BC0	0x460A    MOV	R2, R1
0x3BC2	0x2101    MOVS	R1, #1
0x3BC4	0xF248000D  MOVW	R0, #32781
0x3BC8	0xF7FFFA6A  BL	_irgrid2_readData+0
;__irgrid2_driver.c, 1088 :: 		value = (controlRegister1 & 0xFC7F) | value;
0x3BCC	0xF8BD2004  LDRH	R2, [SP, #4]
0x3BD0	0xF64F417F  MOVW	R1, #64639
0x3BD4	0x400A    ANDS	R2, R1
0x3BD6	0xB292    UXTH	R2, R2
0x3BD8	0xF9BD1006  LDRSH	R1, [SP, #6]
0x3BDC	0xEA420101  ORR	R1, R2, R1, LSL #0
;__irgrid2_driver.c, 1089 :: 		irgrid2_writeByte(0x800D, value);
0x3BE0	0xB289    UXTH	R1, R1
0x3BE2	0xF248000D  MOVW	R0, #32781
0x3BE6	0xF7FFFA27  BL	_irgrid2_writeByte+0
;__irgrid2_driver.c, 1090 :: 		}
L_end_irgrid2_setRefreshRate:
0x3BEA	0xF8DDE000  LDR	LR, [SP, #0]
0x3BEE	0xB002    ADD	SP, SP, #8
0x3BF0	0x4770    BX	LR
; end of _irgrid2_setRefreshRate
_irgrid2_writeByte:
;__irgrid2_driver.c, 910 :: 		void irgrid2_writeByte(uint16_t reg, uint16_t _data)
; _data start address is: 4 (R1)
; reg start address is: 0 (R0)
0x3038	0xB082    SUB	SP, SP, #8
0x303A	0xF8CDE000  STR	LR, [SP, #0]
; _data end address is: 4 (R1)
; reg end address is: 0 (R0)
; reg start address is: 0 (R0)
; _data start address is: 4 (R1)
;__irgrid2_driver.c, 914 :: 		writeReg[ 0 ] = (uint8_t)(reg >> 8);
0x303E	0xAC01    ADD	R4, SP, #4
0x3040	0x0A02    LSRS	R2, R0, #8
0x3042	0xB2D2    UXTB	R2, R2
0x3044	0x7022    STRB	R2, [R4, #0]
;__irgrid2_driver.c, 915 :: 		writeReg[ 1 ] = (uint8_t)(reg & 0x00FF);
0x3046	0x1C63    ADDS	R3, R4, #1
0x3048	0xF00002FF  AND	R2, R0, #255
; reg end address is: 0 (R0)
0x304C	0xB2D2    UXTB	R2, R2
0x304E	0x701A    STRB	R2, [R3, #0]
;__irgrid2_driver.c, 916 :: 		writeReg[ 2 ] = (uint8_t)(_data >> 8);
0x3050	0x1CA3    ADDS	R3, R4, #2
0x3052	0x0A0A    LSRS	R2, R1, #8
0x3054	0xB2D2    UXTB	R2, R2
0x3056	0x701A    STRB	R2, [R3, #0]
;__irgrid2_driver.c, 917 :: 		writeReg[ 3 ] = (uint8_t)(_data & 0x00FF);
0x3058	0x1CE3    ADDS	R3, R4, #3
0x305A	0xF00102FF  AND	R2, R1, #255
; _data end address is: 4 (R1)
0x305E	0xB2D2    UXTB	R2, R2
0x3060	0x701A    STRB	R2, [R3, #0]
;__irgrid2_driver.c, 919 :: 		hal_i2cStart();
0x3062	0xF7FEFC77  BL	__irgrid2_driver_hal_i2cStart+0
;__irgrid2_driver.c, 920 :: 		hal_i2cWrite(_slaveAddress, writeReg, 4, END_MODE_STOP);
0x3066	0xAB01    ADD	R3, SP, #4
0x3068	0x4A05    LDR	R2, [PC, #20]
0x306A	0x7812    LDRB	R2, [R2, #0]
0x306C	0x4619    MOV	R1, R3
0x306E	0x2301    MOVS	R3, #1
0x3070	0xB2D0    UXTB	R0, R2
0x3072	0x2204    MOVS	R2, #4
0x3074	0xF7FEFCA4  BL	__irgrid2_driver_hal_i2cWrite+0
;__irgrid2_driver.c, 921 :: 		}
L_end_irgrid2_writeByte:
0x3078	0xF8DDE000  LDR	LR, [SP, #0]
0x307C	0xB002    ADD	SP, SP, #8
0x307E	0x4770    BX	LR
0x3080	0x00952000  	__irgrid2_driver__slaveAddress+0
; end of _irgrid2_writeByte
_Delay_100ms:
;__Lib_Delays_MSP432.c, 53 :: 		void Delay_100ms() {
;__Lib_Delays_MSP432.c, 54 :: 		Delay_ms(100);
0x3CE0	0xF644777D  MOVW	R7, #20349
0x3CE4	0xF2C00712  MOVT	R7, #18
0x3CE8	0xBF00    NOP
0x3CEA	0xBF00    NOP
L_Delay_100ms20:
0x3CEC	0x1E7F    SUBS	R7, R7, #1
0x3CEE	0xD1FD    BNE	L_Delay_100ms20
0x3CF0	0xBF00    NOP
0x3CF2	0xBF00    NOP
0x3CF4	0xBF00    NOP
;__Lib_Delays_MSP432.c, 55 :: 		}
L_end_Delay_100ms:
0x3CF6	0x4770    BX	LR
; end of _Delay_100ms
_applicationTask:
;Click_IR_Grid2_MSP.c, 52 :: 		void applicationTask()
0x41A0	0xB081    SUB	SP, SP, #4
0x41A2	0xF8CDE000  STR	LR, [SP, #0]
;Click_IR_Grid2_MSP.c, 54 :: 		irgrid2_getPixelTemperature(&Ta,&pixelTemp[0]);
0x41A6	0x492F    LDR	R1, [PC, #188]
0x41A8	0x482F    LDR	R0, [PC, #188]
0x41AA	0xF7FFFDB5  BL	_irgrid2_getPixelTemperature+0
;Click_IR_Grid2_MSP.c, 55 :: 		mikrobus_logWrite("Ambient temperature:  ",_LOG_TEXT);
0x41AE	0x482F    LDR	R0, [PC, #188]
0x41B0	0x2101    MOVS	R1, #1
0x41B2	0xF7FFFF3F  BL	_mikrobus_logWrite+0
;Click_IR_Grid2_MSP.c, 56 :: 		FloatToStr(Ta,demoText);
0x41B6	0x482C    LDR	R0, [PC, #176]
0x41B8	0xED100A00  VLDR.32	S0, [R0, #0]
0x41BC	0x482C    LDR	R0, [PC, #176]
0x41BE	0xF7FFFDE9  BL	_FloatToStr+0
;Click_IR_Grid2_MSP.c, 57 :: 		mikrobus_logWrite(demoText,_LOG_LINE);
0x41C2	0x2102    MOVS	R1, #2
0x41C4	0x482A    LDR	R0, [PC, #168]
0x41C6	0xF7FFFF35  BL	_mikrobus_logWrite+0
;Click_IR_Grid2_MSP.c, 58 :: 		mikrobus_logWrite(" ", _LOG_LINE);
0x41CA	0x482A    LDR	R0, [PC, #168]
0x41CC	0x2102    MOVS	R1, #2
0x41CE	0xF7FFFF31  BL	_mikrobus_logWrite+0
;Click_IR_Grid2_MSP.c, 60 :: 		mikrobus_logWrite("--- Pixel temperature matrix 32x24 ---", _LOG_LINE);
0x41D2	0x4829    LDR	R0, [PC, #164]
0x41D4	0x2102    MOVS	R1, #2
0x41D6	0xF7FFFF2D  BL	_mikrobus_logWrite+0
;Click_IR_Grid2_MSP.c, 62 :: 		for ( cnt = 0 ; cnt < 768 ; cnt++)
0x41DA	0x2100    MOVS	R1, #0
0x41DC	0x4827    LDR	R0, [PC, #156]
0x41DE	0x8001    STRH	R1, [R0, #0]
L_applicationTask2:
0x41E0	0x4826    LDR	R0, [PC, #152]
0x41E2	0x8800    LDRH	R0, [R0, #0]
0x41E4	0xF5B07F40  CMP	R0, #768
0x41E8	0xD229    BCS	L_applicationTask3
;Click_IR_Grid2_MSP.c, 64 :: 		FloatToStr(pixelTemp[cnt],demoText);
0x41EA	0x4824    LDR	R0, [PC, #144]
0x41EC	0x8800    LDRH	R0, [R0, #0]
0x41EE	0x0081    LSLS	R1, R0, #2
0x41F0	0x481C    LDR	R0, [PC, #112]
0x41F2	0x1840    ADDS	R0, R0, R1
0x41F4	0xED100A00  VLDR.32	S0, [R0, #0]
0x41F8	0x481D    LDR	R0, [PC, #116]
0x41FA	0xF7FFFDCB  BL	_FloatToStr+0
;Click_IR_Grid2_MSP.c, 65 :: 		demoText[ 5 ] = 0 ;
0x41FE	0x2100    MOVS	R1, #0
0x4200	0x481F    LDR	R0, [PC, #124]
0x4202	0x7001    STRB	R1, [R0, #0]
;Click_IR_Grid2_MSP.c, 66 :: 		mikrobus_logWrite(demoText, _LOG_TEXT);
0x4204	0x2101    MOVS	R1, #1
0x4206	0x481A    LDR	R0, [PC, #104]
0x4208	0xF7FFFF14  BL	_mikrobus_logWrite+0
;Click_IR_Grid2_MSP.c, 67 :: 		mikrobus_logWrite("|", _LOG_TEXT);
0x420C	0x481D    LDR	R0, [PC, #116]
0x420E	0x2101    MOVS	R1, #1
0x4210	0xF7FFFF10  BL	_mikrobus_logWrite+0
;Click_IR_Grid2_MSP.c, 68 :: 		Delay_1ms();
0x4214	0xF7FFFEB4  BL	_Delay_1ms+0
;Click_IR_Grid2_MSP.c, 69 :: 		if(((cnt % 32) == 0) && (cnt > 0))
0x4218	0x4818    LDR	R0, [PC, #96]
0x421A	0x8800    LDRH	R0, [R0, #0]
0x421C	0xF000001F  AND	R0, R0, #31
0x4220	0xB280    UXTH	R0, R0
0x4222	0xB938    CBNZ	R0, L__applicationTask14
0x4224	0x4815    LDR	R0, [PC, #84]
0x4226	0x8800    LDRH	R0, [R0, #0]
0x4228	0x2800    CMP	R0, #0
0x422A	0xD903    BLS	L__applicationTask13
L__applicationTask12:
;Click_IR_Grid2_MSP.c, 71 :: 		mikrobus_logWrite(" ", _LOG_LINE);
0x422C	0x4816    LDR	R0, [PC, #88]
0x422E	0x2102    MOVS	R1, #2
0x4230	0xF7FFFF00  BL	_mikrobus_logWrite+0
;Click_IR_Grid2_MSP.c, 69 :: 		if(((cnt % 32) == 0) && (cnt > 0))
L__applicationTask14:
L__applicationTask13:
;Click_IR_Grid2_MSP.c, 62 :: 		for ( cnt = 0 ; cnt < 768 ; cnt++)
0x4234	0x4911    LDR	R1, [PC, #68]
0x4236	0x8808    LDRH	R0, [R1, #0]
0x4238	0x1C40    ADDS	R0, R0, #1
0x423A	0x8008    STRH	R0, [R1, #0]
;Click_IR_Grid2_MSP.c, 73 :: 		}
0x423C	0xE7D0    B	L_applicationTask2
L_applicationTask3:
;Click_IR_Grid2_MSP.c, 74 :: 		mikrobus_logWrite(" ", _LOG_LINE);
0x423E	0x4813    LDR	R0, [PC, #76]
0x4240	0x2102    MOVS	R1, #2
0x4242	0xF7FFFEF7  BL	_mikrobus_logWrite+0
;Click_IR_Grid2_MSP.c, 75 :: 		Delay_ms( 500 );
0x4246	0xF648577D  MOVW	R7, #36221
0x424A	0xF2C0075B  MOVT	R7, #91
0x424E	0xBF00    NOP
L_applicationTask8:
0x4250	0x1E7F    SUBS	R7, R7, #1
0x4252	0xD1FD    BNE	L_applicationTask8
0x4254	0xBF00    NOP
0x4256	0xBF00    NOP
0x4258	0xBF00    NOP
0x425A	0xBF00    NOP
;Click_IR_Grid2_MSP.c, 76 :: 		}
L_end_applicationTask:
0x425C	0xF8DDE000  LDR	LR, [SP, #0]
0x4260	0xB001    ADD	SP, SP, #4
0x4262	0x4770    BX	LR
0x4264	0x00A42000  	_pixelTemp+0
0x4268	0x001C2000  	_Ta+0
0x426C	0x00202000  	?lstr3_Click_IR_Grid2_MSP+0
0x4270	0x0CA42000  	_demoText+0
0x4274	0x001A2000  	?lstr4_Click_IR_Grid2_MSP+0
0x4278	0x00372000  	?lstr5_Click_IR_Grid2_MSP+0
0x427C	0x00962000  	_cnt+0
0x4280	0x0CA92000  	_demoText+5
0x4284	0x005E2000  	?lstr6_Click_IR_Grid2_MSP+0
0x4288	0x00602000  	?lstr7_Click_IR_Grid2_MSP+0
0x428C	0x00622000  	?lstr8_Click_IR_Grid2_MSP+0
; end of _applicationTask
_irgrid2_getPixelTemperature:
;__irgrid2_driver.c, 1001 :: 		void irgrid2_getPixelTemperature(float *Ta, float *pixelTemp)
0x3D18	0xB085    SUB	SP, SP, #20
0x3D1A	0xF8CDE000  STR	LR, [SP, #0]
0x3D1E	0x9003    STR	R0, [SP, #12]
0x3D20	0x9104    STR	R1, [SP, #16]
;__irgrid2_driver.c, 1004 :: 		float _Ta = 0;
;__irgrid2_driver.c, 1005 :: 		float _tr = 0;
; _tr start address is: 0 (S0)
0x3D22	0xF04F0200  MOV	R2, #0
0x3D26	0xEE002A10  VMOV	S0, R2
;__irgrid2_driver.c, 1006 :: 		float _emissivity = 0.95;
0x3D2A	0x4A17    LDR	R2, [PC, #92]
0x3D2C	0x9202    STR	R2, [SP, #8]
;__irgrid2_driver.c, 1010 :: 		for ( x = 0 ; x < 2 ; x++)
0x3D2E	0x2200    MOVS	R2, #0
0x3D30	0xF8AD2004  STRH	R2, [SP, #4]
; _tr end address is: 0 (S0)
L_irgrid2_getPixelTemperature159:
; _tr start address is: 0 (S0)
0x3D34	0xF8BD2004  LDRH	R2, [SP, #4]
0x3D38	0x2A02    CMP	R2, #2
0x3D3A	0xD21D    BCS	L_irgrid2_getPixelTemperature160
; _tr end address is: 0 (S0)
;__irgrid2_driver.c, 1012 :: 		irgrid2_getFrameData(mlx90640Frame);
0x3D3C	0x4813    LDR	R0, [PC, #76]
0x3D3E	0xF7FFFEC9  BL	_irgrid2_getFrameData+0
;__irgrid2_driver.c, 1013 :: 		_Ta = irgrid2_GetTa(mlx90640Frame, &mlx90640);
0x3D42	0x4913    LDR	R1, [PC, #76]
0x3D44	0x4811    LDR	R0, [PC, #68]
0x3D46	0xF7FFFA35  BL	_irgrid2_GetTa+0
;__irgrid2_driver.c, 1014 :: 		_tr = _Ta - TA_SHIFT;
0x3D4A	0xEEF20A00  VMOV.F32	S1, #8
0x3D4E	0xEE300A60  VSUB.F32	S0, S0, S1
; _tr start address is: 44 (S11)
0x3D52	0xEEF05A40  VMOV.F32	S11, S0
;__irgrid2_driver.c, 1015 :: 		irgrid2_CalculateTo(mlx90640Frame, &mlx90640, _emissivity, _tr, pixelTemp);
0x3D56	0x9A04    LDR	R2, [SP, #16]
0x3D58	0xEEF00A40  VMOV.F32	S1, S0
0x3D5C	0xED9D0A02  VLDR.32	S0, [SP, #8]
0x3D60	0x490B    LDR	R1, [PC, #44]
0x3D62	0x480A    LDR	R0, [PC, #40]
0x3D64	0xF7FFFABA  BL	_irgrid2_CalculateTo+0
;__irgrid2_driver.c, 1010 :: 		for ( x = 0 ; x < 2 ; x++)
0x3D68	0xF8BD2004  LDRH	R2, [SP, #4]
0x3D6C	0x1C52    ADDS	R2, R2, #1
0x3D6E	0xF8AD2004  STRH	R2, [SP, #4]
;__irgrid2_driver.c, 1016 :: 		}
0x3D72	0xEEB00A65  VMOV.F32	S0, S11
; _tr end address is: 44 (S11)
0x3D76	0xE7DD    B	L_irgrid2_getPixelTemperature159
L_irgrid2_getPixelTemperature160:
;__irgrid2_driver.c, 1017 :: 		*Ta = _tr;
; _tr start address is: 0 (S0)
0x3D78	0x9A03    LDR	R2, [SP, #12]
0x3D7A	0xED020A00  VSTR.32	S0, [R2, #0]
; _tr end address is: 0 (S0)
;__irgrid2_driver.c, 1018 :: 		}
L_end_irgrid2_getPixelTemperature:
0x3D7E	0xF8DDE000  LDR	LR, [SP, #0]
0x3D82	0xB005    ADD	SP, SP, #20
0x3D84	0x4770    BX	LR
0x3D86	0xBF00    NOP
0x3D88	0x33333F73  	#1064514355
0x3D8C	0x3E382000  	irgrid2_getPixelTemperature_mlx90640Frame_L0+0
0x3D90	0x0D102000  	__irgrid2_driver_mlx90640+0
; end of _irgrid2_getPixelTemperature
_irgrid2_getFrameData:
;__irgrid2_driver.c, 1030 :: 		int irgrid2_getFrameData(uint16_t *frameData)
0x3AD4	0xB084    SUB	SP, SP, #16
0x3AD6	0xF8CDE000  STR	LR, [SP, #0]
0x3ADA	0x9003    STR	R0, [SP, #12]
;__irgrid2_driver.c, 1032 :: 		uint16_t dataReady = 1;
;__irgrid2_driver.c, 1035 :: 		uint8_t cnt = 0;
0x3ADC	0x2100    MOVS	R1, #0
0x3ADE	0xF88D1008  STRB	R1, [SP, #8]
;__irgrid2_driver.c, 1037 :: 		dataReady = 0;
; dataReady start address is: 4 (R1)
0x3AE2	0x2100    MOVS	R1, #0
; dataReady end address is: 4 (R1)
;__irgrid2_driver.c, 1039 :: 		while(dataReady == 0)
L_irgrid2_getFrameData162:
; dataReady start address is: 4 (R1)
0x3AE4	0xB961    CBNZ	R1, L_irgrid2_getFrameData163
; dataReady end address is: 4 (R1)
;__irgrid2_driver.c, 1041 :: 		irgrid2_readData(0x8000, 1, &statusRegister);
0x3AE6	0xF10D0106  ADD	R1, SP, #6
0x3AEA	0x460A    MOV	R2, R1
0x3AEC	0x2101    MOVS	R1, #1
0x3AEE	0xF2480000  MOVW	R0, #32768
0x3AF2	0xF7FFFAD5  BL	_irgrid2_readData+0
;__irgrid2_driver.c, 1042 :: 		dataReady = statusRegister & 0x0008;
0x3AF6	0xF8BD1006  LDRH	R1, [SP, #6]
0x3AFA	0xF0010108  AND	R1, R1, #8
; dataReady start address is: 4 (R1)
;__irgrid2_driver.c, 1043 :: 		}
0x3AFE	0xE7F1    B	L_irgrid2_getFrameData162
L_irgrid2_getFrameData163:
;__irgrid2_driver.c, 1045 :: 		while(dataReady != 0 && cnt < 5)
0x3B00	0xB288    UXTH	R0, R1
L_irgrid2_getFrameData164:
; dataReady end address is: 4 (R1)
; dataReady start address is: 0 (R0)
0x3B02	0xB310    CBZ	R0, L__irgrid2_getFrameData242
; dataReady end address is: 0 (R0)
0x3B04	0xF89D1008  LDRB	R1, [SP, #8]
0x3B08	0x2905    CMP	R1, #5
0x3B0A	0xD21E    BCS	L__irgrid2_getFrameData241
L__irgrid2_getFrameData240:
;__irgrid2_driver.c, 1047 :: 		irgrid2_writeByte(0x8000, 0x0030);
0x3B0C	0x2130    MOVS	R1, #48
0x3B0E	0xF2480000  MOVW	R0, #32768
0x3B12	0xF7FFFA91  BL	_irgrid2_writeByte+0
;__irgrid2_driver.c, 1048 :: 		irgrid2_readData(0x0400, 832, frameData);
0x3B16	0x9A03    LDR	R2, [SP, #12]
0x3B18	0xF2403140  MOVW	R1, #832
0x3B1C	0xF2404000  MOVW	R0, #1024
0x3B20	0xF7FFFABE  BL	_irgrid2_readData+0
;__irgrid2_driver.c, 1049 :: 		irgrid2_readData(0x8000, 1, &statusRegister);
0x3B24	0xF10D0106  ADD	R1, SP, #6
0x3B28	0x460A    MOV	R2, R1
0x3B2A	0x2101    MOVS	R1, #1
0x3B2C	0xF2480000  MOVW	R0, #32768
0x3B30	0xF7FFFAB6  BL	_irgrid2_readData+0
;__irgrid2_driver.c, 1050 :: 		dataReady = statusRegister & 0x0008;
0x3B34	0xF8BD1006  LDRH	R1, [SP, #6]
0x3B38	0xF0010108  AND	R1, R1, #8
; dataReady start address is: 0 (R0)
0x3B3C	0xB288    UXTH	R0, R1
;__irgrid2_driver.c, 1051 :: 		cnt = cnt + 1;
0x3B3E	0xF89D1008  LDRB	R1, [SP, #8]
0x3B42	0x1C49    ADDS	R1, R1, #1
0x3B44	0xF88D1008  STRB	R1, [SP, #8]
;__irgrid2_driver.c, 1052 :: 		}
; dataReady end address is: 0 (R0)
0x3B48	0xE7DB    B	L_irgrid2_getFrameData164
;__irgrid2_driver.c, 1045 :: 		while(dataReady != 0 && cnt < 5)
L__irgrid2_getFrameData242:
L__irgrid2_getFrameData241:
;__irgrid2_driver.c, 1054 :: 		irgrid2_readData(0x800D, 1, &controlRegister1);
0x3B4A	0xA901    ADD	R1, SP, #4
0x3B4C	0x460A    MOV	R2, R1
0x3B4E	0x2101    MOVS	R1, #1
0x3B50	0xF248000D  MOVW	R0, #32781
0x3B54	0xF7FFFAA4  BL	_irgrid2_readData+0
;__irgrid2_driver.c, 1055 :: 		frameData[832] = controlRegister1;
0x3B58	0x9903    LDR	R1, [SP, #12]
0x3B5A	0xF50162D0  ADD	R2, R1, #1664
0x3B5E	0xF8BD1004  LDRH	R1, [SP, #4]
0x3B62	0x8011    STRH	R1, [R2, #0]
;__irgrid2_driver.c, 1056 :: 		frameData[833] = statusRegister & 0x0001;
0x3B64	0x9903    LDR	R1, [SP, #12]
0x3B66	0xF2016282  ADDW	R2, R1, #1666
0x3B6A	0xF8BD1006  LDRH	R1, [SP, #6]
0x3B6E	0xF0010101  AND	R1, R1, #1
0x3B72	0x8011    STRH	R1, [R2, #0]
;__irgrid2_driver.c, 1057 :: 		return frameData[833];
0x3B74	0x9903    LDR	R1, [SP, #12]
0x3B76	0xF2016182  ADDW	R1, R1, #1666
0x3B7A	0x8809    LDRH	R1, [R1, #0]
0x3B7C	0xB208    SXTH	R0, R1
;__irgrid2_driver.c, 1058 :: 		}
L_end_irgrid2_getFrameData:
0x3B7E	0xF8DDE000  LDR	LR, [SP, #0]
0x3B82	0xB004    ADD	SP, SP, #16
0x3B84	0x4770    BX	LR
; end of _irgrid2_getFrameData
_irgrid2_GetTa:
;__irgrid2_driver.c, 1134 :: 		float irgrid2_GetTa(uint16_t *frameData,  paramsMLX90640 *params)
; params start address is: 4 (R1)
; frameData start address is: 0 (R0)
0x31B4	0xB082    SUB	SP, SP, #8
0x31B6	0xF8CDE000  STR	LR, [SP, #0]
0x31BA	0x4681    MOV	R9, R0
0x31BC	0x4688    MOV	R8, R1
; params end address is: 4 (R1)
; frameData end address is: 0 (R0)
; frameData start address is: 36 (R9)
; params start address is: 32 (R8)
;__irgrid2_driver.c, 1141 :: 		vdd = irgrid2_GetVdd(frameData, params);
0x31BE	0x4641    MOV	R1, R8
0x31C0	0x4648    MOV	R0, R9
0x31C2	0xF7FEFC53  BL	_irgrid2_GetVdd+0
; vdd start address is: 24 (S6)
0x31C6	0xEEB03A40  VMOV.F32	S6, S0
;__irgrid2_driver.c, 1143 :: 		ptat = frameData[800];
0x31CA	0xF50962C8  ADD	R2, R9, #1600
0x31CE	0x8812    LDRH	R2, [R2, #0]
0x31D0	0xEE002A90  VMOV	S1, R2
0x31D4	0xEEF80A60  VCVT.F32.U32	S1, S1
; ptat start address is: 8 (S2)
0x31D8	0xEEB01A60  VMOV.F32	S2, S1
;__irgrid2_driver.c, 1144 :: 		if(ptat > 32767)
0x31DC	0x4A34    LDR	R2, [PC, #208]
0x31DE	0xEE002A10  VMOV	S0, R2
0x31E2	0xEEF40AC0  VCMPE.F32	S1, S0
0x31E6	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x31EA	0xDD06    BLE	L__irgrid2_GetTa244
;__irgrid2_driver.c, 1146 :: 		ptat = ptat - 65536;
0x31EC	0xF04F428F  MOV	R2, #1199570944
0x31F0	0xEE002A10  VMOV	S0, R2
0x31F4	0xEE311A40  VSUB.F32	S2, S2, S0
; ptat end address is: 8 (S2)
;__irgrid2_driver.c, 1147 :: 		}
0x31F8	0xE7FF    B	L_irgrid2_GetTa168
L__irgrid2_GetTa244:
;__irgrid2_driver.c, 1144 :: 		if(ptat > 32767)
;__irgrid2_driver.c, 1147 :: 		}
L_irgrid2_GetTa168:
;__irgrid2_driver.c, 1149 :: 		ptatArt = frameData[768];
; ptat start address is: 8 (S2)
0x31FA	0xF50962C0  ADD	R2, R9, #1536
; frameData end address is: 36 (R9)
0x31FE	0x8812    LDRH	R2, [R2, #0]
0x3200	0xEE002A90  VMOV	S1, R2
0x3204	0xEEF80A60  VCVT.F32.U32	S1, S1
; ptatArt start address is: 12 (S3)
0x3208	0xEEF01A60  VMOV.F32	S3, S1
;__irgrid2_driver.c, 1150 :: 		if(ptatArt > 32767)
0x320C	0x4A28    LDR	R2, [PC, #160]
0x320E	0xEE002A10  VMOV	S0, R2
0x3212	0xEEF40AC0  VCMPE.F32	S1, S0
0x3216	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x321A	0xDD06    BLE	L__irgrid2_GetTa245
;__irgrid2_driver.c, 1152 :: 		ptatArt = ptatArt - 65536;
0x321C	0xF04F428F  MOV	R2, #1199570944
0x3220	0xEE002A10  VMOV	S0, R2
0x3224	0xEE710AC0  VSUB.F32	S1, S3, S0
; ptatArt end address is: 12 (S3)
; ptatArt start address is: 4 (S1)
; ptatArt end address is: 4 (S1)
;__irgrid2_driver.c, 1153 :: 		}
0x3228	0xE001    B	L_irgrid2_GetTa169
L__irgrid2_GetTa245:
;__irgrid2_driver.c, 1150 :: 		if(ptatArt > 32767)
0x322A	0xEEF00A61  VMOV.F32	S1, S3
;__irgrid2_driver.c, 1153 :: 		}
L_irgrid2_GetTa169:
;__irgrid2_driver.c, 1154 :: 		ptatArt = (ptat / (ptat * params->alphaPTAT + ptatArt)) * _pow(2, (double)18);
; ptatArt start address is: 4 (S1)
0x322E	0xF1080210  ADD	R2, R8, #16
0x3232	0xED120A00  VLDR.32	S0, [R2, #0]
0x3236	0xEE210A00  VMUL.F32	S0, S2, S0
0x323A	0xEE300A20  VADD.F32	S0, S0, S1
; ptatArt end address is: 4 (S1)
0x323E	0xEE810A00  VDIV.F32	S0, S2, S0
; ptat end address is: 8 (S2)
0x3242	0xED8D0A01  VSTR.32	S0, [SP, #4]
0x3246	0xEEF30A02  VMOV.F32	S1, #18
0x324A	0xEEB00A00  VMOV.F32	S0, #2
0x324E	0xF7FEFAF5  BL	__irgrid2_driver__pow+0
0x3252	0xEDDD0A01  VLDR.32	S1, [SP, #4]
0x3256	0xEE201A80  VMUL.F32	S2, S1, S0
;__irgrid2_driver.c, 1156 :: 		ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3)) - params->vPTAT25);
0x325A	0xF1080304  ADD	R3, R8, #4
0x325E	0x4A15    LDR	R2, [PC, #84]
0x3260	0xEE002A10  VMOV	S0, R2
0x3264	0xEE730A40  VSUB.F32	S1, S6, S0
; vdd end address is: 24 (S6)
0x3268	0xED130A00  VLDR.32	S0, [R3, #0]
0x326C	0xEE600A20  VMUL.F32	S1, S0, S1
0x3270	0xEEB70A00  VMOV.F32	S0, #1
0x3274	0xEE300A20  VADD.F32	S0, S0, S1
0x3278	0xEEC10A00  VDIV.F32	S1, S2, S0
0x327C	0xF108020C  ADD	R2, R8, #12
0x3280	0x8812    LDRH	R2, [R2, #0]
0x3282	0xEE002A10  VMOV	S0, R2
0x3286	0xEEB80A40  VCVT.F32.U32	S0, S0
0x328A	0xEE700AC0  VSUB.F32	S1, S1, S0
;__irgrid2_driver.c, 1157 :: 		ta = ta / params->KtPTAT + 25;
0x328E	0xF1080208  ADD	R2, R8, #8
; params end address is: 32 (R8)
0x3292	0xED120A00  VLDR.32	S0, [R2, #0]
0x3296	0xEEC00A80  VDIV.F32	S1, S1, S0
0x329A	0xEEB30A09  VMOV.F32	S0, #25
0x329E	0xEE300A80  VADD.F32	S0, S1, S0
;__irgrid2_driver.c, 1159 :: 		return ta;
0x32A2	0xEEB00A40  VMOV.F32	S0, S0
;__irgrid2_driver.c, 1160 :: 		}
L_end_irgrid2_GetTa:
0x32A6	0xF8DDE000  LDR	LR, [SP, #0]
0x32AA	0xB002    ADD	SP, SP, #8
0x32AC	0x4770    BX	LR
0x32AE	0xBF00    NOP
0x32B0	0xFE0046FF  	#1191181824
0x32B4	0x33334053  	#1079194419
; end of _irgrid2_GetTa
_irgrid2_GetVdd:
;__irgrid2_driver.c, 1397 :: 		float irgrid2_GetVdd(uint16_t *frameData,  paramsMLX90640 *params)
; params start address is: 4 (R1)
; frameData start address is: 0 (R0)
0x1A6C	0xB082    SUB	SP, SP, #8
0x1A6E	0xF8CDE000  STR	LR, [SP, #0]
0x1A72	0x460E    MOV	R6, R1
; params end address is: 4 (R1)
; frameData end address is: 0 (R0)
; frameData start address is: 0 (R0)
; params start address is: 24 (R6)
;__irgrid2_driver.c, 1404 :: 		vdd = frameData[810];
0x1A74	0xF2006254  ADDW	R2, R0, #1620
0x1A78	0x8812    LDRH	R2, [R2, #0]
0x1A7A	0xEE002A90  VMOV	S1, R2
0x1A7E	0xEEF80A60  VCVT.F32.U32	S1, S1
; vdd start address is: 24 (S6)
0x1A82	0xEEB03A60  VMOV.F32	S6, S1
;__irgrid2_driver.c, 1405 :: 		if(vdd > 32767)
0x1A86	0x4A29    LDR	R2, [PC, #164]
0x1A88	0xEE002A10  VMOV	S0, R2
0x1A8C	0xEEF40AC0  VCMPE.F32	S1, S0
0x1A90	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x1A94	0xDD06    BLE	L__irgrid2_GetVdd243
;__irgrid2_driver.c, 1407 :: 		vdd = vdd - 65536;
0x1A96	0xF04F428F  MOV	R2, #1199570944
0x1A9A	0xEE002A10  VMOV	S0, R2
0x1A9E	0xEE333A40  VSUB.F32	S6, S6, S0
; vdd end address is: 24 (S6)
;__irgrid2_driver.c, 1408 :: 		}
0x1AA2	0xE7FF    B	L_irgrid2_GetVdd206
L__irgrid2_GetVdd243:
;__irgrid2_driver.c, 1405 :: 		if(vdd > 32767)
;__irgrid2_driver.c, 1408 :: 		}
L_irgrid2_GetVdd206:
;__irgrid2_driver.c, 1409 :: 		resolutionRAM = (frameData[832] & 0x0C00) >> 10;
; vdd start address is: 24 (S6)
0x1AA4	0xF50062D0  ADD	R2, R0, #1664
; frameData end address is: 0 (R0)
0x1AA8	0x8812    LDRH	R2, [R2, #0]
0x1AAA	0xF4026240  AND	R2, R2, #3072
0x1AAE	0xB292    UXTH	R2, R2
0x1AB0	0x0A92    LSRS	R2, R2, #10
; resolutionRAM start address is: 28 (R7)
0x1AB2	0xB217    SXTH	R7, R2
;__irgrid2_driver.c, 1410 :: 		resolutionCorrection = _pow(2, (double)params->resolutionEE) / _pow(2, (double)resolutionRAM);
0x1AB4	0xF2060224  ADDW	R2, R6, #36
0x1AB8	0x7812    LDRB	R2, [R2, #0]
0x1ABA	0xEE002A10  VMOV	S0, R2
0x1ABE	0xEEB80A40  VCVT.F32.U32	S0, S0
0x1AC2	0xEEF00A40  VMOV.F32	S1, S0
0x1AC6	0xEEB00A00  VMOV.F32	S0, #2
0x1ACA	0xF7FFFEB7  BL	__irgrid2_driver__pow+0
0x1ACE	0xED8D0A01  VSTR.32	S0, [SP, #4]
0x1AD2	0xEE007A10  VMOV	S0, R7
0x1AD6	0xEEB80AC0  VCVT.F32.S32	S0, S0
; resolutionRAM end address is: 28 (R7)
0x1ADA	0xEEF00A40  VMOV.F32	S1, S0
0x1ADE	0xEEB00A00  VMOV.F32	S0, #2
0x1AE2	0xF7FFFEAB  BL	__irgrid2_driver__pow+0
0x1AE6	0xEDDD0A01  VLDR.32	S1, [SP, #4]
0x1AEA	0xEE800A80  VDIV.F32	S0, S1, S0
;__irgrid2_driver.c, 1411 :: 		vdd = (resolutionCorrection * vdd - params->vdd25) / params->kVdd + 3.3;
0x1AEE	0xEE600A03  VMUL.F32	S1, S0, S6
; vdd end address is: 24 (S6)
0x1AF2	0x1CB2    ADDS	R2, R6, #2
0x1AF4	0xF9B22000  LDRSH	R2, [R2, #0]
0x1AF8	0xEE002A10  VMOV	S0, R2
0x1AFC	0xEEB80AC0  VCVT.F32.S32	S0, S0
0x1B00	0xEE700AC0  VSUB.F32	S1, S1, S0
0x1B04	0x4632    MOV	R2, R6
; params end address is: 24 (R6)
0x1B06	0xF9B22000  LDRSH	R2, [R2, #0]
0x1B0A	0xEE002A10  VMOV	S0, R2
0x1B0E	0xEEB80AC0  VCVT.F32.S32	S0, S0
0x1B12	0xEEC00A80  VDIV.F32	S1, S1, S0
0x1B16	0x4A06    LDR	R2, [PC, #24]
0x1B18	0xEE002A10  VMOV	S0, R2
0x1B1C	0xEE300A80  VADD.F32	S0, S1, S0
;__irgrid2_driver.c, 1413 :: 		return vdd;
0x1B20	0xEEB00A40  VMOV.F32	S0, S0
;__irgrid2_driver.c, 1414 :: 		}
L_end_irgrid2_GetVdd:
0x1B24	0xF8DDE000  LDR	LR, [SP, #0]
0x1B28	0xB002    ADD	SP, SP, #8
0x1B2A	0x4770    BX	LR
0x1B2C	0xFE0046FF  	#1191181824
0x1B30	0x33334053  	#1079194419
; end of _irgrid2_GetVdd
_irgrid2_CalculateTo:
;__irgrid2_driver.c, 1162 :: 		void irgrid2_CalculateTo(uint16_t *frameData,  paramsMLX90640 *params, float emissivity, float tr, float *result)
; result start address is: 8 (R2)
; tr start address is: 4 (S1)
; emissivity start address is: 0 (S0)
0x32DC	0xB08F    SUB	SP, SP, #60
0x32DE	0xF8CDE000  STR	LR, [SP, #0]
; params start address is: 4 (R1)
; frameData start address is: 0 (R0)
0x32E2	0x4682    MOV	R10, R0
0x32E4	0x468B    MOV	R11, R1
0x32E6	0xEEF03A40  VMOV.F32	S7, S0
0x32EA	0xEEF04A60  VMOV.F32	S9, S1
0x32EE	0x4694    MOV	R12, R2
; result end address is: 8 (R2)
; tr end address is: 4 (S1)
; emissivity end address is: 0 (S0)
; params end address is: 4 (R1)
; frameData end address is: 0 (R0)
; frameData start address is: 40 (R10)
; params start address is: 44 (R11)
; emissivity start address is: 28 (S7)
; tr start address is: 36 (S9)
; result start address is: 48 (R12)
;__irgrid2_driver.c, 1187 :: 		subPage = frameData[833];
0x32F0	0xF20A6382  ADDW	R3, R10, #1666
0x32F4	0x881B    LDRH	R3, [R3, #0]
; subPage start address is: 0 (R0)
0x32F6	0xB298    UXTH	R0, R3
;__irgrid2_driver.c, 1188 :: 		vdd = irgrid2_GetVdd(frameData, params);
0x32F8	0xF8AD0004  STRH	R0, [SP, #4]
0x32FC	0x4659    MOV	R1, R11
0x32FE	0x4650    MOV	R0, R10
0x3300	0xF7FEFBB4  BL	_irgrid2_GetVdd+0
0x3304	0xF8BD0004  LDRH	R0, [SP, #4]
; vdd start address is: 32 (S8)
0x3308	0xEEB04A40  VMOV.F32	S8, S0
;__irgrid2_driver.c, 1189 :: 		ta = irgrid2_GetTa(frameData, params);
0x330C	0xF8AD0004  STRH	R0, [SP, #4]
0x3310	0x4659    MOV	R1, R11
0x3312	0x4650    MOV	R0, R10
0x3314	0xF7FFFF4E  BL	_irgrid2_GetTa+0
0x3318	0xF8BD0004  LDRH	R0, [SP, #4]
; ta start address is: 24 (S6)
0x331C	0xEEB03A40  VMOV.F32	S6, S0
;__irgrid2_driver.c, 1190 :: 		ta4 = _pow((ta + 273.15), (double)4);
0x3320	0x4BF3    LDR	R3, [PC, #972]
0x3322	0xEE003A90  VMOV	S1, R3
0x3326	0xEE300A20  VADD.F32	S0, S0, S1
0x332A	0xF8AD0004  STRH	R0, [SP, #4]
0x332E	0xEEF10A00  VMOV.F32	S1, #4
0x3332	0xF7FEFA83  BL	__irgrid2_driver__pow+0
0x3336	0xF8BD0004  LDRH	R0, [SP, #4]
; ta4 start address is: 40 (S10)
0x333A	0xEEB05A40  VMOV.F32	S10, S0
;__irgrid2_driver.c, 1191 :: 		tr4 = _pow((tr + 273.15), (double)4);
0x333E	0x4BEC    LDR	R3, [PC, #944]
0x3340	0xEE003A10  VMOV	S0, R3
0x3344	0xEE340A80  VADD.F32	S0, S9, S0
; tr end address is: 36 (S9)
0x3348	0xF8AD0004  STRH	R0, [SP, #4]
0x334C	0xEEF10A00  VMOV.F32	S1, #4
0x3350	0xF7FEFA74  BL	__irgrid2_driver__pow+0
0x3354	0xF8BD0004  LDRH	R0, [SP, #4]
;__irgrid2_driver.c, 1192 :: 		taTr = tr4 - (tr4-ta4)/emissivity;
0x3358	0xEE700A45  VSUB.F32	S1, S0, S10
; ta4 end address is: 40 (S10)
0x335C	0xEEC00AA3  VDIV.F32	S1, S1, S7
0x3360	0xEE702A60  VSUB.F32	S5, S0, S1
; taTr start address is: 20 (S5)
;__irgrid2_driver.c, 1194 :: 		alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
0x3364	0xAE0A    ADD	R6, SP, #40
0x3366	0xF10B032C  ADD	R3, R11, #44
0x336A	0xED530A00  VLDR.32	S1, [R3, #0]
0x336E	0x4BE1    LDR	R3, [PC, #900]
0x3370	0xEE003A10  VMOV	S0, R3
0x3374	0xEE600A80  VMUL.F32	S1, S1, S0
0x3378	0xEEB70A00  VMOV.F32	S0, #1
0x337C	0xEE700A20  VADD.F32	S1, S0, S1
0x3380	0xEEB70A00  VMOV.F32	S0, #1
0x3384	0xEE800A20  VDIV.F32	S0, S0, S1
0x3388	0xED060A00  VSTR.32	S0, [R6, #0]
;__irgrid2_driver.c, 1195 :: 		alphaCorrR[1] = 1 ;
0x338C	0x1D33    ADDS	R3, R6, #4
0x338E	0xEEB70A00  VMOV.F32	S0, #1
0x3392	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 1196 :: 		alphaCorrR[2] = (1 + params->ksTo[2] * params->ct[2]);
0x3396	0xF2060508  ADDW	R5, R6, #8
0x339A	0xF10B032C  ADD	R3, R11, #44
0x339E	0xF2030408  ADDW	R4, R3, #8
0x33A2	0xF10B033C  ADD	R3, R11, #60
0x33A6	0x1D1B    ADDS	R3, R3, #4
0x33A8	0xF9B33000  LDRSH	R3, [R3, #0]
0x33AC	0xEE003A90  VMOV	S1, R3
0x33B0	0xEEF80AE0  VCVT.F32.S32	S1, S1
0x33B4	0xED140A00  VLDR.32	S0, [R4, #0]
0x33B8	0xEE600A20  VMUL.F32	S1, S0, S1
0x33BC	0xEEB70A00  VMOV.F32	S0, #1
0x33C0	0xEE300A20  VADD.F32	S0, S0, S1
0x33C4	0xED050A00  VSTR.32	S0, [R5, #0]
;__irgrid2_driver.c, 1197 :: 		alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[3] * (params->ct[3] - params->ct[2]));
0x33C8	0xF206070C  ADDW	R7, R6, #12
0x33CC	0xF2060308  ADDW	R3, R6, #8
0x33D0	0xED131A00  VLDR.32	S2, [R3, #0]
0x33D4	0xF10B032C  ADD	R3, R11, #44
0x33D8	0xF203060C  ADDW	R6, R3, #12
0x33DC	0xF10B053C  ADD	R5, R11, #60
0x33E0	0x1DAB    ADDS	R3, R5, #6
0x33E2	0xF9B34000  LDRSH	R4, [R3, #0]
0x33E6	0x1D2B    ADDS	R3, R5, #4
0x33E8	0xF9B33000  LDRSH	R3, [R3, #0]
0x33EC	0x1AE3    SUB	R3, R4, R3
0x33EE	0xB21B    SXTH	R3, R3
0x33F0	0xEE003A90  VMOV	S1, R3
0x33F4	0xEEF80AE0  VCVT.F32.S32	S1, S1
0x33F8	0xED160A00  VLDR.32	S0, [R6, #0]
0x33FC	0xEE600A20  VMUL.F32	S1, S0, S1
0x3400	0xEEB70A00  VMOV.F32	S0, #1
0x3404	0xEE300A20  VADD.F32	S0, S0, S1
0x3408	0xEE210A00  VMUL.F32	S0, S2, S0
0x340C	0xED070A00  VSTR.32	S0, [R7, #0]
;__irgrid2_driver.c, 1200 :: 		gain = frameData[778];
0x3410	0xF20A6314  ADDW	R3, R10, #1556
0x3414	0x881B    LDRH	R3, [R3, #0]
0x3416	0xEE003A90  VMOV	S1, R3
0x341A	0xEEF80A60  VCVT.F32.U32	S1, S1
; gain start address is: 8 (S2)
0x341E	0xEEB01A60  VMOV.F32	S2, S1
;__irgrid2_driver.c, 1201 :: 		if(gain > 32767)
0x3422	0x4BB5    LDR	R3, [PC, #724]
0x3424	0xEE003A10  VMOV	S0, R3
0x3428	0xEEF40AC0  VCMPE.F32	S1, S0
0x342C	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x3430	0xDD06    BLE	L__irgrid2_CalculateTo246
;__irgrid2_driver.c, 1203 :: 		gain = gain - 65536;
0x3432	0xF04F438F  MOV	R3, #1199570944
0x3436	0xEE003A10  VMOV	S0, R3
0x343A	0xEE710A40  VSUB.F32	S1, S2, S0
; gain end address is: 8 (S2)
; gain start address is: 4 (S1)
; gain end address is: 4 (S1)
;__irgrid2_driver.c, 1204 :: 		}
0x343E	0xE001    B	L_irgrid2_CalculateTo170
L__irgrid2_CalculateTo246:
;__irgrid2_driver.c, 1201 :: 		if(gain > 32767)
0x3440	0xEEF00A41  VMOV.F32	S1, S2
;__irgrid2_driver.c, 1204 :: 		}
L_irgrid2_CalculateTo170:
;__irgrid2_driver.c, 1206 :: 		gain = params->gainEE / gain;
; gain start address is: 4 (S1)
0x3444	0xF10B0314  ADD	R3, R11, #20
0x3448	0xF9B33000  LDRSH	R3, [R3, #0]
0x344C	0xEE023A10  VMOV	S4, R3
0x3450	0xEEB82AC2  VCVT.F32.S32	S4, S4
0x3454	0xEE822A20  VDIV.F32	S4, S4, S1
; gain end address is: 4 (S1)
; gain start address is: 16 (S4)
;__irgrid2_driver.c, 1209 :: 		mode = (frameData[832] & 0x1000) >> 5;
0x3458	0xF50A63D0  ADD	R3, R10, #1664
0x345C	0x881B    LDRH	R3, [R3, #0]
0x345E	0xF4035380  AND	R3, R3, #4096
0x3462	0xB29B    UXTH	R3, R3
0x3464	0x095B    LSRS	R3, R3, #5
; mode start address is: 4 (R1)
0x3466	0xB2D9    UXTB	R1, R3
;__irgrid2_driver.c, 1211 :: 		irDataCP[0] = frameData[776];
0x3468	0xAC05    ADD	R4, SP, #20
0x346A	0xF50A63C2  ADD	R3, R10, #1552
0x346E	0x881B    LDRH	R3, [R3, #0]
0x3470	0xEE003A10  VMOV	S0, R3
0x3474	0xEEB80A40  VCVT.F32.U32	S0, S0
0x3478	0xED040A00  VSTR.32	S0, [R4, #0]
;__irgrid2_driver.c, 1212 :: 		irDataCP[1] = frameData[808];
0x347C	0x1D24    ADDS	R4, R4, #4
0x347E	0xF50A63CA  ADD	R3, R10, #1616
0x3482	0x881B    LDRH	R3, [R3, #0]
0x3484	0xEE003A10  VMOV	S0, R3
0x3488	0xEEB80A40  VCVT.F32.U32	S0, S0
0x348C	0xED040A00  VSTR.32	S0, [R4, #0]
;__irgrid2_driver.c, 1213 :: 		for(i = 0; i < 2; i++)
; i start address is: 24 (R6)
0x3490	0x2600    MOVS	R6, #0
0x3492	0xB236    SXTH	R6, R6
; frameData end address is: 40 (R10)
; params end address is: 44 (R11)
; emissivity end address is: 28 (S7)
; result end address is: 48 (R12)
; subPage end address is: 0 (R0)
; vdd end address is: 32 (S8)
; mode end address is: 4 (R1)
; gain end address is: 16 (S4)
; taTr end address is: 20 (S5)
; ta end address is: 24 (S6)
; i end address is: 24 (R6)
0x3494	0xF8AD6004  STRH	R6, [SP, #4]
0x3498	0xF88D1006  STRB	R1, [SP, #6]
0x349C	0xEEF03A44  VMOV.F32	S7, S8
0x34A0	0xEEB04A63  VMOV.F32	S8, S7
0x34A4	0x4657    MOV	R7, R10
0x34A6	0x46D8    MOV	R8, R11
0x34A8	0x4662    MOV	R2, R12
0x34AA	0xB281    UXTH	R1, R0
0x34AC	0xF89D0006  LDRB	R0, [SP, #6]
0x34B0	0xF9BD6004  LDRSH	R6, [SP, #4]
L_irgrid2_CalculateTo171:
; i start address is: 24 (R6)
; mode start address is: 0 (R0)
; gain start address is: 16 (S4)
; taTr start address is: 20 (S5)
; ta start address is: 24 (S6)
; vdd start address is: 28 (S7)
; subPage start address is: 4 (R1)
; result start address is: 8 (R2)
; emissivity start address is: 32 (S8)
; params start address is: 32 (R8)
; frameData start address is: 28 (R7)
0x34B4	0x2E02    CMP	R6, #2
0x34B6	0xDA31    BGE	L_irgrid2_CalculateTo172
;__irgrid2_driver.c, 1215 :: 		if(irDataCP[i] > 32767)
0x34B8	0xAC05    ADD	R4, SP, #20
0x34BA	0x00B3    LSLS	R3, R6, #2
0x34BC	0x18E3    ADDS	R3, R4, R3
0x34BE	0xED530A00  VLDR.32	S1, [R3, #0]
0x34C2	0x4B8D    LDR	R3, [PC, #564]
0x34C4	0xEE003A10  VMOV	S0, R3
0x34C8	0xEEF40AC0  VCMPE.F32	S1, S0
0x34CC	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x34D0	0xDD0C    BLE	L_irgrid2_CalculateTo174
;__irgrid2_driver.c, 1217 :: 		irDataCP[i] = irDataCP[i] - 65536;
0x34D2	0xAC05    ADD	R4, SP, #20
0x34D4	0x00B3    LSLS	R3, R6, #2
0x34D6	0x18E5    ADDS	R5, R4, R3
0x34D8	0xED550A00  VLDR.32	S1, [R5, #0]
0x34DC	0xF04F438F  MOV	R3, #1199570944
0x34E0	0xEE003A10  VMOV	S0, R3
0x34E4	0xEE300AC0  VSUB.F32	S0, S1, S0
0x34E8	0xED050A00  VSTR.32	S0, [R5, #0]
;__irgrid2_driver.c, 1218 :: 		}
L_irgrid2_CalculateTo174:
;__irgrid2_driver.c, 1219 :: 		irDataCP[i] = irDataCP[i] * gain;
0x34EC	0xAC05    ADD	R4, SP, #20
0x34EE	0x00B3    LSLS	R3, R6, #2
0x34F0	0x18E4    ADDS	R4, R4, R3
0x34F2	0xED140A00  VLDR.32	S0, [R4, #0]
0x34F6	0xEE200A02  VMUL.F32	S0, S0, S4
0x34FA	0xED040A00  VSTR.32	S0, [R4, #0]
;__irgrid2_driver.c, 1213 :: 		for(i = 0; i < 2; i++)
0x34FE	0x1C76    ADDS	R6, R6, #1
0x3500	0xB236    SXTH	R6, R6
;__irgrid2_driver.c, 1220 :: 		}
0x3502	0xF8AD6004  STRH	R6, [SP, #4]
; i end address is: 24 (R6)
0x3506	0xED8D4A02  VSTR.32	S8, [SP, #8]
0x350A	0xEDCD3A03  VSTR.32	S7, [SP, #12]
0x350E	0xEDDD3A03  VLDR.32	S7, [SP, #12]
0x3512	0xED9D4A02  VLDR.32	S8, [SP, #8]
0x3516	0xF9BD6004  LDRSH	R6, [SP, #4]
0x351A	0xE7CB    B	L_irgrid2_CalculateTo171
L_irgrid2_CalculateTo172:
;__irgrid2_driver.c, 1221 :: 		irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
0x351C	0xAD05    ADD	R5, SP, #20
0x351E	0xED551A00  VLDR.32	S3, [R5, #0]
0x3522	0xF642234C  MOVW	R3, #10828
0x3526	0xEB080303  ADD	R3, R8, R3, LSL #0
0x352A	0x461C    MOV	R4, R3
0x352C	0xF1080320  ADD	R3, R8, #32
0x3530	0xEEB30A09  VMOV.F32	S0, #25
0x3534	0xEE730A40  VSUB.F32	S1, S6, S0
0x3538	0xED130A00  VLDR.32	S0, [R3, #0]
0x353C	0xEE600A20  VMUL.F32	S1, S0, S1
0x3540	0xEEB70A00  VMOV.F32	S0, #1
0x3544	0xEE700A20  VADD.F32	S1, S0, S1
0x3548	0xF9B43000  LDRSH	R3, [R4, #0]
0x354C	0xEE003A10  VMOV	S0, R3
0x3550	0xEEB80AC0  VCVT.F32.S32	S0, S0
0x3554	0xEE201A20  VMUL.F32	S2, S0, S1
0x3558	0xF108041C  ADD	R4, R8, #28
0x355C	0x4B67    LDR	R3, [PC, #412]
0x355E	0xEE003A10  VMOV	S0, R3
0x3562	0xEE730AC0  VSUB.F32	S1, S7, S0
0x3566	0xED140A00  VLDR.32	S0, [R4, #0]
0x356A	0xEE600A20  VMUL.F32	S1, S0, S1
0x356E	0xEEB70A00  VMOV.F32	S0, #1
0x3572	0xEE300A20  VADD.F32	S0, S0, S1
0x3576	0xEE210A00  VMUL.F32	S0, S2, S0
0x357A	0xEE310AC0  VSUB.F32	S0, S3, S0
0x357E	0xED050A00  VSTR.32	S0, [R5, #0]
;__irgrid2_driver.c, 1222 :: 		if( mode ==  params->calibrationModeEE)
0x3582	0xF1080325  ADD	R3, R8, #37
0x3586	0x781B    LDRB	R3, [R3, #0]
0x3588	0x4298    CMP	R0, R3
0x358A	0xD135    BNE	L_irgrid2_CalculateTo175
;__irgrid2_driver.c, 1224 :: 		irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
0x358C	0xAB05    ADD	R3, SP, #20
0x358E	0x1D1D    ADDS	R5, R3, #4
0x3590	0x1D1B    ADDS	R3, R3, #4
0x3592	0xED531A00  VLDR.32	S3, [R3, #0]
0x3596	0xF642234C  MOVW	R3, #10828
0x359A	0xEB080303  ADD	R3, R8, R3, LSL #0
0x359E	0x1C9C    ADDS	R4, R3, #2
0x35A0	0xF1080320  ADD	R3, R8, #32
0x35A4	0xEEB30A09  VMOV.F32	S0, #25
0x35A8	0xEE730A40  VSUB.F32	S1, S6, S0
0x35AC	0xED130A00  VLDR.32	S0, [R3, #0]
0x35B0	0xEE600A20  VMUL.F32	S1, S0, S1
0x35B4	0xEEB70A00  VMOV.F32	S0, #1
0x35B8	0xEE700A20  VADD.F32	S1, S0, S1
0x35BC	0xF9B43000  LDRSH	R3, [R4, #0]
0x35C0	0xEE003A10  VMOV	S0, R3
0x35C4	0xEEB80AC0  VCVT.F32.S32	S0, S0
0x35C8	0xEE201A20  VMUL.F32	S2, S0, S1
0x35CC	0xF108041C  ADD	R4, R8, #28
0x35D0	0x4B4A    LDR	R3, [PC, #296]
0x35D2	0xEE003A10  VMOV	S0, R3
0x35D6	0xEE730AC0  VSUB.F32	S1, S7, S0
0x35DA	0xED140A00  VLDR.32	S0, [R4, #0]
0x35DE	0xEE600A20  VMUL.F32	S1, S0, S1
0x35E2	0xEEB70A00  VMOV.F32	S0, #1
0x35E6	0xEE300A20  VADD.F32	S0, S0, S1
0x35EA	0xEE210A00  VMUL.F32	S0, S2, S0
0x35EE	0xEE310AC0  VSUB.F32	S0, S3, S0
0x35F2	0xED050A00  VSTR.32	S0, [R5, #0]
;__irgrid2_driver.c, 1225 :: 		}
0x35F6	0xE03C    B	L_irgrid2_CalculateTo176
L_irgrid2_CalculateTo175:
;__irgrid2_driver.c, 1228 :: 		irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
0x35F8	0xAB05    ADD	R3, SP, #20
0x35FA	0x1D1D    ADDS	R5, R3, #4
0x35FC	0x1D1B    ADDS	R3, R3, #4
0x35FE	0xED531A00  VLDR.32	S3, [R3, #0]
0x3602	0xF642234C  MOVW	R3, #10828
0x3606	0xEB080303  ADD	R3, R8, R3, LSL #0
0x360A	0x1C9B    ADDS	R3, R3, #2
0x360C	0xF9B34000  LDRSH	R4, [R3, #0]
0x3610	0xF6422350  MOVW	R3, #10832
0x3614	0xEB080303  ADD	R3, R8, R3, LSL #0
0x3618	0xEE004A90  VMOV	S1, R4
0x361C	0xEEF80AE0  VCVT.F32.S32	S1, S1
0x3620	0xED130A00  VLDR.32	S0, [R3, #0]
0x3624	0xEE301A80  VADD.F32	S2, S1, S0
0x3628	0xF1080320  ADD	R3, R8, #32
0x362C	0xEEB30A09  VMOV.F32	S0, #25
0x3630	0xEE730A40  VSUB.F32	S1, S6, S0
0x3634	0xED130A00  VLDR.32	S0, [R3, #0]
0x3638	0xEE600A20  VMUL.F32	S1, S0, S1
0x363C	0xEEB70A00  VMOV.F32	S0, #1
0x3640	0xEE300A20  VADD.F32	S0, S0, S1
0x3644	0xEE211A00  VMUL.F32	S2, S2, S0
0x3648	0xF108041C  ADD	R4, R8, #28
0x364C	0x4B2B    LDR	R3, [PC, #172]
0x364E	0xEE003A10  VMOV	S0, R3
0x3652	0xEE730AC0  VSUB.F32	S1, S7, S0
0x3656	0xED140A00  VLDR.32	S0, [R4, #0]
0x365A	0xEE600A20  VMUL.F32	S1, S0, S1
0x365E	0xEEB70A00  VMOV.F32	S0, #1
0x3662	0xEE300A20  VADD.F32	S0, S0, S1
0x3666	0xEE210A00  VMUL.F32	S0, S2, S0
0x366A	0xEE310AC0  VSUB.F32	S0, S3, S0
0x366E	0xED050A00  VSTR.32	S0, [R5, #0]
;__irgrid2_driver.c, 1229 :: 		}
L_irgrid2_CalculateTo176:
;__irgrid2_driver.c, 1231 :: 		for(pixelNumber = 0; pixelNumber < 768; pixelNumber++)
; pixelNumber start address is: 48 (R12)
0x3672	0xF2400C00  MOVW	R12, #0
0x3676	0xFA0FFC8C  SXTH	R12, R12
; mode end address is: 0 (R0)
; gain end address is: 16 (S4)
; taTr end address is: 20 (S5)
; ta end address is: 24 (S6)
; subPage end address is: 4 (R1)
; result end address is: 8 (R2)
; emissivity end address is: 32 (S8)
; pixelNumber end address is: 48 (R12)
0x367A	0x9701    STR	R7, [SP, #4]
0x367C	0xED8D4A02  VSTR.32	S8, [SP, #8]
0x3680	0xFA5FFB80  UXTB	R11, R0
0x3684	0xEEB05A42  VMOV.F32	S10, S4
0x3688	0xEEF04A62  VMOV.F32	S9, S5
0x368C	0xEEB04A43  VMOV.F32	S8, S6
0x3690	0xFA1FFA81  UXTH	R10, R1
0x3694	0x4691    MOV	R9, R2
0x3696	0xED9D3A02  VLDR.32	S6, [SP, #8]
0x369A	0x9F01    LDR	R7, [SP, #4]
L_irgrid2_CalculateTo177:
; pixelNumber start address is: 48 (R12)
; mode start address is: 44 (R11)
; gain start address is: 40 (S10)
; taTr start address is: 36 (S9)
; ta start address is: 32 (S8)
; subPage start address is: 40 (R10)
; result start address is: 36 (R9)
; emissivity start address is: 24 (S6)
; frameData start address is: 28 (R7)
; frameData end address is: 28 (R7)
; params start address is: 32 (R8)
; params end address is: 32 (R8)
; emissivity start address is: 24 (S6)
; emissivity end address is: 24 (S6)
; result start address is: 36 (R9)
; result end address is: 36 (R9)
; subPage start address is: 40 (R10)
; subPage end address is: 40 (R10)
; vdd start address is: 28 (S7)
; vdd end address is: 28 (S7)
; ta start address is: 32 (S8)
; ta end address is: 32 (S8)
; taTr start address is: 36 (S9)
; taTr end address is: 36 (S9)
; gain start address is: 40 (S10)
; gain end address is: 40 (S10)
; mode start address is: 44 (R11)
; mode end address is: 44 (R11)
0x369C	0xF5BC7F40  CMP	R12, #768
0x36A0	0xF28081ED  BGE	L_irgrid2_CalculateTo178
; frameData end address is: 28 (R7)
; params end address is: 32 (R8)
; emissivity end address is: 24 (S6)
; result end address is: 36 (R9)
; subPage end address is: 40 (R10)
; vdd end address is: 28 (S7)
; ta end address is: 32 (S8)
; taTr end address is: 36 (S9)
; gain end address is: 40 (S10)
; mode end address is: 44 (R11)
;__irgrid2_driver.c, 1233 :: 		ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2;
; mode start address is: 44 (R11)
; gain start address is: 40 (S10)
; taTr start address is: 36 (S9)
; ta start address is: 32 (S8)
; vdd start address is: 28 (S7)
; subPage start address is: 40 (R10)
; result start address is: 36 (R9)
; emissivity start address is: 24 (S6)
; params start address is: 32 (R8)
; frameData start address is: 28 (R7)
0x36A4	0x2320    MOVS	R3, #32
0x36A6	0xB21B    SXTH	R3, R3
0x36A8	0xFB9CF4F3  SDIV	R4, R12, R3
0x36AC	0xB224    SXTH	R4, R4
0x36AE	0x2340    MOVS	R3, #64
0x36B0	0xB21B    SXTH	R3, R3
0x36B2	0xFB9CF3F3  SDIV	R3, R12, R3
0x36B6	0xB21B    SXTH	R3, R3
0x36B8	0x005B    LSLS	R3, R3, #1
0x36BA	0xB21B    SXTH	R3, R3
0x36BC	0x1AE6    SUB	R6, R4, R3
; ilPattern start address is: 0 (R0)
0x36BE	0xB270    SXTB	R0, R6
;__irgrid2_driver.c, 1234 :: 		chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2);
0x36C0	0x2302    MOVS	R3, #2
0x36C2	0xB21B    SXTH	R3, R3
0x36C4	0xFB9CF3F3  SDIV	R3, R12, R3
0x36C8	0xB21B    SXTH	R3, R3
0x36CA	0x005B    LSLS	R3, R3, #1
0x36CC	0xB21B    SXTH	R3, R3
0x36CE	0xEBAC0403  SUB	R4, R12, R3, LSL #0
0x36D2	0xB224    SXTH	R4, R4
0x36D4	0xB273    SXTB	R3, R6
0x36D6	0x4063    EORS	R3, R4
; chessPattern start address is: 8 (R2)
0x36D8	0xB25A    SXTB	R2, R3
;__irgrid2_driver.c, 1235 :: 		conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
0x36DA	0xF10C0402  ADD	R4, R12, #2
0x36DE	0xB224    SXTH	R4, R4
0x36E0	0x2304    MOVS	R3, #4
0x36E2	0xB21B    SXTH	R3, R3
0x36E4	0xFB94F5F3  SDIV	R5, R4, R3
0x36E8	0xB22D    SXTH	R5, R5
0x36EA	0xF10C0403  ADD	R4, R12, #3
0x36EE	0xE007    B	#14
0x36F0	0x93334388  	#1133024051
0x36F4	0x00004220  	#1109393408
0x36F8	0xFE0046FF  	#1191181824
0x36FC	0x33334053  	#1079194419
0x3700	0xB224    SXTH	R4, R4
0x3702	0x2304    MOVS	R3, #4
0x3704	0xB21B    SXTH	R3, R3
0x3706	0xFB94F3F3  SDIV	R3, R4, R3
0x370A	0xB21B    SXTH	R3, R3
0x370C	0x1AED    SUB	R5, R5, R3
0x370E	0xB22D    SXTH	R5, R5
0x3710	0xF10C0401  ADD	R4, R12, #1
0x3714	0xB224    SXTH	R4, R4
0x3716	0x2304    MOVS	R3, #4
0x3718	0xB21B    SXTH	R3, R3
0x371A	0xFB94F3F3  SDIV	R3, R4, R3
0x371E	0xB21B    SXTH	R3, R3
0x3720	0x18EC    ADDS	R4, R5, R3
0x3722	0xB224    SXTH	R4, R4
0x3724	0x2304    MOVS	R3, #4
0x3726	0xB21B    SXTH	R3, R3
0x3728	0xFB9CF3F3  SDIV	R3, R12, R3
0x372C	0xB21B    SXTH	R3, R3
0x372E	0x1AE4    SUB	R4, R4, R3
0x3730	0xB224    SXTH	R4, R4
0x3732	0xB273    SXTB	R3, R6
0x3734	0x005B    LSLS	R3, R3, #1
0x3736	0xB21B    SXTH	R3, R3
0x3738	0xF1C30301  RSB	R3, R3, #1
0x373C	0xB21B    SXTH	R3, R3
0x373E	0x4363    MULS	R3, R4, R3
; conversionPattern start address is: 4 (R1)
0x3740	0xB259    SXTB	R1, R3
;__irgrid2_driver.c, 1237 :: 		if(mode == 0)
0x3742	0xF1BB0F00  CMP	R11, #0
0x3746	0xD101    BNE	L_irgrid2_CalculateTo180
; chessPattern end address is: 8 (R2)
;__irgrid2_driver.c, 1239 :: 		pattern = ilPattern;
; pattern start address is: 8 (R2)
0x3748	0xB242    SXTB	R2, R0
;__irgrid2_driver.c, 1240 :: 		}
; pattern end address is: 8 (R2)
0x374A	0xE001    B	L_irgrid2_CalculateTo181
L_irgrid2_CalculateTo180:
;__irgrid2_driver.c, 1243 :: 		pattern = chessPattern;
; pattern start address is: 12 (R3)
; chessPattern start address is: 8 (R2)
0x374C	0xB253    SXTB	R3, R2
; chessPattern end address is: 8 (R2)
; pattern end address is: 12 (R3)
0x374E	0xB25A    SXTB	R2, R3
;__irgrid2_driver.c, 1244 :: 		}
L_irgrid2_CalculateTo181:
;__irgrid2_driver.c, 1246 :: 		if(pattern == frameData[833])
; pattern start address is: 8 (R2)
0x3750	0xF2076382  ADDW	R3, R7, #1666
0x3754	0x881B    LDRH	R3, [R3, #0]
0x3756	0x429A    CMP	R2, R3
0x3758	0xF040817E  BNE	L_irgrid2_CalculateTo182
; pattern end address is: 8 (R2)
;__irgrid2_driver.c, 1248 :: 		irData = frameData[pixelNumber];
0x375C	0xEA4F034C  LSL	R3, R12, #1
0x3760	0x18FB    ADDS	R3, R7, R3
0x3762	0x881B    LDRH	R3, [R3, #0]
0x3764	0xEE003A90  VMOV	S1, R3
0x3768	0xEEF80A60  VCVT.F32.U32	S1, S1
0x376C	0xEDCD0A07  VSTR.32	S1, [SP, #28]
;__irgrid2_driver.c, 1249 :: 		if(irData > 32767)
0x3770	0x4BC5    LDR	R3, [PC, #788]
0x3772	0xEE003A10  VMOV	S0, R3
0x3776	0xEEF40AC0  VCMPE.F32	S1, S0
0x377A	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x377E	0xDD09    BLE	L_irgrid2_CalculateTo183
;__irgrid2_driver.c, 1251 :: 		irData = irData - 65536;
0x3780	0xEDDD0A07  VLDR.32	S1, [SP, #28]
0x3784	0xF04F438F  MOV	R3, #1199570944
0x3788	0xEE003A10  VMOV	S0, R3
0x378C	0xEE300AC0  VSUB.F32	S0, S1, S0
0x3790	0xED8D0A07  VSTR.32	S0, [SP, #28]
;__irgrid2_driver.c, 1252 :: 		}
L_irgrid2_CalculateTo183:
;__irgrid2_driver.c, 1253 :: 		irData = irData * gain;
0x3794	0xED9D0A07  VLDR.32	S0, [SP, #28]
0x3798	0xEE601A05  VMUL.F32	S3, S0, S10
0x379C	0xEDCD1A07  VSTR.32	S3, [SP, #28]
;__irgrid2_driver.c, 1255 :: 		irData = irData - params->offset[pixelNumber]*(1 + params->kta[pixelNumber]*(ta - 25))*(1 + params->kv[pixelNumber]*(vdd - 3.3));
0x37A0	0xF6084444  ADDW	R4, R8, #3140
0x37A4	0xEA4F034C  LSL	R3, R12, #1
0x37A8	0x18E5    ADDS	R5, R4, R3
0x37AA	0xF2412344  MOVW	R3, #4676
0x37AE	0xEB080303  ADD	R3, R8, R3, LSL #0
0x37B2	0xEA4F068C  LSL	R6, R12, #2
0x37B6	0x199C    ADDS	R4, R3, R6
0x37B8	0xEEB30A09  VMOV.F32	S0, #25
0x37BC	0xEE740A40  VSUB.F32	S1, S8, S0
0x37C0	0xED140A00  VLDR.32	S0, [R4, #0]
0x37C4	0xEE600A20  VMUL.F32	S1, S0, S1
0x37C8	0xEEB70A00  VMOV.F32	S0, #1
0x37CC	0xEE700A20  VADD.F32	S1, S0, S1
0x37D0	0xF9B53000  LDRSH	R3, [R5, #0]
0x37D4	0xEE003A10  VMOV	S0, R3
0x37D8	0xEEB80AC0  VCVT.F32.S32	S0, S0
0x37DC	0xEE201A20  VMUL.F32	S2, S0, S1
0x37E0	0xF6416344  MOVW	R3, #7748
0x37E4	0xEB080303  ADD	R3, R8, R3, LSL #0
0x37E8	0x199C    ADDS	R4, R3, R6
0x37EA	0x4BA8    LDR	R3, [PC, #672]
0x37EC	0xEE003A10  VMOV	S0, R3
0x37F0	0xEE730AC0  VSUB.F32	S1, S7, S0
0x37F4	0xED140A00  VLDR.32	S0, [R4, #0]
0x37F8	0xEE600A20  VMUL.F32	S1, S0, S1
0x37FC	0xEEB70A00  VMOV.F32	S0, #1
0x3800	0xEE300A20  VADD.F32	S0, S0, S1
0x3804	0xEE210A00  VMUL.F32	S0, S2, S0
0x3808	0xEE310AC0  VSUB.F32	S0, S3, S0
0x380C	0xED8D0A07  VSTR.32	S0, [SP, #28]
;__irgrid2_driver.c, 1256 :: 		if(mode !=  params->calibrationModeEE)
0x3810	0xF1080325  ADD	R3, R8, #37
0x3814	0x781B    LDRB	R3, [R3, #0]
0x3816	0x459B    CMP	R11, R3
0x3818	0xD022    BEQ	L_irgrid2_CalculateTo184
;__irgrid2_driver.c, 1258 :: 		irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern;
0x381A	0xF6422350  MOVW	R3, #10832
0x381E	0xEB080503  ADD	R5, R8, R3, LSL #0
0x3822	0xF2050408  ADDW	R4, R5, #8
0x3826	0x0043    LSLS	R3, R0, #1
0x3828	0xB21B    SXTH	R3, R3
; ilPattern end address is: 0 (R0)
0x382A	0x1E5B    SUBS	R3, R3, #1
0x382C	0xB21B    SXTH	R3, R3
0x382E	0xEE003A90  VMOV	S1, R3
0x3832	0xEEF80AE0  VCVT.F32.S32	S1, S1
0x3836	0xED140A00  VLDR.32	S0, [R4, #0]
0x383A	0xEE600A20  VMUL.F32	S1, S0, S1
0x383E	0xED9D0A07  VLDR.32	S0, [SP, #28]
0x3842	0xEE301A20  VADD.F32	S2, S0, S1
0x3846	0x1D2B    ADDS	R3, R5, #4
0x3848	0xEE001A90  VMOV	S1, R1
0x384C	0xEEF80AE0  VCVT.F32.S32	S1, S1
; conversionPattern end address is: 4 (R1)
0x3850	0xED130A00  VLDR.32	S0, [R3, #0]
0x3854	0xEE200A20  VMUL.F32	S0, S0, S1
0x3858	0xEE310A40  VSUB.F32	S0, S2, S0
0x385C	0xED8D0A07  VSTR.32	S0, [SP, #28]
;__irgrid2_driver.c, 1259 :: 		}
L_irgrid2_CalculateTo184:
;__irgrid2_driver.c, 1261 :: 		irData = irData / emissivity;
0x3860	0xED9D0A07  VLDR.32	S0, [SP, #28]
0x3864	0xEE801A03  VDIV.F32	S2, S0, S6
0x3868	0xED8D1A07  VSTR.32	S2, [SP, #28]
;__irgrid2_driver.c, 1263 :: 		irData = irData - params->tgc * irDataCP[subPage];
0x386C	0xF1080618  ADD	R6, R8, #24
0x3870	0xAB05    ADD	R3, SP, #20
0x3872	0xEA4F058A  LSL	R5, R10, #2
0x3876	0x195B    ADDS	R3, R3, R5
0x3878	0xED530A00  VLDR.32	S1, [R3, #0]
0x387C	0xED160A00  VLDR.32	S0, [R6, #0]
0x3880	0xEE200A20  VMUL.F32	S0, S0, S1
0x3884	0xEE310A40  VSUB.F32	S0, S2, S0
0x3888	0xED8D0A07  VSTR.32	S0, [SP, #28]
;__irgrid2_driver.c, 1265 :: 		alphaCompensated = (params->alpha[pixelNumber] - params->tgc * params->cpAlpha[subPage])*(1 + params->KsTa * (ta - 25));
0x388C	0xF1080444  ADD	R4, R8, #68
0x3890	0xEA4F038C  LSL	R3, R12, #2
0x3894	0x18E3    ADDS	R3, R4, R3
0x3896	0xED131A00  VLDR.32	S2, [R3, #0]
0x389A	0xF6422344  MOVW	R3, #10820
0x389E	0xEB080303  ADD	R3, R8, R3, LSL #0
0x38A2	0x195B    ADDS	R3, R3, R5
0x38A4	0xED530A00  VLDR.32	S1, [R3, #0]
0x38A8	0xED160A00  VLDR.32	S0, [R6, #0]
0x38AC	0xEE200A20  VMUL.F32	S0, S0, S1
0x38B0	0xEE311A40  VSUB.F32	S2, S2, S0
0x38B4	0xF1080328  ADD	R3, R8, #40
0x38B8	0xEEB30A09  VMOV.F32	S0, #25
0x38BC	0xEE740A40  VSUB.F32	S1, S8, S0
0x38C0	0xED130A00  VLDR.32	S0, [R3, #0]
0x38C4	0xEE600A20  VMUL.F32	S1, S0, S1
0x38C8	0xEEB70A00  VMOV.F32	S0, #1
0x38CC	0xEE300A20  VADD.F32	S0, S0, S1
0x38D0	0xEE210A00  VMUL.F32	S0, S2, S0
0x38D4	0xED8D0A08  VSTR.32	S0, [SP, #32]
;__irgrid2_driver.c, 1267 :: 		Sx = _pow(alphaCompensated, 3) * (irData + alphaCompensated * taTr);
0x38D8	0xEEF00A08  VMOV.F32	S1, #3
0x38DC	0xEEB00A40  VMOV.F32	S0, S0
0x38E0	0xF7FDFFAC  BL	__irgrid2_driver__pow+0
0x38E4	0xEDDD0A08  VLDR.32	S1, [SP, #32]
0x38E8	0xEE201AA4  VMUL.F32	S2, S1, S9
0x38EC	0xEDDD0A07  VLDR.32	S1, [SP, #28]
0x38F0	0xEE700A81  VADD.F32	S1, S1, S2
0x38F4	0xEE200A20  VMUL.F32	S0, S0, S1
;__irgrid2_driver.c, 1268 :: 		Sx = _pow(Sx,0.25) * params->ksTo[1];
0x38F8	0xEEF50A00  VMOV.F32	S1, #0.25
0x38FC	0xEEB00A40  VMOV.F32	S0, S0
0x3900	0xF7FDFF9C  BL	__irgrid2_driver__pow+0
0x3904	0xF108042C  ADD	R4, R8, #44
0x3908	0x1D23    ADDS	R3, R4, #4
0x390A	0xED530A00  VLDR.32	S1, [R3, #0]
0x390E	0xEE201A20  VMUL.F32	S2, S0, S1
;__irgrid2_driver.c, 1270 :: 		To = _pow((irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr),0.25) - 273.15;
0x3912	0x1D23    ADDS	R3, R4, #4
0x3914	0xED530A00  VLDR.32	S1, [R3, #0]
0x3918	0x4B5D    LDR	R3, [PC, #372]
0x391A	0xEE003A10  VMOV	S0, R3
0x391E	0xEE600A80  VMUL.F32	S1, S1, S0
0x3922	0xEEB70A00  VMOV.F32	S0, #1
0x3926	0xEE700A60  VSUB.F32	S1, S0, S1
0x392A	0xED9D0A08  VLDR.32	S0, [SP, #32]
0x392E	0xEE200A20  VMUL.F32	S0, S0, S1
0x3932	0xEE700A01  VADD.F32	S1, S0, S2
0x3936	0xED9D0A07  VLDR.32	S0, [SP, #28]
0x393A	0xEE800A20  VDIV.F32	S0, S0, S1
0x393E	0xEE300A24  VADD.F32	S0, S0, S9
0x3942	0xEEF50A00  VMOV.F32	S1, #0.25
0x3946	0xF7FDFF79  BL	__irgrid2_driver__pow+0
0x394A	0x4B51    LDR	R3, [PC, #324]
0x394C	0xEE003A90  VMOV	S1, R3
0x3950	0xEE700A60  VSUB.F32	S1, S0, S1
0x3954	0xEDCD0A09  VSTR.32	S1, [SP, #36]
;__irgrid2_driver.c, 1272 :: 		if(To < params->ct[1])
0x3958	0xF108033C  ADD	R3, R8, #60
0x395C	0x1C9B    ADDS	R3, R3, #2
0x395E	0xF9B33000  LDRSH	R3, [R3, #0]
0x3962	0xEE003A10  VMOV	S0, R3
0x3966	0xEEB80AC0  VCVT.F32.S32	S0, S0
0x396A	0xEEF40AC0  VCMPE.F32	S1, S0
0x396E	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x3972	0xDA04    BGE	L_irgrid2_CalculateTo185
;__irgrid2_driver.c, 1274 :: 		range = 0;
0x3974	0x2300    MOVS	R3, #0
0x3976	0xB25B    SXTB	R3, R3
0x3978	0xF88D3038  STRB	R3, [SP, #56]
;__irgrid2_driver.c, 1275 :: 		}
0x397C	0xE02D    B	L_irgrid2_CalculateTo186
L_irgrid2_CalculateTo185:
;__irgrid2_driver.c, 1276 :: 		else if(To < params->ct[2])
0x397E	0xF108033C  ADD	R3, R8, #60
0x3982	0x1D1B    ADDS	R3, R3, #4
0x3984	0xF9B33000  LDRSH	R3, [R3, #0]
0x3988	0xEE003A90  VMOV	S1, R3
0x398C	0xEEF80AE0  VCVT.F32.S32	S1, S1
0x3990	0xED9D0A09  VLDR.32	S0, [SP, #36]
0x3994	0xEEB40AE0  VCMPE.F32	S0, S1
0x3998	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x399C	0xDA04    BGE	L_irgrid2_CalculateTo187
;__irgrid2_driver.c, 1278 :: 		range = 1;
0x399E	0x2301    MOVS	R3, #1
0x39A0	0xB25B    SXTB	R3, R3
0x39A2	0xF88D3038  STRB	R3, [SP, #56]
;__irgrid2_driver.c, 1279 :: 		}
0x39A6	0xE018    B	L_irgrid2_CalculateTo188
L_irgrid2_CalculateTo187:
;__irgrid2_driver.c, 1280 :: 		else if(To < params->ct[3])
0x39A8	0xF108033C  ADD	R3, R8, #60
0x39AC	0x1D9B    ADDS	R3, R3, #6
0x39AE	0xF9B33000  LDRSH	R3, [R3, #0]
0x39B2	0xEE003A90  VMOV	S1, R3
0x39B6	0xEEF80AE0  VCVT.F32.S32	S1, S1
0x39BA	0xED9D0A09  VLDR.32	S0, [SP, #36]
0x39BE	0xEEB40AE0  VCMPE.F32	S0, S1
0x39C2	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x39C6	0xDA04    BGE	L_irgrid2_CalculateTo189
;__irgrid2_driver.c, 1282 :: 		range = 2;
0x39C8	0x2302    MOVS	R3, #2
0x39CA	0xB25B    SXTB	R3, R3
0x39CC	0xF88D3038  STRB	R3, [SP, #56]
;__irgrid2_driver.c, 1283 :: 		}
0x39D0	0xE003    B	L_irgrid2_CalculateTo190
L_irgrid2_CalculateTo189:
;__irgrid2_driver.c, 1286 :: 		range = 3;
0x39D2	0x2303    MOVS	R3, #3
0x39D4	0xB25B    SXTB	R3, R3
0x39D6	0xF88D3038  STRB	R3, [SP, #56]
;__irgrid2_driver.c, 1287 :: 		}
L_irgrid2_CalculateTo190:
L_irgrid2_CalculateTo188:
L_irgrid2_CalculateTo186:
;__irgrid2_driver.c, 1289 :: 		To = _pow((irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr),0.25) - 273.15;
0x39DA	0xAC0A    ADD	R4, SP, #40
0x39DC	0xF99D3038  LDRSB	R3, [SP, #56]
0x39E0	0x009D    LSLS	R5, R3, #2
0x39E2	0x1963    ADDS	R3, R4, R5
0x39E4	0xED530A00  VLDR.32	S1, [R3, #0]
0x39E8	0xED9D0A08  VLDR.32	S0, [SP, #32]
0x39EC	0xEE201A20  VMUL.F32	S2, S0, S1
0x39F0	0xF108032C  ADD	R3, R8, #44
0x39F4	0x195D    ADDS	R5, R3, R5
0x39F6	0xF108043C  ADD	R4, R8, #60
0x39FA	0xF99D3038  LDRSB	R3, [SP, #56]
0x39FE	0x005B    LSLS	R3, R3, #1
0x3A00	0x18E3    ADDS	R3, R4, R3
0x3A02	0xF9B33000  LDRSH	R3, [R3, #0]
0x3A06	0xEE003A90  VMOV	S1, R3
0x3A0A	0xEEF80AE0  VCVT.F32.S32	S1, S1
0x3A0E	0xED9D0A09  VLDR.32	S0, [SP, #36]
0x3A12	0xEE700A60  VSUB.F32	S1, S0, S1
0x3A16	0xED150A00  VLDR.32	S0, [R5, #0]
0x3A1A	0xEE600A20  VMUL.F32	S1, S0, S1
0x3A1E	0xEEB70A00  VMOV.F32	S0, #1
0x3A22	0xEE300A20  VADD.F32	S0, S0, S1
0x3A26	0xEE610A00  VMUL.F32	S1, S2, S0
0x3A2A	0xED9D0A07  VLDR.32	S0, [SP, #28]
0x3A2E	0xEE800A20  VDIV.F32	S0, S0, S1
0x3A32	0xEE300A24  VADD.F32	S0, S0, S9
0x3A36	0xEEF50A00  VMOV.F32	S1, #0.25
0x3A3A	0xF7FDFEFF  BL	__irgrid2_driver__pow+0
0x3A3E	0x4B14    LDR	R3, [PC, #80]
0x3A40	0xEE003A90  VMOV	S1, R3
0x3A44	0xEE300A60  VSUB.F32	S0, S0, S1
0x3A48	0xED8D0A09  VSTR.32	S0, [SP, #36]
;__irgrid2_driver.c, 1291 :: 		result[pixelNumber] = To;
0x3A4C	0xEA4F038C  LSL	R3, R12, #2
0x3A50	0xEB090303  ADD	R3, R9, R3, LSL #0
0x3A54	0xED030A00  VSTR.32	S0, [R3, #0]
;__irgrid2_driver.c, 1292 :: 		}
L_irgrid2_CalculateTo182:
;__irgrid2_driver.c, 1231 :: 		for(pixelNumber = 0; pixelNumber < 768; pixelNumber++)
0x3A58	0xF10C0C01  ADD	R12, R12, #1
0x3A5C	0xFA0FFC8C  SXTH	R12, R12
;__irgrid2_driver.c, 1293 :: 		}
0x3A60	0x9701    STR	R7, [SP, #4]
; frameData end address is: 28 (R7)
; params end address is: 32 (R8)
; emissivity end address is: 24 (S6)
; result end address is: 36 (R9)
; subPage end address is: 40 (R10)
; vdd end address is: 28 (S7)
; ta end address is: 32 (S8)
; taTr end address is: 36 (S9)
; gain end address is: 40 (S10)
; mode end address is: 44 (R11)
; pixelNumber end address is: 48 (R12)
0x3A62	0xF8CD8008  STR	R8, [SP, #8]
0x3A66	0xF8CD900C  STR	R9, [SP, #12]
0x3A6A	0xF8ADA010  STRH	R10, [SP, #16]
0x3A6E	0xF8BDA010  LDRH	R10, [SP, #16]
0x3A72	0xF8DD900C  LDR	R9, [SP, #12]
0x3A76	0xF8DD8008  LDR	R8, [SP, #8]
0x3A7A	0x9F01    LDR	R7, [SP, #4]
0x3A7C	0xE60E    B	L_irgrid2_CalculateTo177
L_irgrid2_CalculateTo178:
;__irgrid2_driver.c, 1294 :: 		}
L_end_irgrid2_CalculateTo:
0x3A7E	0xF8DDE000  LDR	LR, [SP, #0]
0x3A82	0xB00F    ADD	SP, SP, #60
0x3A84	0x4770    BX	LR
0x3A86	0xBF00    NOP
0x3A88	0xFE0046FF  	#1191181824
0x3A8C	0x33334053  	#1079194419
0x3A90	0x93334388  	#1133024051
; end of _irgrid2_CalculateTo
_FloatToStr:
;__Lib_Conversions.c, 631 :: 		
; str start address is: 0 (R0)
0x3D94	0xB083    SUB	SP, SP, #12
0x3D96	0xF8CDE000  STR	LR, [SP, #0]
; fnum start address is: 0 (S0)
0x3D9A	0x4604    MOV	R4, R0
; str end address is: 0 (R0)
; fnum end address is: 0 (S0)
; fnum start address is: 0 (S0)
; str start address is: 16 (R4)
;__Lib_Conversions.c, 633 :: 		
; bpoint start address is: 0 (R0)
0x3D9C	0x2000    MOVS	R0, #0
;__Lib_Conversions.c, 635 :: 		
; dexpon start address is: 12 (R3)
0x3D9E	0x2300    MOVS	R3, #0
0x3DA0	0xB25B    SXTB	R3, R3
;__Lib_Conversions.c, 638 :: 		
0x3DA2	0xED8D0A02  VSTR.32	S0, [SP, #8]
; fnum end address is: 0 (S0)
;__Lib_Conversions.c, 639 :: 		
0x3DA6	0x9902    LDR	R1, [SP, #8]
0x3DA8	0xF1B13FFF  CMP	R1, #-1
0x3DAC	0xD105    BNE	L_FloatToStr117
; bpoint end address is: 0 (R0)
; dexpon end address is: 12 (R3)
;__Lib_Conversions.c, 640 :: 		
0x3DAE	0x4970    LDR	R1, [PC, #448]
0x3DB0	0x4620    MOV	R0, R4
; str end address is: 16 (R4)
0x3DB2	0xF7FFF9EB  BL	_strcpy+0
;__Lib_Conversions.c, 641 :: 		
0x3DB6	0x2003    MOVS	R0, #3
0x3DB8	0xE0D5    B	L_end_FloatToStr
;__Lib_Conversions.c, 642 :: 		
L_FloatToStr117:
;__Lib_Conversions.c, 643 :: 		
; dexpon start address is: 12 (R3)
; str start address is: 16 (R4)
; i start address is: 20 (R5)
; bpoint start address is: 0 (R0)
0x3DBA	0x2501    MOVS	R5, #1
;__Lib_Conversions.c, 644 :: 		
0x3DBC	0xA902    ADD	R1, SP, #8
0x3DBE	0x1CC9    ADDS	R1, R1, #3
0x3DC0	0x7809    LDRB	R1, [R1, #0]
0x3DC2	0xF0010180  AND	R1, R1, #128
0x3DC6	0xB2C9    UXTB	R1, R1
0x3DC8	0xB169    CBZ	R1, L__FloatToStr179
;__Lib_Conversions.c, 645 :: 		
0x3DCA	0xA902    ADD	R1, SP, #8
0x3DCC	0x1CCA    ADDS	R2, R1, #3
0x3DCE	0x7811    LDRB	R1, [R2, #0]
0x3DD0	0xF0810180  EOR	R1, R1, #128
0x3DD4	0x7011    STRB	R1, [R2, #0]
;__Lib_Conversions.c, 646 :: 		
0x3DD6	0x1C69    ADDS	R1, R5, #1
; i end address is: 20 (R5)
; i start address is: 8 (R2)
0x3DD8	0xB2CA    UXTB	R2, R1
;__Lib_Conversions.c, 647 :: 		
0x3DDA	0x212D    MOVS	R1, #45
0x3DDC	0x7021    STRB	R1, [R4, #0]
0x3DDE	0x1C64    ADDS	R4, R4, #1
; i end address is: 8 (R2)
; str end address is: 16 (R4)
0x3DE0	0xB2D7    UXTB	R7, R2
0x3DE2	0x4626    MOV	R6, R4
;__Lib_Conversions.c, 648 :: 		
0x3DE4	0xE001    B	L_FloatToStr118
L__FloatToStr179:
;__Lib_Conversions.c, 644 :: 		
0x3DE6	0x4626    MOV	R6, R4
0x3DE8	0xB2EF    UXTB	R7, R5
;__Lib_Conversions.c, 648 :: 		
L_FloatToStr118:
;__Lib_Conversions.c, 649 :: 		
; str start address is: 24 (R6)
; i start address is: 28 (R7)
0x3DEA	0x9902    LDR	R1, [SP, #8]
0x3DEC	0xB929    CBNZ	R1, L_FloatToStr119
; bpoint end address is: 0 (R0)
; i end address is: 28 (R7)
; dexpon end address is: 12 (R3)
;__Lib_Conversions.c, 650 :: 		
0x3DEE	0x4961    LDR	R1, [PC, #388]
0x3DF0	0x4630    MOV	R0, R6
; str end address is: 24 (R6)
0x3DF2	0xF7FFF9CB  BL	_strcpy+0
;__Lib_Conversions.c, 651 :: 		
0x3DF6	0x2000    MOVS	R0, #0
0x3DF8	0xE0B5    B	L_end_FloatToStr
;__Lib_Conversions.c, 652 :: 		
L_FloatToStr119:
;__Lib_Conversions.c, 653 :: 		
; dexpon start address is: 12 (R3)
; i start address is: 28 (R7)
; str start address is: 24 (R6)
; bpoint start address is: 0 (R0)
0x3DFA	0x9902    LDR	R1, [SP, #8]
0x3DFC	0xF1B14FFF  CMP	R1, #2139095040
0x3E00	0xD105    BNE	L_FloatToStr120
; bpoint end address is: 0 (R0)
; dexpon end address is: 12 (R3)
;__Lib_Conversions.c, 654 :: 		
0x3E02	0x495D    LDR	R1, [PC, #372]
0x3E04	0x4630    MOV	R0, R6
; str end address is: 24 (R6)
0x3E06	0xF7FFF9C1  BL	_strcpy+0
;__Lib_Conversions.c, 655 :: 		
0x3E0A	0xB2F8    UXTB	R0, R7
; i end address is: 28 (R7)
0x3E0C	0xE0AB    B	L_end_FloatToStr
;__Lib_Conversions.c, 656 :: 		
L_FloatToStr120:
;__Lib_Conversions.c, 664 :: 		
; dexpon start address is: 12 (R3)
; str start address is: 24 (R6)
; bpoint start address is: 0 (R0)
0x3E0E	0xF88D3004  STRB	R3, [SP, #4]
; str end address is: 24 (R6)
; dexpon end address is: 12 (R3)
0x3E12	0xB2C3    UXTB	R3, R0
0x3E14	0x4634    MOV	R4, R6
0x3E16	0xF99D0004  LDRSB	R0, [SP, #4]
L_FloatToStr121:
; bpoint end address is: 0 (R0)
; str start address is: 16 (R4)
; dexpon start address is: 0 (R0)
; bpoint start address is: 12 (R3)
0x3E1A	0xEDDD0A02  VLDR.32	S1, [SP, #8]
0x3E1E	0xEEB70A00  VMOV.F32	S0, #1
0x3E22	0xEEF40AC0  VCMPE.F32	S1, S0
0x3E26	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x3E2A	0xDA0A    BGE	L_FloatToStr122
;__Lib_Conversions.c, 665 :: 		
0x3E2C	0xEDDD0A02  VLDR.32	S1, [SP, #8]
0x3E30	0xEEB20A04  VMOV.F32	S0, #10
0x3E34	0xEE200A80  VMUL.F32	S0, S1, S0
0x3E38	0xED8D0A02  VSTR.32	S0, [SP, #8]
;__Lib_Conversions.c, 666 :: 		
0x3E3C	0x1E40    SUBS	R0, R0, #1
0x3E3E	0xB240    SXTB	R0, R0
;__Lib_Conversions.c, 667 :: 		
0x3E40	0xE7EB    B	L_FloatToStr121
L_FloatToStr122:
;__Lib_Conversions.c, 672 :: 		
; bpoint end address is: 12 (R3)
; dexpon end address is: 0 (R0)
L_FloatToStr123:
; str end address is: 16 (R4)
; bpoint start address is: 12 (R3)
; dexpon start address is: 0 (R0)
; str start address is: 16 (R4)
0x3E42	0xEDDD0A02  VLDR.32	S1, [SP, #8]
0x3E46	0xEEB20A04  VMOV.F32	S0, #10
0x3E4A	0xEEF40AC0  VCMPE.F32	S1, S0
0x3E4E	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x3E52	0xDB0B    BLT	L_FloatToStr124
;__Lib_Conversions.c, 673 :: 		
0x3E54	0xEDDD0A02  VLDR.32	S1, [SP, #8]
0x3E58	0x4948    LDR	R1, [PC, #288]
0x3E5A	0xEE001A10  VMOV	S0, R1
0x3E5E	0xEE200A80  VMUL.F32	S0, S1, S0
0x3E62	0xED8D0A02  VSTR.32	S0, [SP, #8]
;__Lib_Conversions.c, 674 :: 		
0x3E66	0x1C40    ADDS	R0, R0, #1
0x3E68	0xB240    SXTB	R0, R0
;__Lib_Conversions.c, 675 :: 		
0x3E6A	0xE7EA    B	L_FloatToStr123
L_FloatToStr124:
;__Lib_Conversions.c, 680 :: 		
0x3E6C	0x9902    LDR	R1, [SP, #8]
0x3E6E	0x0049    LSLS	R1, R1, #1
0x3E70	0x9102    STR	R1, [SP, #8]
;__Lib_Conversions.c, 689 :: 		
0x3E72	0xA902    ADD	R1, SP, #8
0x3E74	0x1CC9    ADDS	R1, R1, #3
0x3E76	0x7809    LDRB	R1, [R1, #0]
0x3E78	0x397F    SUBS	R1, #127
; d start address is: 20 (R5)
0x3E7A	0xB2CD    UXTB	R5, R1
;__Lib_Conversions.c, 692 :: 		
0x3E7C	0xA902    ADD	R1, SP, #8
0x3E7E	0x1CCA    ADDS	R2, R1, #3
0x3E80	0x2101    MOVS	R1, #1
0x3E82	0x7011    STRB	R1, [R2, #0]
;__Lib_Conversions.c, 693 :: 		
0x3E84	0x9902    LDR	R1, [SP, #8]
0x3E86	0x40A9    LSLS	R1, R5
; d end address is: 20 (R5)
0x3E88	0x9102    STR	R1, [SP, #8]
;__Lib_Conversions.c, 694 :: 		
0x3E8A	0xA902    ADD	R1, SP, #8
0x3E8C	0x1CC9    ADDS	R1, R1, #3
0x3E8E	0x7809    LDRB	R1, [R1, #0]
0x3E90	0x3130    ADDS	R1, #48
0x3E92	0x7021    STRB	R1, [R4, #0]
0x3E94	0x1C62    ADDS	R2, R4, #1
; str end address is: 16 (R4)
; str start address is: 8 (R2)
;__Lib_Conversions.c, 695 :: 		
0x3E96	0x2801    CMP	R0, #1
0x3E98	0xDB03    BLT	L__FloatToStr178
0x3E9A	0x2806    CMP	R0, #6
0x3E9C	0xDC01    BGT	L__FloatToStr177
0x3E9E	0x4615    MOV	R5, R2
; bpoint end address is: 12 (R3)
0x3EA0	0xE003    B	L_FloatToStr127
L__FloatToStr178:
L__FloatToStr177:
;__Lib_Conversions.c, 696 :: 		
0x3EA2	0x212E    MOVS	R1, #46
0x3EA4	0x7011    STRB	R1, [R2, #0]
0x3EA6	0x1C55    ADDS	R5, R2, #1
; str end address is: 8 (R2)
; str start address is: 20 (R5)
;__Lib_Conversions.c, 697 :: 		
; bpoint start address is: 12 (R3)
0x3EA8	0x2301    MOVS	R3, #1
; str end address is: 20 (R5)
; bpoint end address is: 12 (R3)
;__Lib_Conversions.c, 698 :: 		
L_FloatToStr127:
;__Lib_Conversions.c, 699 :: 		
; bpoint start address is: 12 (R3)
; str start address is: 20 (R5)
; d start address is: 4 (R1)
0x3EAA	0x2106    MOVS	R1, #6
; d end address is: 4 (R1)
; str end address is: 20 (R5)
; bpoint end address is: 12 (R3)
; dexpon end address is: 0 (R0)
0x3EAC	0xB244    SXTB	R4, R0
0x3EAE	0xB2C8    UXTB	R0, R1
L_FloatToStr128:
; d start address is: 0 (R0)
; str start address is: 20 (R5)
; bpoint start address is: 12 (R3)
; dexpon start address is: 16 (R4)
0x3EB0	0xB310    CBZ	R0, L_FloatToStr129
;__Lib_Conversions.c, 700 :: 		
0x3EB2	0xA902    ADD	R1, SP, #8
0x3EB4	0x1CCA    ADDS	R2, R1, #3
0x3EB6	0x2100    MOVS	R1, #0
0x3EB8	0x7011    STRB	R1, [R2, #0]
;__Lib_Conversions.c, 701 :: 		
0x3EBA	0x9902    LDR	R1, [SP, #8]
0x3EBC	0x008A    LSLS	R2, R1, #2
0x3EBE	0x9902    LDR	R1, [SP, #8]
0x3EC0	0x1889    ADDS	R1, R1, R2
0x3EC2	0x9102    STR	R1, [SP, #8]
;__Lib_Conversions.c, 702 :: 		
0x3EC4	0x9902    LDR	R1, [SP, #8]
0x3EC6	0x0049    LSLS	R1, R1, #1
0x3EC8	0x9102    STR	R1, [SP, #8]
;__Lib_Conversions.c, 703 :: 		
0x3ECA	0xA902    ADD	R1, SP, #8
0x3ECC	0x1CC9    ADDS	R1, R1, #3
0x3ECE	0x7809    LDRB	R1, [R1, #0]
0x3ED0	0x3130    ADDS	R1, #48
0x3ED2	0x7029    STRB	R1, [R5, #0]
0x3ED4	0x1C6D    ADDS	R5, R5, #1
;__Lib_Conversions.c, 704 :: 		
0x3ED6	0xB963    CBNZ	R3, L__FloatToStr181
;__Lib_Conversions.c, 705 :: 		
0x3ED8	0x1E61    SUBS	R1, R4, #1
0x3EDA	0xB249    SXTB	R1, R1
; dexpon end address is: 16 (R4)
; dexpon start address is: 8 (R2)
0x3EDC	0xB24A    SXTB	R2, R1
0x3EDE	0xB921    CBNZ	R1, L__FloatToStr180
; bpoint end address is: 12 (R3)
;__Lib_Conversions.c, 706 :: 		
0x3EE0	0x212E    MOVS	R1, #46
0x3EE2	0x7029    STRB	R1, [R5, #0]
0x3EE4	0x1C6D    ADDS	R5, R5, #1
;__Lib_Conversions.c, 707 :: 		
; bpoint start address is: 4 (R1)
0x3EE6	0x2101    MOVS	R1, #1
; bpoint end address is: 4 (R1)
; str end address is: 20 (R5)
;__Lib_Conversions.c, 708 :: 		
0x3EE8	0xE000    B	L_FloatToStr132
L__FloatToStr180:
;__Lib_Conversions.c, 705 :: 		
0x3EEA	0xB2D9    UXTB	R1, R3
;__Lib_Conversions.c, 708 :: 		
L_FloatToStr132:
; bpoint start address is: 4 (R1)
; str start address is: 20 (R5)
0x3EEC	0xB254    SXTB	R4, R2
; dexpon end address is: 8 (R2)
; bpoint end address is: 4 (R1)
; str end address is: 20 (R5)
0x3EEE	0xB2CB    UXTB	R3, R1
0x3EF0	0xE7FF    B	L_FloatToStr131
L__FloatToStr181:
;__Lib_Conversions.c, 704 :: 		
;__Lib_Conversions.c, 708 :: 		
L_FloatToStr131:
;__Lib_Conversions.c, 699 :: 		
; str start address is: 20 (R5)
; bpoint start address is: 12 (R3)
; dexpon start address is: 16 (R4)
0x3EF2	0x1E40    SUBS	R0, R0, #1
0x3EF4	0xB2C0    UXTB	R0, R0
;__Lib_Conversions.c, 709 :: 		
; bpoint end address is: 12 (R3)
; d end address is: 0 (R0)
0x3EF6	0xE7DB    B	L_FloatToStr128
L_FloatToStr129:
;__Lib_Conversions.c, 710 :: 		
0x3EF8	0x462A    MOV	R2, R5
; dexpon end address is: 16 (R4)
0x3EFA	0xB260    SXTB	R0, R4
L_FloatToStr133:
; str end address is: 20 (R5)
; dexpon start address is: 0 (R0)
; str start address is: 8 (R2)
0x3EFC	0x1E51    SUBS	R1, R2, #1
0x3EFE	0x7809    LDRB	R1, [R1, #0]
0x3F00	0x2930    CMP	R1, #48
0x3F02	0xD101    BNE	L_FloatToStr134
;__Lib_Conversions.c, 711 :: 		
0x3F04	0x1E52    SUBS	R2, R2, #1
0x3F06	0xE7F9    B	L_FloatToStr133
L_FloatToStr134:
;__Lib_Conversions.c, 712 :: 		
0x3F08	0x1E51    SUBS	R1, R2, #1
0x3F0A	0x7809    LDRB	R1, [R1, #0]
0x3F0C	0x292E    CMP	R1, #46
0x3F0E	0xD101    BNE	L__FloatToStr182
;__Lib_Conversions.c, 713 :: 		
0x3F10	0x1E52    SUBS	R2, R2, #1
; str end address is: 8 (R2)
0x3F12	0xE7FF    B	L_FloatToStr135
L__FloatToStr182:
;__Lib_Conversions.c, 712 :: 		
;__Lib_Conversions.c, 713 :: 		
L_FloatToStr135:
;__Lib_Conversions.c, 714 :: 		
; str start address is: 8 (R2)
0x3F14	0xB318    CBZ	R0, L__FloatToStr185
;__Lib_Conversions.c, 715 :: 		
0x3F16	0x2165    MOVS	R1, #101
0x3F18	0x7011    STRB	R1, [R2, #0]
0x3F1A	0x1C52    ADDS	R2, R2, #1
;__Lib_Conversions.c, 716 :: 		
0x3F1C	0x2800    CMP	R0, #0
0x3F1E	0xDA06    BGE	L__FloatToStr183
;__Lib_Conversions.c, 717 :: 		
0x3F20	0x212D    MOVS	R1, #45
0x3F22	0x7011    STRB	R1, [R2, #0]
0x3F24	0x1C52    ADDS	R2, R2, #1
;__Lib_Conversions.c, 718 :: 		
0x3F26	0x4241    RSBS	R1, R0, #0
0x3F28	0xB248    SXTB	R0, R1
; dexpon end address is: 0 (R0)
; str end address is: 8 (R2)
0x3F2A	0xB243    SXTB	R3, R0
;__Lib_Conversions.c, 719 :: 		
0x3F2C	0xE000    B	L_FloatToStr137
L__FloatToStr183:
;__Lib_Conversions.c, 716 :: 		
0x3F2E	0xB243    SXTB	R3, R0
;__Lib_Conversions.c, 719 :: 		
L_FloatToStr137:
;__Lib_Conversions.c, 720 :: 		
; dexpon start address is: 12 (R3)
; str start address is: 8 (R2)
; d start address is: 0 (R0)
0x3F30	0xB2D8    UXTB	R0, R3
;__Lib_Conversions.c, 721 :: 		
0x3F32	0xB2D9    UXTB	R1, R3
; dexpon end address is: 12 (R3)
0x3F34	0x2909    CMP	R1, #9
0x3F36	0xD907    BLS	L__FloatToStr184
;__Lib_Conversions.c, 722 :: 		
0x3F38	0x210A    MOVS	R1, #10
0x3F3A	0xFBB0F1F1  UDIV	R1, R0, R1
0x3F3E	0xB2C9    UXTB	R1, R1
0x3F40	0x3130    ADDS	R1, #48
0x3F42	0x7011    STRB	R1, [R2, #0]
0x3F44	0x1C53    ADDS	R3, R2, #1
; str end address is: 8 (R2)
; str start address is: 12 (R3)
; str end address is: 12 (R3)
0x3F46	0xE000    B	L_FloatToStr138
L__FloatToStr184:
;__Lib_Conversions.c, 721 :: 		
0x3F48	0x4613    MOV	R3, R2
;__Lib_Conversions.c, 722 :: 		
L_FloatToStr138:
;__Lib_Conversions.c, 723 :: 		
; str start address is: 12 (R3)
0x3F4A	0x220A    MOVS	R2, #10
0x3F4C	0xFBB0F1F2  UDIV	R1, R0, R2
0x3F50	0xFB020111  MLS	R1, R2, R1, R0
0x3F54	0xB2C9    UXTB	R1, R1
; d end address is: 0 (R0)
0x3F56	0x3130    ADDS	R1, #48
0x3F58	0x7019    STRB	R1, [R3, #0]
0x3F5A	0x1C58    ADDS	R0, R3, #1
; str end address is: 12 (R3)
; str start address is: 0 (R0)
; str end address is: 0 (R0)
;__Lib_Conversions.c, 724 :: 		
0x3F5C	0xE000    B	L_FloatToStr136
L__FloatToStr185:
;__Lib_Conversions.c, 714 :: 		
0x3F5E	0x4610    MOV	R0, R2
;__Lib_Conversions.c, 724 :: 		
L_FloatToStr136:
;__Lib_Conversions.c, 725 :: 		
; str start address is: 0 (R0)
0x3F60	0x2100    MOVS	R1, #0
0x3F62	0x7001    STRB	R1, [R0, #0]
; str end address is: 0 (R0)
;__Lib_Conversions.c, 726 :: 		
0x3F64	0x2000    MOVS	R0, #0
;__Lib_Conversions.c, 727 :: 		
L_end_FloatToStr:
0x3F66	0xF8DDE000  LDR	LR, [SP, #0]
0x3F6A	0xB003    ADD	SP, SP, #12
0x3F6C	0x4770    BX	LR
0x3F6E	0xBF00    NOP
0x3F70	0x007A2000  	?lstr1___Lib_Conversions+0
0x3F74	0x007E2000  	?lstr2___Lib_Conversions+0
0x3F78	0x00802000  	?lstr3___Lib_Conversions+0
0x3F7C	0xCCCD3DCC  	#1036831949
; end of _FloatToStr
_strcpy:
;__Lib_CString.c, 133 :: 		
; from start address is: 4 (R1)
; to start address is: 0 (R0)
0x318C	0xB081    SUB	SP, SP, #4
0x318E	0x9100    STR	R1, [SP, #0]
0x3190	0x4601    MOV	R1, R0
0x3192	0x9800    LDR	R0, [SP, #0]
; from end address is: 4 (R1)
; to end address is: 0 (R0)
; to start address is: 4 (R1)
; from start address is: 0 (R0)
;__Lib_CString.c, 136 :: 		
; cp start address is: 12 (R3)
0x3194	0x460B    MOV	R3, R1
; cp end address is: 12 (R3)
; to end address is: 4 (R1)
;__Lib_CString.c, 137 :: 		
L_strcpy34:
; cp start address is: 20 (R5)
; cp start address is: 12 (R3)
; from start address is: 0 (R0)
; to start address is: 4 (R1)
0x3196	0x461C    MOV	R4, R3
0x3198	0x1C5A    ADDS	R2, R3, #1
; cp end address is: 12 (R3)
; cp start address is: 20 (R5)
0x319A	0x4615    MOV	R5, R2
; cp end address is: 20 (R5)
0x319C	0x4603    MOV	R3, R0
0x319E	0x1C42    ADDS	R2, R0, #1
0x31A0	0x4610    MOV	R0, R2
; from end address is: 0 (R0)
0x31A2	0x781A    LDRB	R2, [R3, #0]
0x31A4	0x7022    STRB	R2, [R4, #0]
0x31A6	0x7822    LDRB	R2, [R4, #0]
0x31A8	0xB10A    CBZ	R2, L_strcpy35
; cp end address is: 20 (R5)
; from end address is: 0 (R0)
;__Lib_CString.c, 138 :: 		
; from start address is: 0 (R0)
; cp start address is: 20 (R5)
; cp end address is: 20 (R5)
; from end address is: 0 (R0)
0x31AA	0x462B    MOV	R3, R5
0x31AC	0xE7F3    B	L_strcpy34
L_strcpy35:
;__Lib_CString.c, 139 :: 		
0x31AE	0x4608    MOV	R0, R1
; to end address is: 4 (R1)
;__Lib_CString.c, 140 :: 		
L_end_strcpy:
0x31B0	0xB001    ADD	SP, SP, #4
0x31B2	0x4770    BX	LR
; end of _strcpy
_Delay_1ms:
;__Lib_Delays_MSP432.c, 41 :: 		void Delay_1ms() {
;__Lib_Delays_MSP432.c, 42 :: 		Delay_ms(1);
0x3F80	0xF64267DD  MOVW	R7, #11997
0x3F84	0xF2C00700  MOVT	R7, #0
0x3F88	0xBF00    NOP
0x3F8A	0xBF00    NOP
L_Delay_1ms14:
0x3F8C	0x1E7F    SUBS	R7, R7, #1
0x3F8E	0xD1FD    BNE	L_Delay_1ms14
0x3F90	0xBF00    NOP
0x3F92	0xBF00    NOP
0x3F94	0xBF00    NOP
;__Lib_Delays_MSP432.c, 43 :: 		}
L_end_Delay_1ms:
0x3F96	0x4770    BX	LR
; end of _Delay_1ms
__Lib_System_MSP432P_InitialSetUpRCCRCC2:
;__Lib_System_MSP432P.c, 344 :: 		
0x4338	0xB083    SUB	SP, SP, #12
0x433A	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_System_MSP432P.c, 348 :: 		
; ulCSCTL0 start address is: 12 (R3)
0x433E	0x4B37    LDR	R3, [PC, #220]
;__Lib_System_MSP432P.c, 349 :: 		
; ulCSCTL1 start address is: 16 (R4)
0x4340	0x4C37    LDR	R4, [PC, #220]
;__Lib_System_MSP432P.c, 350 :: 		
; ulCSCTL2 start address is: 20 (R5)
0x4342	0x4D38    LDR	R5, [PC, #224]
;__Lib_System_MSP432P.c, 351 :: 		
; ulWDTCTL start address is: 24 (R6)
0x4344	0x4E38    LDR	R6, [PC, #224]
;__Lib_System_MSP432P.c, 352 :: 		
; ulFLCTL_BANK0_RDCTL start address is: 28 (R7)
0x4346	0x4F39    LDR	R7, [PC, #228]
;__Lib_System_MSP432P.c, 354 :: 		
; Fosc_kHz start address is: 0 (R0)
0x4348	0x4839    LDR	R0, [PC, #228]
; Fosc_kHz end address is: 0 (R0)
;__Lib_System_MSP432P.c, 356 :: 		
0x434A	0xF6452180  MOVW	R1, #23168
0x434E	0x4839    LDR	R0, [PC, #228]
0x4350	0x8001    STRH	R1, [R0, #0]
;__Lib_System_MSP432P.c, 359 :: 		
0x4352	0xF0040007  AND	R0, R4, #7
0x4356	0x2805    CMP	R0, #5
0x4358	0xD004    BEQ	L___Lib_System_MSP432P_InitialSetUpRCCRCC269
0x435A	0xF0040070  AND	R0, R4, #112
0x435E	0x2850    CMP	R0, #80
0x4360	0xD000    BEQ	L___Lib_System_MSP432P_InitialSetUpRCCRCC268
0x4362	0xE00B    B	L___Lib_System_MSP432P_InitialSetUpRCCRCC230
L___Lib_System_MSP432P_InitialSetUpRCCRCC269:
L___Lib_System_MSP432P_InitialSetUpRCCRCC268:
;__Lib_System_MSP432P.c, 360 :: 		
0x4364	0x2201    MOVS	R2, #1
0x4366	0xB252    SXTB	R2, R2
0x4368	0x4833    LDR	R0, [PC, #204]
0x436A	0x8002    STRH	R2, [R0, #0]
;__Lib_System_MSP432P.c, 361 :: 		
0x436C	0x2100    MOVS	R1, #0
0x436E	0xB249    SXTB	R1, R1
0x4370	0x4832    LDR	R0, [PC, #200]
0x4372	0x8001    STRH	R1, [R0, #0]
;__Lib_System_MSP432P.c, 362 :: 		
0x4374	0x4832    LDR	R0, [PC, #200]
0x4376	0x8002    STRH	R2, [R0, #0]
;__Lib_System_MSP432P.c, 363 :: 		
0x4378	0x4832    LDR	R0, [PC, #200]
0x437A	0x8001    STRH	R1, [R0, #0]
;__Lib_System_MSP432P.c, 364 :: 		
L___Lib_System_MSP432P_InitialSetUpRCCRCC230:
;__Lib_System_MSP432P.c, 366 :: 		
0x437C	0x2180    MOVS	R1, #128
0x437E	0x4832    LDR	R0, [PC, #200]
0x4380	0x6001    STR	R1, [R0, #0]
; ulCSCTL0 end address is: 12 (R3)
; ulCSCTL1 end address is: 16 (R4)
; ulCSCTL2 end address is: 20 (R5)
; ulWDTCTL end address is: 24 (R6)
; ulFLCTL_BANK0_RDCTL end address is: 28 (R7)
0x4382	0x9501    STR	R5, [SP, #4]
0x4384	0x9602    STR	R6, [SP, #8]
0x4386	0x461E    MOV	R6, R3
0x4388	0x4625    MOV	R5, R4
0x438A	0x463A    MOV	R2, R7
0x438C	0x9B02    LDR	R3, [SP, #8]
0x438E	0x9C01    LDR	R4, [SP, #4]
;__Lib_System_MSP432P.c, 369 :: 		
L___Lib_System_MSP432P_InitialSetUpRCCRCC231:
; ulFLCTL_BANK0_RDCTL start address is: 8 (R2)
; ulWDTCTL start address is: 12 (R3)
; ulCSCTL2 start address is: 16 (R4)
; ulCSCTL1 start address is: 20 (R5)
; ulCSCTL0 start address is: 24 (R6)
0x4390	0x482E    LDR	R0, [PC, #184]
0x4392	0x6800    LDR	R0, [R0, #0]
0x4394	0xF4007080  AND	R0, R0, #256
0x4398	0xB100    CBZ	R0, L___Lib_System_MSP432P_InitialSetUpRCCRCC232
0x439A	0xE7F9    B	L___Lib_System_MSP432P_InitialSetUpRCCRCC231
L___Lib_System_MSP432P_InitialSetUpRCCRCC232:
;__Lib_System_MSP432P.c, 370 :: 		
0x439C	0x492C    LDR	R1, [PC, #176]
0x439E	0x482D    LDR	R0, [PC, #180]
0x43A0	0x6001    STR	R1, [R0, #0]
; ulFLCTL_BANK0_RDCTL end address is: 8 (R2)
; ulWDTCTL end address is: 12 (R3)
; ulCSCTL1 end address is: 20 (R5)
; ulCSCTL0 end address is: 24 (R6)
; ulCSCTL2 end address is: 16 (R4)
0x43A2	0x9501    STR	R5, [SP, #4]
0x43A4	0x4611    MOV	R1, R2
0x43A6	0x4632    MOV	R2, R6
0x43A8	0x461D    MOV	R5, R3
0x43AA	0x9B01    LDR	R3, [SP, #4]
;__Lib_System_MSP432P.c, 371 :: 		
L___Lib_System_MSP432P_InitialSetUpRCCRCC233:
; ulCSCTL0 start address is: 8 (R2)
; ulCSCTL1 start address is: 12 (R3)
; ulCSCTL2 start address is: 16 (R4)
; ulWDTCTL start address is: 20 (R5)
; ulFLCTL_BANK0_RDCTL start address is: 4 (R1)
0x43AC	0x4827    LDR	R0, [PC, #156]
0x43AE	0x6800    LDR	R0, [R0, #0]
0x43B0	0xF4007080  AND	R0, R0, #256
0x43B4	0xB100    CBZ	R0, L___Lib_System_MSP432P_InitialSetUpRCCRCC234
0x43B6	0xE7F9    B	L___Lib_System_MSP432P_InitialSetUpRCCRCC233
L___Lib_System_MSP432P_InitialSetUpRCCRCC234:
;__Lib_System_MSP432P.c, 373 :: 		
0x43B8	0x4827    LDR	R0, [PC, #156]
0x43BA	0x6001    STR	R1, [R0, #0]
;__Lib_System_MSP432P.c, 374 :: 		
0x43BC	0x4827    LDR	R0, [PC, #156]
0x43BE	0x6001    STR	R1, [R0, #0]
; ulFLCTL_BANK0_RDCTL end address is: 4 (R1)
;__Lib_System_MSP432P.c, 376 :: 		
0x43C0	0x4927    LDR	R1, [PC, #156]
0x43C2	0x4828    LDR	R0, [PC, #160]
0x43C4	0x6001    STR	R1, [R0, #0]
;__Lib_System_MSP432P.c, 377 :: 		
0x43C6	0x4828    LDR	R0, [PC, #160]
0x43C8	0x6002    STR	R2, [R0, #0]
; ulCSCTL0 end address is: 8 (R2)
;__Lib_System_MSP432P.c, 378 :: 		
0x43CA	0x4828    LDR	R0, [PC, #160]
0x43CC	0x6003    STR	R3, [R0, #0]
; ulCSCTL1 end address is: 12 (R3)
;__Lib_System_MSP432P.c, 381 :: 		
0x43CE	0x0D20    LSRS	R0, R4, #20
0x43D0	0xF0000007  AND	R0, R0, #7
0x43D4	0xB928    CBNZ	R0, L___Lib_System_MSP432P_InitialSetUpRCCRCC235
;__Lib_System_MSP432P.c, 382 :: 		
0x43D6	0xF0440103  ORR	R1, R4, #3
; ulCSCTL2 end address is: 16 (R4)
0x43DA	0x4825    LDR	R0, [PC, #148]
0x43DC	0x6001    STR	R1, [R0, #0]
;__Lib_System_MSP432P.c, 383 :: 		
0x43DE	0x462A    MOV	R2, R5
0x43E0	0xE010    B	L___Lib_System_MSP432P_InitialSetUpRCCRCC236
L___Lib_System_MSP432P_InitialSetUpRCCRCC235:
;__Lib_System_MSP432P.c, 384 :: 		
; ulCSCTL2 start address is: 16 (R4)
0x43E2	0xF4443080  ORR	R0, R4, #65536
; ulCSCTL2 end address is: 16 (R4)
0x43E6	0xF0400103  ORR	R1, R0, #3
0x43EA	0x4821    LDR	R0, [PC, #132]
0x43EC	0x6001    STR	R1, [R0, #0]
; ulWDTCTL end address is: 20 (R5)
0x43EE	0x462A    MOV	R2, R5
;__Lib_System_MSP432P.c, 386 :: 		
L___Lib_System_MSP432P_InitialSetUpRCCRCC237:
; ulWDTCTL start address is: 8 (R2)
0x43F0	0x4820    LDR	R0, [PC, #128]
0x43F2	0x6800    LDR	R0, [R0, #0]
0x43F4	0xB130    CBZ	R0, L___Lib_System_MSP432P_InitialSetUpRCCRCC238
;__Lib_System_MSP432P.c, 387 :: 		
0x43F6	0xF7FFFE9B  BL	_Delay_1us+0
;__Lib_System_MSP432P.c, 388 :: 		
0x43FA	0x2101    MOVS	R1, #1
0x43FC	0xB249    SXTB	R1, R1
0x43FE	0x481E    LDR	R0, [PC, #120]
0x4400	0x6001    STR	R1, [R0, #0]
;__Lib_System_MSP432P.c, 389 :: 		
0x4402	0xE7F5    B	L___Lib_System_MSP432P_InitialSetUpRCCRCC237
L___Lib_System_MSP432P_InitialSetUpRCCRCC238:
;__Lib_System_MSP432P.c, 390 :: 		
L___Lib_System_MSP432P_InitialSetUpRCCRCC236:
; ulWDTCTL end address is: 8 (R2)
;__Lib_System_MSP432P.c, 393 :: 		
; ulWDTCTL start address is: 8 (R2)
0x4404	0x2100    MOVS	R1, #0
0x4406	0x4817    LDR	R0, [PC, #92]
0x4408	0x6001    STR	R1, [R0, #0]
;__Lib_System_MSP432P.c, 396 :: 		
0x440A	0xF44241B4  ORR	R1, R2, #23040
; ulWDTCTL end address is: 8 (R2)
0x440E	0x4809    LDR	R0, [PC, #36]
0x4410	0x8001    STRH	R1, [R0, #0]
;__Lib_System_MSP432P.c, 397 :: 		
L_end_InitialSetUpRCCRCC2:
0x4412	0xF8DDE000  LDR	LR, [SP, #0]
0x4416	0xB003    ADD	SP, SP, #12
0x4418	0x4770    BX	LR
0x441A	0xBF00    NOP
0x441C	0x00000005  	#327680
0x4420	0x00330000  	#51
0x4424	0x00030001  	#65539
0x4428	0x00840000  	#132
0x442C	0x10000000  	#4096
0x4430	0xBB800000  	#48000
0x4434	0x480C4000  	WDT_A_WDTCTL+0
0x4438	0xA54C4209  	DIO_PJSEL0+0
0x443C	0xA58C4209  	DIO_PJSEL1+0
0x4440	0xA5484209  	DIO_PJSEL0+0
0x4444	0xA5884209  	DIO_PJSEL1+0
0x4448	0x3014E004  	SYSCTL_SYS_SRAM_BANKEN+0
0x444C	0x00044001  	PCM_PCMCTL1+0
0x4450	0x0001695A  	#1767505921
0x4454	0x00004001  	PCM_PCMCTL0+0
0x4458	0x10104001  	FLCTL_FLCTL_BANK0_RDCTL+0
0x445C	0x10144001  	FLCTL_FLCTL_BANK1_RDCTL+0
0x4460	0x695A0000  	#26970
0x4464	0x04004001  	CS_CSKEY+0
0x4468	0x04044001  	CS_CSCTL0+0
0x446C	0x04084001  	CS_CSCTL1+0
0x4470	0x040C4001  	CS_CSCTL2+0
0x4474	0x89044220  	CS_CSIFGbits+0
0x4478	0x8A044220  	CS_CSCLRIFGbits+0
; end of __Lib_System_MSP432P_InitialSetUpRCCRCC2
_Delay_1us:
;__Lib_Delays_MSP432.c, 13 :: 		void Delay_1us() {
;__Lib_Delays_MSP432.c, 14 :: 		Delay_us(1);
0x4130	0xF2400709  MOVW	R7, #9
0x4134	0xF2C00700  MOVT	R7, #0
0x4138	0xBF00    NOP
0x413A	0xBF00    NOP
L_Delay_1us0:
0x413C	0x1E7F    SUBS	R7, R7, #1
0x413E	0xD1FD    BNE	L_Delay_1us0
0x4140	0xBF00    NOP
0x4142	0xBF00    NOP
0x4144	0xBF00    NOP
;__Lib_Delays_MSP432.c, 15 :: 		}
L_end_Delay_1us:
0x4146	0x4770    BX	LR
; end of _Delay_1us
__Lib_System_MSP432P_InitialSetUpFosc:
;__Lib_System_MSP432P.c, 335 :: 		
0x4300	0xB081    SUB	SP, SP, #4
;__Lib_System_MSP432P.c, 336 :: 		
0x4302	0x4902    LDR	R1, [PC, #8]
0x4304	0x4802    LDR	R0, [PC, #8]
0x4306	0x6001    STR	R1, [R0, #0]
;__Lib_System_MSP432P.c, 337 :: 		
L_end_InitialSetUpFosc:
0x4308	0xB001    ADD	SP, SP, #4
0x430A	0x4770    BX	LR
0x430C	0xBB800000  	#48000
0x4310	0x379C2000  	___System_CLOCK_IN_KHZ+0
; end of __Lib_System_MSP432P_InitialSetUpFosc
___GenExcept:
;__Lib_System_MSP432P.c, 303 :: 		
0x42CC	0xB081    SUB	SP, SP, #4
;__Lib_System_MSP432P.c, 304 :: 		
L___GenExcept24:
;__Lib_System_MSP432P.c, 305 :: 		
0x42CE	0xE7FE    B	L___GenExcept24
;__Lib_System_MSP432P.c, 306 :: 		
L_end___GenExcept:
0x42D0	0xB001    ADD	SP, SP, #4
0x42D2	0x4770    BX	LR
; end of ___GenExcept
___EnableFPU:
;__Lib_System_MSP432P.c, 107 :: 		
0x42D4	0xB081    SUB	SP, SP, #4
;__Lib_System_MSP432P.c, 110 :: 		
0x42D6	0xF64E5088  MOVW	R0, #60808
;__Lib_System_MSP432P.c, 111 :: 		
0x42DA	0xF2CE0000  MOVT	R0, #57344
;__Lib_System_MSP432P.c, 113 :: 		
0x42DE	0x6801    LDR	R1, [R0, #0]
;__Lib_System_MSP432P.c, 115 :: 		
0x42E0	0xF4410170  ORR	R1, R1, #15728640
;__Lib_System_MSP432P.c, 117 :: 		
0x42E4	0x6001    STR	R1, [R0, #0]
;__Lib_System_MSP432P.c, 119 :: 		
0x42E6	0xBF00    NOP
;__Lib_System_MSP432P.c, 120 :: 		
0x42E8	0xBF00    NOP
;__Lib_System_MSP432P.c, 121 :: 		
0x42EA	0xBF00    NOP
;__Lib_System_MSP432P.c, 122 :: 		
0x42EC	0xBF00    NOP
;__Lib_System_MSP432P.c, 124 :: 		
0x42EE	0xEEF10A10  VMRS	R0, FPSCR
;__Lib_System_MSP432P.c, 125 :: 		
0x42F2	0xF4400040  ORR	R0, R0, #12582912
;__Lib_System_MSP432P.c, 126 :: 		
0x42F6	0xEEE10A10  VMSR	FPSCR, R0
;__Lib_System_MSP432P.c, 127 :: 		
L_end___EnableFPU:
0x42FA	0xB001    ADD	SP, SP, #4
0x42FC	0x4770    BX	LR
; end of ___EnableFPU
0x5040	0xB500    PUSH	(R14)
0x5042	0xF8DFB024  LDR	R11, [PC, #36]
0x5046	0xF8DFA024  LDR	R10, [PC, #36]
0x504A	0xF8DFC024  LDR	R12, [PC, #36]
0x504E	0xF7FFF84B  BL	16616
0x5052	0xF8DFB020  LDR	R11, [PC, #32]
0x5056	0xF8DFA020  LDR	R10, [PC, #32]
0x505A	0xF8DFC020  LDR	R12, [PC, #32]
0x505E	0xF7FFF843  BL	16616
0x5062	0xBD00    POP	(R15)
0x5064	0x4770    BX	LR
0x5066	0xBF00    NOP
0x5068	0x00002000  	#536870912
0x506C	0x00952000  	#536871061
0x5070	0x4E6C0000  	#20076
0x5074	0x00982000  	#536871064
0x5078	0x00A02000  	#536871072
0x507C	0x17040000  	#5892
0x50DC	0xB500    PUSH	(R14)
0x50DE	0xF8DFB010  LDR	R11, [PC, #16]
0x50E2	0xF8DFA010  LDR	R10, [PC, #16]
0x50E6	0xF7FFF8D3  BL	17040
0x50EA	0xBD00    POP	(R15)
0x50EC	0x4770    BX	LR
0x50EE	0xBF00    NOP
0x50F0	0x00002000  	#536870912
0x50F4	0x44BC2000  	#536888508
;__Lib_System_MSP432P.c,0 :: ?ICS__Lib_System_MSP432P_CS_VLOCLK_FREQUENCY [4]
0x1704	0x00002710 ;?ICS__Lib_System_MSP432P_CS_VLOCLK_FREQUENCY+0
; end of ?ICS__Lib_System_MSP432P_CS_VLOCLK_FREQUENCY
;__Lib_System_MSP432P.c,0 :: ?ICS__Lib_System_MSP432P_CS_MODCLK_FREQUENCY [4]
0x1708	0x016E3600 ;?ICS__Lib_System_MSP432P_CS_MODCLK_FREQUENCY+0
; end of ?ICS__Lib_System_MSP432P_CS_MODCLK_FREQUENCY
;Click_IR_Grid2_MSP.c,3 :: __IRGRID2_I2C_CFG [4]
0x170C	0x00061A80 ;__IRGRID2_I2C_CFG+0
; end of __IRGRID2_I2C_CFG
;clicker_2_MSP432.c,15 :: __MIKROBUS1_I2C [8]
0x3CD4	0x00001495 ;__MIKROBUS1_I2C+0
0x3CD8	0x000011F5 ;__MIKROBUS1_I2C+4
; end of __MIKROBUS1_I2C
;__irgrid2_driver.c,0 :: ?ICSirgrid2_readData_readReg_L0 [1664]
0x447C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+0
0x4480	0x00000000 ;?ICSirgrid2_readData_readReg_L0+4
0x4484	0x00000000 ;?ICSirgrid2_readData_readReg_L0+8
0x4488	0x00000000 ;?ICSirgrid2_readData_readReg_L0+12
0x448C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+16
0x4490	0x00000000 ;?ICSirgrid2_readData_readReg_L0+20
0x4494	0x00000000 ;?ICSirgrid2_readData_readReg_L0+24
0x4498	0x00000000 ;?ICSirgrid2_readData_readReg_L0+28
0x449C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+32
0x44A0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+36
0x44A4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+40
0x44A8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+44
0x44AC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+48
0x44B0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+52
0x44B4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+56
0x44B8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+60
0x44BC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+64
0x44C0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+68
0x44C4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+72
0x44C8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+76
0x44CC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+80
0x44D0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+84
0x44D4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+88
0x44D8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+92
0x44DC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+96
0x44E0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+100
0x44E4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+104
0x44E8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+108
0x44EC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+112
0x44F0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+116
0x44F4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+120
0x44F8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+124
0x44FC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+128
0x4500	0x00000000 ;?ICSirgrid2_readData_readReg_L0+132
0x4504	0x00000000 ;?ICSirgrid2_readData_readReg_L0+136
0x4508	0x00000000 ;?ICSirgrid2_readData_readReg_L0+140
0x450C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+144
0x4510	0x00000000 ;?ICSirgrid2_readData_readReg_L0+148
0x4514	0x00000000 ;?ICSirgrid2_readData_readReg_L0+152
0x4518	0x00000000 ;?ICSirgrid2_readData_readReg_L0+156
0x451C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+160
0x4520	0x00000000 ;?ICSirgrid2_readData_readReg_L0+164
0x4524	0x00000000 ;?ICSirgrid2_readData_readReg_L0+168
0x4528	0x00000000 ;?ICSirgrid2_readData_readReg_L0+172
0x452C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+176
0x4530	0x00000000 ;?ICSirgrid2_readData_readReg_L0+180
0x4534	0x00000000 ;?ICSirgrid2_readData_readReg_L0+184
0x4538	0x00000000 ;?ICSirgrid2_readData_readReg_L0+188
0x453C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+192
0x4540	0x00000000 ;?ICSirgrid2_readData_readReg_L0+196
0x4544	0x00000000 ;?ICSirgrid2_readData_readReg_L0+200
0x4548	0x00000000 ;?ICSirgrid2_readData_readReg_L0+204
0x454C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+208
0x4550	0x00000000 ;?ICSirgrid2_readData_readReg_L0+212
0x4554	0x00000000 ;?ICSirgrid2_readData_readReg_L0+216
0x4558	0x00000000 ;?ICSirgrid2_readData_readReg_L0+220
0x455C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+224
0x4560	0x00000000 ;?ICSirgrid2_readData_readReg_L0+228
0x4564	0x00000000 ;?ICSirgrid2_readData_readReg_L0+232
0x4568	0x00000000 ;?ICSirgrid2_readData_readReg_L0+236
0x456C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+240
0x4570	0x00000000 ;?ICSirgrid2_readData_readReg_L0+244
0x4574	0x00000000 ;?ICSirgrid2_readData_readReg_L0+248
0x4578	0x00000000 ;?ICSirgrid2_readData_readReg_L0+252
0x457C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+256
0x4580	0x00000000 ;?ICSirgrid2_readData_readReg_L0+260
0x4584	0x00000000 ;?ICSirgrid2_readData_readReg_L0+264
0x4588	0x00000000 ;?ICSirgrid2_readData_readReg_L0+268
0x458C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+272
0x4590	0x00000000 ;?ICSirgrid2_readData_readReg_L0+276
0x4594	0x00000000 ;?ICSirgrid2_readData_readReg_L0+280
0x4598	0x00000000 ;?ICSirgrid2_readData_readReg_L0+284
0x459C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+288
0x45A0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+292
0x45A4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+296
0x45A8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+300
0x45AC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+304
0x45B0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+308
0x45B4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+312
0x45B8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+316
0x45BC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+320
0x45C0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+324
0x45C4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+328
0x45C8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+332
0x45CC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+336
0x45D0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+340
0x45D4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+344
0x45D8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+348
0x45DC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+352
0x45E0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+356
0x45E4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+360
0x45E8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+364
0x45EC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+368
0x45F0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+372
0x45F4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+376
0x45F8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+380
0x45FC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+384
0x4600	0x00000000 ;?ICSirgrid2_readData_readReg_L0+388
0x4604	0x00000000 ;?ICSirgrid2_readData_readReg_L0+392
0x4608	0x00000000 ;?ICSirgrid2_readData_readReg_L0+396
0x460C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+400
0x4610	0x00000000 ;?ICSirgrid2_readData_readReg_L0+404
0x4614	0x00000000 ;?ICSirgrid2_readData_readReg_L0+408
0x4618	0x00000000 ;?ICSirgrid2_readData_readReg_L0+412
0x461C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+416
0x4620	0x00000000 ;?ICSirgrid2_readData_readReg_L0+420
0x4624	0x00000000 ;?ICSirgrid2_readData_readReg_L0+424
0x4628	0x00000000 ;?ICSirgrid2_readData_readReg_L0+428
0x462C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+432
0x4630	0x00000000 ;?ICSirgrid2_readData_readReg_L0+436
0x4634	0x00000000 ;?ICSirgrid2_readData_readReg_L0+440
0x4638	0x00000000 ;?ICSirgrid2_readData_readReg_L0+444
0x463C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+448
0x4640	0x00000000 ;?ICSirgrid2_readData_readReg_L0+452
0x4644	0x00000000 ;?ICSirgrid2_readData_readReg_L0+456
0x4648	0x00000000 ;?ICSirgrid2_readData_readReg_L0+460
0x464C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+464
0x4650	0x00000000 ;?ICSirgrid2_readData_readReg_L0+468
0x4654	0x00000000 ;?ICSirgrid2_readData_readReg_L0+472
0x4658	0x00000000 ;?ICSirgrid2_readData_readReg_L0+476
0x465C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+480
0x4660	0x00000000 ;?ICSirgrid2_readData_readReg_L0+484
0x4664	0x00000000 ;?ICSirgrid2_readData_readReg_L0+488
0x4668	0x00000000 ;?ICSirgrid2_readData_readReg_L0+492
0x466C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+496
0x4670	0x00000000 ;?ICSirgrid2_readData_readReg_L0+500
0x4674	0x00000000 ;?ICSirgrid2_readData_readReg_L0+504
0x4678	0x00000000 ;?ICSirgrid2_readData_readReg_L0+508
0x467C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+512
0x4680	0x00000000 ;?ICSirgrid2_readData_readReg_L0+516
0x4684	0x00000000 ;?ICSirgrid2_readData_readReg_L0+520
0x4688	0x00000000 ;?ICSirgrid2_readData_readReg_L0+524
0x468C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+528
0x4690	0x00000000 ;?ICSirgrid2_readData_readReg_L0+532
0x4694	0x00000000 ;?ICSirgrid2_readData_readReg_L0+536
0x4698	0x00000000 ;?ICSirgrid2_readData_readReg_L0+540
0x469C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+544
0x46A0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+548
0x46A4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+552
0x46A8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+556
0x46AC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+560
0x46B0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+564
0x46B4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+568
0x46B8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+572
0x46BC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+576
0x46C0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+580
0x46C4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+584
0x46C8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+588
0x46CC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+592
0x46D0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+596
0x46D4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+600
0x46D8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+604
0x46DC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+608
0x46E0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+612
0x46E4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+616
0x46E8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+620
0x46EC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+624
0x46F0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+628
0x46F4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+632
0x46F8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+636
0x46FC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+640
0x4700	0x00000000 ;?ICSirgrid2_readData_readReg_L0+644
0x4704	0x00000000 ;?ICSirgrid2_readData_readReg_L0+648
0x4708	0x00000000 ;?ICSirgrid2_readData_readReg_L0+652
0x470C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+656
0x4710	0x00000000 ;?ICSirgrid2_readData_readReg_L0+660
0x4714	0x00000000 ;?ICSirgrid2_readData_readReg_L0+664
0x4718	0x00000000 ;?ICSirgrid2_readData_readReg_L0+668
0x471C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+672
0x4720	0x00000000 ;?ICSirgrid2_readData_readReg_L0+676
0x4724	0x00000000 ;?ICSirgrid2_readData_readReg_L0+680
0x4728	0x00000000 ;?ICSirgrid2_readData_readReg_L0+684
0x472C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+688
0x4730	0x00000000 ;?ICSirgrid2_readData_readReg_L0+692
0x4734	0x00000000 ;?ICSirgrid2_readData_readReg_L0+696
0x4738	0x00000000 ;?ICSirgrid2_readData_readReg_L0+700
0x473C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+704
0x4740	0x00000000 ;?ICSirgrid2_readData_readReg_L0+708
0x4744	0x00000000 ;?ICSirgrid2_readData_readReg_L0+712
0x4748	0x00000000 ;?ICSirgrid2_readData_readReg_L0+716
0x474C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+720
0x4750	0x00000000 ;?ICSirgrid2_readData_readReg_L0+724
0x4754	0x00000000 ;?ICSirgrid2_readData_readReg_L0+728
0x4758	0x00000000 ;?ICSirgrid2_readData_readReg_L0+732
0x475C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+736
0x4760	0x00000000 ;?ICSirgrid2_readData_readReg_L0+740
0x4764	0x00000000 ;?ICSirgrid2_readData_readReg_L0+744
0x4768	0x00000000 ;?ICSirgrid2_readData_readReg_L0+748
0x476C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+752
0x4770	0x00000000 ;?ICSirgrid2_readData_readReg_L0+756
0x4774	0x00000000 ;?ICSirgrid2_readData_readReg_L0+760
0x4778	0x00000000 ;?ICSirgrid2_readData_readReg_L0+764
0x477C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+768
0x4780	0x00000000 ;?ICSirgrid2_readData_readReg_L0+772
0x4784	0x00000000 ;?ICSirgrid2_readData_readReg_L0+776
0x4788	0x00000000 ;?ICSirgrid2_readData_readReg_L0+780
0x478C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+784
0x4790	0x00000000 ;?ICSirgrid2_readData_readReg_L0+788
0x4794	0x00000000 ;?ICSirgrid2_readData_readReg_L0+792
0x4798	0x00000000 ;?ICSirgrid2_readData_readReg_L0+796
0x479C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+800
0x47A0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+804
0x47A4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+808
0x47A8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+812
0x47AC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+816
0x47B0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+820
0x47B4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+824
0x47B8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+828
0x47BC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+832
0x47C0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+836
0x47C4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+840
0x47C8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+844
0x47CC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+848
0x47D0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+852
0x47D4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+856
0x47D8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+860
0x47DC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+864
0x47E0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+868
0x47E4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+872
0x47E8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+876
0x47EC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+880
0x47F0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+884
0x47F4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+888
0x47F8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+892
0x47FC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+896
0x4800	0x00000000 ;?ICSirgrid2_readData_readReg_L0+900
0x4804	0x00000000 ;?ICSirgrid2_readData_readReg_L0+904
0x4808	0x00000000 ;?ICSirgrid2_readData_readReg_L0+908
0x480C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+912
0x4810	0x00000000 ;?ICSirgrid2_readData_readReg_L0+916
0x4814	0x00000000 ;?ICSirgrid2_readData_readReg_L0+920
0x4818	0x00000000 ;?ICSirgrid2_readData_readReg_L0+924
0x481C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+928
0x4820	0x00000000 ;?ICSirgrid2_readData_readReg_L0+932
0x4824	0x00000000 ;?ICSirgrid2_readData_readReg_L0+936
0x4828	0x00000000 ;?ICSirgrid2_readData_readReg_L0+940
0x482C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+944
0x4830	0x00000000 ;?ICSirgrid2_readData_readReg_L0+948
0x4834	0x00000000 ;?ICSirgrid2_readData_readReg_L0+952
0x4838	0x00000000 ;?ICSirgrid2_readData_readReg_L0+956
0x483C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+960
0x4840	0x00000000 ;?ICSirgrid2_readData_readReg_L0+964
0x4844	0x00000000 ;?ICSirgrid2_readData_readReg_L0+968
0x4848	0x00000000 ;?ICSirgrid2_readData_readReg_L0+972
0x484C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+976
0x4850	0x00000000 ;?ICSirgrid2_readData_readReg_L0+980
0x4854	0x00000000 ;?ICSirgrid2_readData_readReg_L0+984
0x4858	0x00000000 ;?ICSirgrid2_readData_readReg_L0+988
0x485C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+992
0x4860	0x00000000 ;?ICSirgrid2_readData_readReg_L0+996
0x4864	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1000
0x4868	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1004
0x486C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1008
0x4870	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1012
0x4874	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1016
0x4878	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1020
0x487C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1024
0x4880	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1028
0x4884	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1032
0x4888	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1036
0x488C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1040
0x4890	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1044
0x4894	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1048
0x4898	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1052
0x489C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1056
0x48A0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1060
0x48A4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1064
0x48A8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1068
0x48AC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1072
0x48B0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1076
0x48B4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1080
0x48B8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1084
0x48BC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1088
0x48C0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1092
0x48C4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1096
0x48C8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1100
0x48CC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1104
0x48D0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1108
0x48D4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1112
0x48D8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1116
0x48DC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1120
0x48E0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1124
0x48E4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1128
0x48E8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1132
0x48EC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1136
0x48F0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1140
0x48F4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1144
0x48F8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1148
0x48FC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1152
0x4900	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1156
0x4904	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1160
0x4908	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1164
0x490C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1168
0x4910	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1172
0x4914	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1176
0x4918	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1180
0x491C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1184
0x4920	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1188
0x4924	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1192
0x4928	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1196
0x492C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1200
0x4930	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1204
0x4934	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1208
0x4938	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1212
0x493C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1216
0x4940	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1220
0x4944	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1224
0x4948	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1228
0x494C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1232
0x4950	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1236
0x4954	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1240
0x4958	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1244
0x495C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1248
0x4960	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1252
0x4964	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1256
0x4968	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1260
0x496C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1264
0x4970	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1268
0x4974	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1272
0x4978	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1276
0x497C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1280
0x4980	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1284
0x4984	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1288
0x4988	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1292
0x498C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1296
0x4990	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1300
0x4994	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1304
0x4998	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1308
0x499C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1312
0x49A0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1316
0x49A4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1320
0x49A8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1324
0x49AC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1328
0x49B0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1332
0x49B4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1336
0x49B8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1340
0x49BC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1344
0x49C0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1348
0x49C4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1352
0x49C8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1356
0x49CC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1360
0x49D0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1364
0x49D4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1368
0x49D8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1372
0x49DC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1376
0x49E0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1380
0x49E4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1384
0x49E8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1388
0x49EC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1392
0x49F0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1396
0x49F4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1400
0x49F8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1404
0x49FC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1408
0x4A00	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1412
0x4A04	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1416
0x4A08	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1420
0x4A0C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1424
0x4A10	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1428
0x4A14	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1432
0x4A18	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1436
0x4A1C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1440
0x4A20	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1444
0x4A24	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1448
0x4A28	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1452
0x4A2C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1456
0x4A30	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1460
0x4A34	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1464
0x4A38	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1468
0x4A3C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1472
0x4A40	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1476
0x4A44	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1480
0x4A48	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1484
0x4A4C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1488
0x4A50	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1492
0x4A54	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1496
0x4A58	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1500
0x4A5C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1504
0x4A60	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1508
0x4A64	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1512
0x4A68	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1516
0x4A6C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1520
0x4A70	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1524
0x4A74	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1528
0x4A78	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1532
0x4A7C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1536
0x4A80	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1540
0x4A84	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1544
0x4A88	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1548
0x4A8C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1552
0x4A90	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1556
0x4A94	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1560
0x4A98	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1564
0x4A9C	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1568
0x4AA0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1572
0x4AA4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1576
0x4AA8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1580
0x4AAC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1584
0x4AB0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1588
0x4AB4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1592
0x4AB8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1596
0x4ABC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1600
0x4AC0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1604
0x4AC4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1608
0x4AC8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1612
0x4ACC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1616
0x4AD0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1620
0x4AD4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1624
0x4AD8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1628
0x4ADC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1632
0x4AE0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1636
0x4AE4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1640
0x4AE8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1644
0x4AEC	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1648
0x4AF0	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1652
0x4AF4	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1656
0x4AF8	0x00000000 ;?ICSirgrid2_readData_readReg_L0+1660
; end of ?ICSirgrid2_readData_readReg_L0
;__Lib_GPIO_MSP_Defs.c,135 :: __GPIO_MODULE_UARTA2_B23 [220]
0x4AFC	0x40004C20 ;__GPIO_MODULE_UARTA2_B23+0
0x4B00	0x05050004 ;__GPIO_MODULE_UARTA2_B23+4
0x4B04	0x00000000 ;__GPIO_MODULE_UARTA2_B23+8
0x4B08	0x40004C20 ;__GPIO_MODULE_UARTA2_B23+12
0x4B0C	0x05050008 ;__GPIO_MODULE_UARTA2_B23+16
0x4B10	0x00000000 ;__GPIO_MODULE_UARTA2_B23+20
0x4B14	0x00000000 ;__GPIO_MODULE_UARTA2_B23+24
0x4B18	0x00000000 ;__GPIO_MODULE_UARTA2_B23+28
0x4B1C	0x00000000 ;__GPIO_MODULE_UARTA2_B23+32
0x4B20	0x00000000 ;__GPIO_MODULE_UARTA2_B23+36
0x4B24	0x00000000 ;__GPIO_MODULE_UARTA2_B23+40
0x4B28	0x00000000 ;__GPIO_MODULE_UARTA2_B23+44
0x4B2C	0x00000000 ;__GPIO_MODULE_UARTA2_B23+48
0x4B30	0x00000000 ;__GPIO_MODULE_UARTA2_B23+52
0x4B34	0x00000000 ;__GPIO_MODULE_UARTA2_B23+56
0x4B38	0x00000000 ;__GPIO_MODULE_UARTA2_B23+60
0x4B3C	0x00000000 ;__GPIO_MODULE_UARTA2_B23+64
0x4B40	0x00000000 ;__GPIO_MODULE_UARTA2_B23+68
0x4B44	0x00000000 ;__GPIO_MODULE_UARTA2_B23+72
0x4B48	0x00000000 ;__GPIO_MODULE_UARTA2_B23+76
0x4B4C	0x00000000 ;__GPIO_MODULE_UARTA2_B23+80
0x4B50	0x00000000 ;__GPIO_MODULE_UARTA2_B23+84
0x4B54	0x00000000 ;__GPIO_MODULE_UARTA2_B23+88
0x4B58	0x00000000 ;__GPIO_MODULE_UARTA2_B23+92
0x4B5C	0x00000000 ;__GPIO_MODULE_UARTA2_B23+96
0x4B60	0x00000000 ;__GPIO_MODULE_UARTA2_B23+100
0x4B64	0x00000000 ;__GPIO_MODULE_UARTA2_B23+104
0x4B68	0x00000000 ;__GPIO_MODULE_UARTA2_B23+108
0x4B6C	0x00000000 ;__GPIO_MODULE_UARTA2_B23+112
0x4B70	0x00000000 ;__GPIO_MODULE_UARTA2_B23+116
0x4B74	0x00000000 ;__GPIO_MODULE_UARTA2_B23+120
0x4B78	0x00000000 ;__GPIO_MODULE_UARTA2_B23+124
0x4B7C	0x00000000 ;__GPIO_MODULE_UARTA2_B23+128
0x4B80	0x00000000 ;__GPIO_MODULE_UARTA2_B23+132
0x4B84	0x00000000 ;__GPIO_MODULE_UARTA2_B23+136
0x4B88	0x00000000 ;__GPIO_MODULE_UARTA2_B23+140
0x4B8C	0x00000000 ;__GPIO_MODULE_UARTA2_B23+144
0x4B90	0x00000000 ;__GPIO_MODULE_UARTA2_B23+148
0x4B94	0x00000000 ;__GPIO_MODULE_UARTA2_B23+152
0x4B98	0x00000000 ;__GPIO_MODULE_UARTA2_B23+156
0x4B9C	0x00000000 ;__GPIO_MODULE_UARTA2_B23+160
0x4BA0	0x00000000 ;__GPIO_MODULE_UARTA2_B23+164
0x4BA4	0x00000000 ;__GPIO_MODULE_UARTA2_B23+168
0x4BA8	0x00000000 ;__GPIO_MODULE_UARTA2_B23+172
0x4BAC	0x00000000 ;__GPIO_MODULE_UARTA2_B23+176
0x4BB0	0x00000000 ;__GPIO_MODULE_UARTA2_B23+180
0x4BB4	0x00000000 ;__GPIO_MODULE_UARTA2_B23+184
0x4BB8	0x00000000 ;__GPIO_MODULE_UARTA2_B23+188
0x4BBC	0x00000000 ;__GPIO_MODULE_UARTA2_B23+192
0x4BC0	0x00000000 ;__GPIO_MODULE_UARTA2_B23+196
0x4BC4	0x00000000 ;__GPIO_MODULE_UARTA2_B23+200
0x4BC8	0x00000000 ;__GPIO_MODULE_UARTA2_B23+204
0x4BCC	0x00000000 ;__GPIO_MODULE_UARTA2_B23+208
0x4BD0	0x00000000 ;__GPIO_MODULE_UARTA2_B23+212
0x4BD4	0x00000002 ;__GPIO_MODULE_UARTA2_B23+216
; end of __GPIO_MODULE_UARTA2_B23
;__Lib_GPIO_MSP_Defs.c,134 :: __GPIO_MODULE_UARTA1_A1011 [220]
0x4BD8	0x40004C00 ;__GPIO_MODULE_UARTA1_A1011+0
0x4BDC	0x05050400 ;__GPIO_MODULE_UARTA1_A1011+4
0x4BE0	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+8
0x4BE4	0x40004C00 ;__GPIO_MODULE_UARTA1_A1011+12
0x4BE8	0x05050800 ;__GPIO_MODULE_UARTA1_A1011+16
0x4BEC	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+20
0x4BF0	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+24
0x4BF4	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+28
0x4BF8	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+32
0x4BFC	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+36
0x4C00	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+40
0x4C04	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+44
0x4C08	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+48
0x4C0C	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+52
0x4C10	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+56
0x4C14	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+60
0x4C18	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+64
0x4C1C	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+68
0x4C20	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+72
0x4C24	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+76
0x4C28	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+80
0x4C2C	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+84
0x4C30	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+88
0x4C34	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+92
0x4C38	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+96
0x4C3C	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+100
0x4C40	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+104
0x4C44	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+108
0x4C48	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+112
0x4C4C	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+116
0x4C50	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+120
0x4C54	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+124
0x4C58	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+128
0x4C5C	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+132
0x4C60	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+136
0x4C64	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+140
0x4C68	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+144
0x4C6C	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+148
0x4C70	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+152
0x4C74	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+156
0x4C78	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+160
0x4C7C	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+164
0x4C80	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+168
0x4C84	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+172
0x4C88	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+176
0x4C8C	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+180
0x4C90	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+184
0x4C94	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+188
0x4C98	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+192
0x4C9C	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+196
0x4CA0	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+200
0x4CA4	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+204
0x4CA8	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+208
0x4CAC	0x00000000 ;__GPIO_MODULE_UARTA1_A1011+212
0x4CB0	0x00000002 ;__GPIO_MODULE_UARTA1_A1011+216
; end of __GPIO_MODULE_UARTA1_A1011
;__Lib_GPIO_MSP_Defs.c,133 :: __GPIO_MODULE_UARTA0_A23 [220]
0x4CB4	0x40004C00 ;__GPIO_MODULE_UARTA0_A23+0
0x4CB8	0x05050004 ;__GPIO_MODULE_UARTA0_A23+4
0x4CBC	0x00000000 ;__GPIO_MODULE_UARTA0_A23+8
0x4CC0	0x40004C00 ;__GPIO_MODULE_UARTA0_A23+12
0x4CC4	0x05050008 ;__GPIO_MODULE_UARTA0_A23+16
0x4CC8	0x00000000 ;__GPIO_MODULE_UARTA0_A23+20
0x4CCC	0x00000000 ;__GPIO_MODULE_UARTA0_A23+24
0x4CD0	0x00000000 ;__GPIO_MODULE_UARTA0_A23+28
0x4CD4	0x00000000 ;__GPIO_MODULE_UARTA0_A23+32
0x4CD8	0x00000000 ;__GPIO_MODULE_UARTA0_A23+36
0x4CDC	0x00000000 ;__GPIO_MODULE_UARTA0_A23+40
0x4CE0	0x00000000 ;__GPIO_MODULE_UARTA0_A23+44
0x4CE4	0x00000000 ;__GPIO_MODULE_UARTA0_A23+48
0x4CE8	0x00000000 ;__GPIO_MODULE_UARTA0_A23+52
0x4CEC	0x00000000 ;__GPIO_MODULE_UARTA0_A23+56
0x4CF0	0x00000000 ;__GPIO_MODULE_UARTA0_A23+60
0x4CF4	0x00000000 ;__GPIO_MODULE_UARTA0_A23+64
0x4CF8	0x00000000 ;__GPIO_MODULE_UARTA0_A23+68
0x4CFC	0x00000000 ;__GPIO_MODULE_UARTA0_A23+72
0x4D00	0x00000000 ;__GPIO_MODULE_UARTA0_A23+76
0x4D04	0x00000000 ;__GPIO_MODULE_UARTA0_A23+80
0x4D08	0x00000000 ;__GPIO_MODULE_UARTA0_A23+84
0x4D0C	0x00000000 ;__GPIO_MODULE_UARTA0_A23+88
0x4D10	0x00000000 ;__GPIO_MODULE_UARTA0_A23+92
0x4D14	0x00000000 ;__GPIO_MODULE_UARTA0_A23+96
0x4D18	0x00000000 ;__GPIO_MODULE_UARTA0_A23+100
0x4D1C	0x00000000 ;__GPIO_MODULE_UARTA0_A23+104
0x4D20	0x00000000 ;__GPIO_MODULE_UARTA0_A23+108
0x4D24	0x00000000 ;__GPIO_MODULE_UARTA0_A23+112
0x4D28	0x00000000 ;__GPIO_MODULE_UARTA0_A23+116
0x4D2C	0x00000000 ;__GPIO_MODULE_UARTA0_A23+120
0x4D30	0x00000000 ;__GPIO_MODULE_UARTA0_A23+124
0x4D34	0x00000000 ;__GPIO_MODULE_UARTA0_A23+128
0x4D38	0x00000000 ;__GPIO_MODULE_UARTA0_A23+132
0x4D3C	0x00000000 ;__GPIO_MODULE_UARTA0_A23+136
0x4D40	0x00000000 ;__GPIO_MODULE_UARTA0_A23+140
0x4D44	0x00000000 ;__GPIO_MODULE_UARTA0_A23+144
0x4D48	0x00000000 ;__GPIO_MODULE_UARTA0_A23+148
0x4D4C	0x00000000 ;__GPIO_MODULE_UARTA0_A23+152
0x4D50	0x00000000 ;__GPIO_MODULE_UARTA0_A23+156
0x4D54	0x00000000 ;__GPIO_MODULE_UARTA0_A23+160
0x4D58	0x00000000 ;__GPIO_MODULE_UARTA0_A23+164
0x4D5C	0x00000000 ;__GPIO_MODULE_UARTA0_A23+168
0x4D60	0x00000000 ;__GPIO_MODULE_UARTA0_A23+172
0x4D64	0x00000000 ;__GPIO_MODULE_UARTA0_A23+176
0x4D68	0x00000000 ;__GPIO_MODULE_UARTA0_A23+180
0x4D6C	0x00000000 ;__GPIO_MODULE_UARTA0_A23+184
0x4D70	0x00000000 ;__GPIO_MODULE_UARTA0_A23+188
0x4D74	0x00000000 ;__GPIO_MODULE_UARTA0_A23+192
0x4D78	0x00000000 ;__GPIO_MODULE_UARTA0_A23+196
0x4D7C	0x00000000 ;__GPIO_MODULE_UARTA0_A23+200
0x4D80	0x00000000 ;__GPIO_MODULE_UARTA0_A23+204
0x4D84	0x00000000 ;__GPIO_MODULE_UARTA0_A23+208
0x4D88	0x00000000 ;__GPIO_MODULE_UARTA0_A23+212
0x4D8C	0x00000002 ;__GPIO_MODULE_UARTA0_A23+216
; end of __GPIO_MODULE_UARTA0_A23
;__Lib_GPIO_MSP_Defs.c,193 :: __GPIO_MODULE_I2CB1_C1213 [220]
0x4D90	0x40004C40 ;__GPIO_MODULE_I2CB1_C1213+0
0x4D94	0x05001000 ;__GPIO_MODULE_I2CB1_C1213+4
0x4D98	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+8
0x4D9C	0x40004C40 ;__GPIO_MODULE_I2CB1_C1213+12
0x4DA0	0x05002000 ;__GPIO_MODULE_I2CB1_C1213+16
0x4DA4	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+20
0x4DA8	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+24
0x4DAC	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+28
0x4DB0	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+32
0x4DB4	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+36
0x4DB8	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+40
0x4DBC	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+44
0x4DC0	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+48
0x4DC4	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+52
0x4DC8	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+56
0x4DCC	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+60
0x4DD0	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+64
0x4DD4	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+68
0x4DD8	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+72
0x4DDC	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+76
0x4DE0	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+80
0x4DE4	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+84
0x4DE8	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+88
0x4DEC	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+92
0x4DF0	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+96
0x4DF4	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+100
0x4DF8	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+104
0x4DFC	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+108
0x4E00	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+112
0x4E04	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+116
0x4E08	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+120
0x4E0C	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+124
0x4E10	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+128
0x4E14	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+132
0x4E18	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+136
0x4E1C	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+140
0x4E20	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+144
0x4E24	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+148
0x4E28	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+152
0x4E2C	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+156
0x4E30	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+160
0x4E34	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+164
0x4E38	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+168
0x4E3C	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+172
0x4E40	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+176
0x4E44	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+180
0x4E48	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+184
0x4E4C	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+188
0x4E50	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+192
0x4E54	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+196
0x4E58	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+200
0x4E5C	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+204
0x4E60	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+208
0x4E64	0x00000000 ;__GPIO_MODULE_I2CB1_C1213+212
0x4E68	0x00000002 ;__GPIO_MODULE_I2CB1_C1213+216
; end of __GPIO_MODULE_I2CB1_C1213
;Click_IR_Grid2_MSP.c,0 :: ?ICS?lstr2_Click_IR_Grid2_MSP [26]
0x4E6C	0x202D2D2D ;?ICS?lstr2_Click_IR_Grid2_MSP+0
0x4E70	0x72617453 ;?ICS?lstr2_Click_IR_Grid2_MSP+4
0x4E74	0x656D2074 ;?ICS?lstr2_Click_IR_Grid2_MSP+8
0x4E78	0x72757361 ;?ICS?lstr2_Click_IR_Grid2_MSP+12
0x4E7C	0x6E656D65 ;?ICS?lstr2_Click_IR_Grid2_MSP+16
0x4E80	0x2D2D2074 ;?ICS?lstr2_Click_IR_Grid2_MSP+20
0x4E84	0x002D ;?ICS?lstr2_Click_IR_Grid2_MSP+24
; end of ?ICS?lstr2_Click_IR_Grid2_MSP
;Click_IR_Grid2_MSP.c,0 :: ?ICS?lstr4_Click_IR_Grid2_MSP [2]
0x4E86	0x0020 ;?ICS?lstr4_Click_IR_Grid2_MSP+0
; end of ?ICS?lstr4_Click_IR_Grid2_MSP
;Click_IR_Grid2_MSP.c,0 :: ?ICS_Ta [4]
0x4E88	0x00000000 ;?ICS_Ta+0
; end of ?ICS_Ta
;,0 :: _initBlock_12 [62]
; Containing: ?ICS?lstr3_Click_IR_Grid2_MSP [23]
;             ?ICS?lstr5_Click_IR_Grid2_MSP [39]
0x4E8C	0x69626D41 ;_initBlock_12+0 : ?ICS?lstr3_Click_IR_Grid2_MSP at 0x4E8C
0x4E90	0x20746E65 ;_initBlock_12+4
0x4E94	0x706D6574 ;_initBlock_12+8
0x4E98	0x74617265 ;_initBlock_12+12
0x4E9C	0x3A657275 ;_initBlock_12+16
0x4EA0	0x2D002020 ;_initBlock_12+20 : ?ICS?lstr5_Click_IR_Grid2_MSP at 0x4EA3
0x4EA4	0x50202D2D ;_initBlock_12+24
0x4EA8	0x6C657869 ;_initBlock_12+28
0x4EAC	0x6D657420 ;_initBlock_12+32
0x4EB0	0x61726570 ;_initBlock_12+36
0x4EB4	0x65727574 ;_initBlock_12+40
0x4EB8	0x74616D20 ;_initBlock_12+44
0x4EBC	0x20786972 ;_initBlock_12+48
0x4EC0	0x32783233 ;_initBlock_12+52
0x4EC4	0x2D2D2034 ;_initBlock_12+56
0x4EC8	0x002D ;_initBlock_12+60
; end of _initBlock_12
;Click_IR_Grid2_MSP.c,0 :: ?ICS?lstr6_Click_IR_Grid2_MSP [2]
0x4ECA	0x007C ;?ICS?lstr6_Click_IR_Grid2_MSP+0
; end of ?ICS?lstr6_Click_IR_Grid2_MSP
;Click_IR_Grid2_MSP.c,0 :: ?ICS?lstr7_Click_IR_Grid2_MSP [2]
0x4ECC	0x0020 ;?ICS?lstr7_Click_IR_Grid2_MSP+0
; end of ?ICS?lstr7_Click_IR_Grid2_MSP
;Click_IR_Grid2_MSP.c,0 :: ?ICS?lstr8_Click_IR_Grid2_MSP [2]
0x4ECE	0x0020 ;?ICS?lstr8_Click_IR_Grid2_MSP+0
; end of ?ICS?lstr8_Click_IR_Grid2_MSP
;Click_IR_Grid2_MSP.c,0 :: ?ICS?lstr1_Click_IR_Grid2_MSP [22]
0x4ED0	0x2D2D2D20 ;?ICS?lstr1_Click_IR_Grid2_MSP+0
0x4ED4	0x73795320 ;?ICS?lstr1_Click_IR_Grid2_MSP+4
0x4ED8	0x206D6574 ;?ICS?lstr1_Click_IR_Grid2_MSP+8
0x4EDC	0x74696E49 ;?ICS?lstr1_Click_IR_Grid2_MSP+12
0x4EE0	0x2D2D2D20 ;?ICS?lstr1_Click_IR_Grid2_MSP+16
0x4EE4	0x0020 ;?ICS?lstr1_Click_IR_Grid2_MSP+20
; end of ?ICS?lstr1_Click_IR_Grid2_MSP
;__Lib_Conversions.c,0 :: ?ICS?lstr1___Lib_Conversions [4]
0x4EE6	0x004E614E ;?ICS?lstr1___Lib_Conversions+0
; end of ?ICS?lstr1___Lib_Conversions
;__Lib_Conversions.c,0 :: ?ICS?lstr2___Lib_Conversions [2]
0x4EEA	0x0030 ;?ICS?lstr2___Lib_Conversions+0
; end of ?ICS?lstr2___Lib_Conversions
;__Lib_Conversions.c,0 :: ?ICS?lstr3___Lib_Conversions [4]
0x4EEC	0x00464E49 ;?ICS?lstr3___Lib_Conversions+0
; end of ?ICS?lstr3___Lib_Conversions
;__Lib_I2C_MSP.c,0 :: ?ICS__Lib_I2C_MSP__I2C0_TIMEOUT [4]
0x4EF0	0x00000000 ;?ICS__Lib_I2C_MSP__I2C0_TIMEOUT+0
; end of ?ICS__Lib_I2C_MSP__I2C0_TIMEOUT
;__Lib_I2C_MSP.c,0 :: ?ICS__Lib_I2C_MSP__I2C1_TIMEOUT [4]
0x4EF4	0x00000000 ;?ICS__Lib_I2C_MSP__I2C1_TIMEOUT+0
; end of ?ICS__Lib_I2C_MSP__I2C1_TIMEOUT
;__Lib_I2C_MSP.c,0 :: ?ICS__Lib_I2C_MSP__I2C2_TIMEOUT [4]
0x4EF8	0x00000000 ;?ICS__Lib_I2C_MSP__I2C2_TIMEOUT+0
; end of ?ICS__Lib_I2C_MSP__I2C2_TIMEOUT
;__Lib_I2C_MSP.c,0 :: ?ICS__Lib_I2C_MSP__I2C3_TIMEOUT [4]
0x4EFC	0x00000000 ;?ICS__Lib_I2C_MSP__I2C3_TIMEOUT+0
; end of ?ICS__Lib_I2C_MSP__I2C3_TIMEOUT
;__Lib_I2C_MSP.c,0 :: ?ICS__Lib_I2C_MSP__DELAY_RESTART [1]
0x4F00	0x00 ;?ICS__Lib_I2C_MSP__DELAY_RESTART+0
; end of ?ICS__Lib_I2C_MSP__DELAY_RESTART
;clicker_2_MSP432.c,47 :: __MIKROBUS1_GPIO [96]
0x4F04	0x0000025D ;__MIKROBUS1_GPIO+0
0x4F08	0x00000251 ;__MIKROBUS1_GPIO+4
0x4F0C	0x00000245 ;__MIKROBUS1_GPIO+8
0x4F10	0x00000269 ;__MIKROBUS1_GPIO+12
0x4F14	0x0000028D ;__MIKROBUS1_GPIO+16
0x4F18	0x00000281 ;__MIKROBUS1_GPIO+20
0x4F1C	0x00000275 ;__MIKROBUS1_GPIO+24
0x4F20	0x00000209 ;__MIKROBUS1_GPIO+28
0x4F24	0x000001FD ;__MIKROBUS1_GPIO+32
0x4F28	0x000001F1 ;__MIKROBUS1_GPIO+36
0x4F2C	0x00000215 ;__MIKROBUS1_GPIO+40
0x4F30	0x00000239 ;__MIKROBUS1_GPIO+44
0x4F34	0xFFFFFFFF ;__MIKROBUS1_GPIO+48
0x4F38	0xFFFFFFFF ;__MIKROBUS1_GPIO+52
0x4F3C	0xFFFFFFFF ;__MIKROBUS1_GPIO+56
0x4F40	0xFFFFFFFF ;__MIKROBUS1_GPIO+60
0x4F44	0xFFFFFFFF ;__MIKROBUS1_GPIO+64
0x4F48	0xFFFFFFFF ;__MIKROBUS1_GPIO+68
0x4F4C	0xFFFFFFFF ;__MIKROBUS1_GPIO+72
0x4F50	0xFFFFFFFF ;__MIKROBUS1_GPIO+76
0x4F54	0xFFFFFFFF ;__MIKROBUS1_GPIO+80
0x4F58	0xFFFFFFFF ;__MIKROBUS1_GPIO+84
0x4F5C	0xFFFFFFFF ;__MIKROBUS1_GPIO+88
0x4F60	0xFFFFFFFF ;__MIKROBUS1_GPIO+92
; end of __MIKROBUS1_GPIO
;__Lib_UART_MSP.c,44 :: __Lib_UART_MSP__UART_UCBRSx_TABLE [72]
0x4F64	0x00010000 ;__Lib_UART_MSP__UART_UCBRSx_TABLE+0
0x4F68	0x00040002 ;__Lib_UART_MSP__UART_UCBRSx_TABLE+4
0x4F6C	0x00100008 ;__Lib_UART_MSP__UART_UCBRSx_TABLE+8
0x4F70	0x00110020 ;__Lib_UART_MSP__UART_UCBRSx_TABLE+12
0x4F74	0x00220021 ;__Lib_UART_MSP__UART_UCBRSx_TABLE+16
0x4F78	0x00250044 ;__Lib_UART_MSP__UART_UCBRSx_TABLE+20
0x4F7C	0x004A0049 ;__Lib_UART_MSP__UART_UCBRSx_TABLE+24
0x4F80	0x00920052 ;__Lib_UART_MSP__UART_UCBRSx_TABLE+28
0x4F84	0x00550053 ;__Lib_UART_MSP__UART_UCBRSx_TABLE+32
0x4F88	0x006B00AA ;__Lib_UART_MSP__UART_UCBRSx_TABLE+36
0x4F8C	0x00B500AD ;__Lib_UART_MSP__UART_UCBRSx_TABLE+40
0x4F90	0x00D600B6 ;__Lib_UART_MSP__UART_UCBRSx_TABLE+44
0x4F94	0x00BB00B7 ;__Lib_UART_MSP__UART_UCBRSx_TABLE+48
0x4F98	0x00ED00DD ;__Lib_UART_MSP__UART_UCBRSx_TABLE+52
0x4F9C	0x00BF00EE ;__Lib_UART_MSP__UART_UCBRSx_TABLE+56
0x4FA0	0x00EF00DF ;__Lib_UART_MSP__UART_UCBRSx_TABLE+60
0x4FA4	0x00FB00F7 ;__Lib_UART_MSP__UART_UCBRSx_TABLE+64
0x4FA8	0x00FE00FD ;__Lib_UART_MSP__UART_UCBRSx_TABLE+68
; end of __Lib_UART_MSP__UART_UCBRSx_TABLE
;__Lib_UART_MSP.c,49 :: __Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE [72]
0x4FAC	0x02110000 ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+0
0x4FB0	0x034302CB ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+4
0x4FB4	0x04E403E9 ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+8
0x4FB8	0x06860596 ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+12
0x4FBC	0x08B00863 ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+16
0x4FC0	0x0BB809C7 ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+20
0x4FC4	0x0DF70D07 ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+24
0x4FC8	0x0FA30EA9 ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+28
0x4FCC	0x111A10BE ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+32
0x4FD0	0x1653138A ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+36
0x4FD4	0x186E1773 ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+40
0x4FD8	0x1A0B1920 ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+44
0x4FDC	0x1BEB1B59 ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+48
0x4FE0	0x1EB51D4F ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+52
0x4FE4	0x208D1F44 ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+56
0x4FE8	0x217C2110 ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+60
0x4FEC	0x232C222F ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+64
0x4FF0	0x244823D2 ;__Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE+68
; end of __Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE
;__irgrid2_driver.c,176 :: __irgrid2_driver__exp_coeff_L0 [40]
0x4FF4	0x3F800000 ;__irgrid2_driver__exp_coeff_L0+0
0x4FF8	0x3F317218 ;__irgrid2_driver__exp_coeff_L0+4
0x4FFC	0x3E75FDF0 ;__irgrid2_driver__exp_coeff_L0+8
0x5000	0x3D635847 ;__irgrid2_driver__exp_coeff_L0+12
0x5004	0x3C1D9558 ;__irgrid2_driver__exp_coeff_L0+16
0x5008	0x3AAEC482 ;__irgrid2_driver__exp_coeff_L0+20
0x500C	0x392178A8 ;__irgrid2_driver__exp_coeff_L0+24
0x5010	0x378093EF ;__irgrid2_driver__exp_coeff_L0+28
0x5014	0x35A792A0 ;__irgrid2_driver__exp_coeff_L0+32
0x5018	0x34155646 ;__irgrid2_driver__exp_coeff_L0+36
; end of __irgrid2_driver__exp_coeff_L0
;__irgrid2_driver.c,215 :: __irgrid2_driver__log_coeff_L0 [36]
0x501C	0x2EDBE6FF ;__irgrid2_driver__log_coeff_L0+0
0x5020	0x3F7FFFC4 ;__irgrid2_driver__log_coeff_L0+4
0x5024	0xBEFFEF80 ;__irgrid2_driver__log_coeff_L0+8
0x5028	0x3EA9E190 ;__irgrid2_driver__log_coeff_L0+12
0x502C	0xBE7682EC ;__irgrid2_driver__log_coeff_L0+16
0x5030	0x3E2BAD82 ;__irgrid2_driver__log_coeff_L0+20
0x5034	0xBDC33C0E ;__irgrid2_driver__log_coeff_L0+24
0x5038	0x3D13D187 ;__irgrid2_driver__log_coeff_L0+28
0x503C	0xBBD37841 ;__irgrid2_driver__log_coeff_L0+32
; end of __irgrid2_driver__log_coeff_L0
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0100      [24]    __Lib_I2C_MSP_I2Cx_Is_Idle
0x0118     [216]    __Lib_I2C_MSP_I2Cx_Wait_For_Idle
0x01F0      [12]    clicker_2_MSP432__setTX_1
0x01FC      [12]    clicker_2_MSP432__setRX_1
0x0208      [12]    clicker_2_MSP432__setINT_1
0x0214      [12]    clicker_2_MSP432__setSCL_1
0x0220      [12]    clicker_2_MSP432__setRST_2
0x022C      [12]    clicker_2_MSP432__setAN_2
0x0238      [12]    clicker_2_MSP432__setSDA_1
0x0244      [12]    clicker_2_MSP432__setCS_1
0x0250      [12]    clicker_2_MSP432__setRST_1
0x025C      [12]    clicker_2_MSP432__setAN_1
0x0268      [12]    clicker_2_MSP432__setSCK_1
0x0274      [12]    clicker_2_MSP432__setPWM_1
0x0280      [12]    clicker_2_MSP432__setMOSI_1
0x028C      [12]    clicker_2_MSP432__setMISO_1
0x0298      [12]    clicker_2_MSP432__setSDA_2
0x02A4      [12]    clicker_2_MSP432__setSCL_2
0x02B0      [12]    clicker_2_MSP432__setTX_2
0x02BC      [56]    __Lib_I2C_MSP_I2C_setSlaveAddress
0x02F4      [36]    __Lib_I2C_MSP_I2Cx_Stop
0x0318     [272]    __Lib_I2C_MSP_I2Cx_WriteByte
0x0428     [344]    __Lib_I2C_MSP_I2Cx_Start
0x0580      [12]    clicker_2_MSP432__setMISO_2
0x058C      [12]    clicker_2_MSP432__setSCK_2
0x0598      [12]    clicker_2_MSP432__setCS_2
0x05A4      [12]    clicker_2_MSP432__setMOSI_2
0x05B0      [12]    clicker_2_MSP432__setRX_2
0x05BC      [12]    clicker_2_MSP432__setINT_2
0x05C8      [12]    clicker_2_MSP432__setPWM_2
0x05D4     [124]    __Lib_System_MSP432P_CS_getDCOFrequency
0x0650      [28]    __Lib_GPIO_MSP_GPIO_PMAP_Unlock
0x066C      [16]    __Lib_System_MSP432P_CS_GetDividerValue
0x067C      [44]    __Lib_System_MSP432P_CS_ClearInterruptFlag
0x06A8     [308]    __Lib_System_MSP432P_CS_ComputeClockFrequency
0x07DC      [42]    __irgrid2_driver__frexp
0x0808     [628]    _GPIO_Config
0x0A7C     [568]    __Lib_I2C_MSP_I2Cx_Read
0x0CB4     [388]    __Lib_I2C_MSP_I2Cx_Write
0x0E38      [64]    __irgrid2_driver__eval_poly
0x0E78      [56]    __Lib_UART_MSP_UARTx_GetFreq
0x0EB0     [126]    __irgrid2_driver__floor
0x0F30      [96]    __irgrid2_driver__ldexp
0x0F90     [176]    __Lib_UART_MSP__modf
0x1040      [34]    __Lib_UART_MSP_UARTx_SetMode
0x1064      [74]    __Lib_UART_MSP_UARTx_SetParity
0x10B0     [148]    _GPIO_Alternate_Function_Enable
0x1144      [16]    __Lib_I2C_MSP_I2C_disableModule
0x1154      [20]    __Lib_I2C_MSP_I2C_clearInterruptFlag
0x1168      [16]    __Lib_I2C_MSP_I2C_enableInterrupt
0x1178      [16]    __Lib_I2C_MSP_I2C_enableModule
0x1188      [24]    __Lib_I2C_MSP_I2C_SetClockSource
0x11A0      [16]    __Lib_I2C_MSP_I2C_setMode
0x11B0      [32]    __Lib_UART_MSP_UARTx_SetStopBits
0x11D0      [36]    _I2C2_Read
0x11F4      [36]    _I2C1_Read
0x1218      [36]    _I2C3_Read
0x123C     [244]    __irgrid2_driver__exp
0x1330     [116]    __irgrid2_driver__log
0x13A4      [36]    _I2C0_Read
0x13C8     [176]    _CS_GetClocksFrequency
0x1478      [28]    __Lib_UART_MSP_UARTx_SetSB
0x1494      [36]    _I2C1_Write
0x14B8      [36]    _I2C3_Write
0x14DC      [36]    _I2C2_Write
0x1500      [14]    __Lib_UART_MSP_UARTx_Disable
0x1510      [24]    __Lib_UART_MSP_UARTx_SetClockSource
0x1528      [36]    _I2C0_Write
0x154C      [18]    __Lib_UART_MSP_UARTx_Enable
0x1560      [32]    __Lib_UART_MSP_UARTx_SetDataLength
0x1580     [352]    __Lib_UART_MSP_UARTx_SetBaudRate
0x16E0      [36]    __irgrid2_driver_hal_i2cRead
0x1710      [24]    _Delay_10ms
0x1728     [276]    __Lib_I2C_MSP_I2Cx_Init_Advanced
0x183C     [166]    __irgrid2_driver__pow
0x18E4      [72]    __irgrid2_driver_CheckAdjacentPixels
0x192C      [38]    __Lib_UART_MSP_UARTx_Write
0x1954       [8]    __irgrid2_driver_hal_i2cStart
0x195C      [98]    __Lib_UART_MSP_UARTx_Init
0x19C0      [40]    __irgrid2_driver_hal_i2cWrite
0x19E8      [96]    _UART1_Init
0x1A48      [34]    __irgrid2_driver_ExtractGainParameters
0x1A6C     [200]    _irgrid2_GetVdd
0x1B34      [96]    _UART2_Init
0x1B94      [28]    __irgrid2_driver_CheckEEPROMValid
0x1BB0      [96]    _UART0_Init
0x1C10     [256]    __irgrid2_driver_ExtractPTATParameters
0x1D10      [72]    __irgrid2_driver_ExtractVDDParameters
0x1D58     [370]    __irgrid2_driver_ExtractKvPixelParameters
0x1ECC     [546]    __irgrid2_driver_ExtractKtaPixelParameters
0x20F0     [700]    __irgrid2_driver_ExtractCPParameters
0x23AC     [486]    __irgrid2_driver_ExtractDeviatingPixels
0x2594     [378]    __irgrid2_driver_ExtractCILCParameters
0x2710     [740]    __irgrid2_driver_ExtractOffsetParameters
0x29F4      [24]    __irgrid2_driver_ExtractResolutionParameters
0x2A0C      [84]    __irgrid2_driver_ExtractTgcParameters
0x2A60      [88]    __irgrid2_driver_ExtractKsTaParameters
0x2AB8     [910]    __irgrid2_driver_ExtractAlphaParameters
0x2E48     [380]    __irgrid2_driver_ExtractKsToParameters
0x2FC4      [28]    _UART2_Write
0x2FE0      [28]    _UART1_Write
0x2FFC      [28]    _UART3_Write
0x3018      [32]    _I2C1_Init_Advanced
0x3038      [76]    _irgrid2_writeByte
0x3084      [28]    _UART0_Write
0x30A0     [208]    _irgrid2_readData
0x3170      [28]    _irgrid2_readEEPROM
0x318C      [40]    _strcpy
0x31B4     [260]    _irgrid2_GetTa
0x32B8      [36]    clicker_2_MSP432__i2cInit_1
0x32DC    [1976]    _irgrid2_CalculateTo
0x3A94      [36]    clicker_2_MSP432__log_init1
0x3AB8      [24]    __irgrid2_driver_hal_i2cMap
0x3AD0       [2]    __irgrid2_driver_hal_gpioMap
0x3AD4     [178]    _irgrid2_getFrameData
0x3B88      [36]    clicker_2_MSP432__log_init2
0x3BAC      [70]    _irgrid2_setRefreshRate
0x3BF4      [36]    clicker_2_MSP432__log_initUart
0x3C18     [150]    _irgrid2_ExtractParameters
0x3CB0      [36]    clicker_2_MSP432__i2cInit_2
0x3CE0      [24]    _Delay_100ms
0x3CF8      [32]    clicker_2_MSP432__log_write
0x3D18     [124]    _irgrid2_getPixelTemperature
0x3D94     [492]    _FloatToStr
0x3F80      [24]    _Delay_1ms
0x3F98      [58]    _mikrobus_logInit
0x3FD4      [46]    _mikrobus_i2cInit
0x4004      [48]    _irgrid2_init
0x4034     [112]    _mikrobus_logWrite
0x40A4      [36]    _irgrid2_i2cDriverInit
0x40D0      [24]    _Delay_80us
0x40E8      [20]    ___CC2DW
0x40FC      [52]    _applicationInit
0x4130      [24]    _Delay_1us
0x4150      [76]    _systemInit
0x41A0     [240]    _applicationTask
0x4290      [58]    ___FillZeros
0x42CC       [8]    ___GenExcept
0x42D4      [42]    ___EnableFPU
0x4300      [20]    __Lib_System_MSP432P_InitialSetUpFosc
0x4314      [36]    _main
0x4338     [324]    __Lib_System_MSP432P_InitialSetUpRCCRCC2
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [4]    FARG___irgrid2_driver__log_x
0x0000       [4]    FARG___irgrid2_driver__eval_poly_x
0x0000       [4]    FARG___irgrid2_driver__exp_x
0x0000       [8]    FARG_LongDoubleToStr_dnum
0x0000       [4]    FARG_FloatToStr_fnum
0x0000       [4]    FARG___Lib_UART_MSP__modf_val
0x0000       [4]    FARG___irgrid2_driver__pow_x
0x0000       [4]    FARG_irgrid2_CalculateTo_emissivity
0x0000       [4]    FARG___irgrid2_driver__ldexp_value
0x0000       [4]    FARG___irgrid2_driver__floor_x
0x0000       [4]    FARG___irgrid2_driver__frexp_value
0x0004       [4]    FARG_irgrid2_CalculateTo_tr
0x0004       [4]    FARG___irgrid2_driver__pow_y
0x20000000      [26]    ?lstr2_Click_IR_Grid2_MSP
0x2000001A       [2]    ?lstr4_Click_IR_Grid2_MSP
0x2000001C       [4]    _Ta
0x20000020      [23]    ?lstr3_Click_IR_Grid2_MSP
0x20000037      [39]    ?lstr5_Click_IR_Grid2_MSP
0x2000005E       [2]    ?lstr6_Click_IR_Grid2_MSP
0x20000060       [2]    ?lstr7_Click_IR_Grid2_MSP
0x20000062       [2]    ?lstr8_Click_IR_Grid2_MSP
0x20000064      [22]    ?lstr1_Click_IR_Grid2_MSP
0x2000007A       [4]    ?lstr1___Lib_Conversions
0x2000007E       [2]    ?lstr2___Lib_Conversions
0x20000080       [4]    ?lstr3___Lib_Conversions
0x20000084       [4]    __Lib_I2C_MSP__I2C0_TIMEOUT
0x20000088       [4]    __Lib_I2C_MSP__I2C1_TIMEOUT
0x2000008C       [4]    __Lib_I2C_MSP__I2C2_TIMEOUT
0x20000090       [4]    __Lib_I2C_MSP__I2C3_TIMEOUT
0x20000094       [1]    __Lib_I2C_MSP__DELAY_RESTART
0x20000095       [1]    __irgrid2_driver__slaveAddress
0x20000096       [2]    _cnt
0x20000098       [4]    __Lib_System_MSP432P_CS_VLOCLK_FREQUENCY
0x2000009C       [4]    __Lib_System_MSP432P_CS_MODCLK_FREQUENCY
0x200000A0       [4]    _logger
0x200000A4    [3072]    _pixelTemp
0x20000CA4     [100]    _demoText
0x20000D08       [4]    __irgrid2_driver_fp_i2cWrite
0x20000D0C       [4]    __irgrid2_driver_fp_i2cRead
0x20000D10   [10864]    __irgrid2_driver_mlx90640
0x20003780       [4]    __Lib_I2C_MSP_I2C_Timeout_Ptr
0x20003784       [4]    _I2C0_timeout_Ptr
0x20003788       [4]    _I2C1_timeout_Ptr
0x2000378C       [4]    _I2C2_timeout_Ptr
0x20003790       [4]    _I2C3_timeout_Ptr
0x20003794       [4]    _I2C_Read_Ptr
0x20003798       [4]    _I2C_Write_Ptr
0x2000379C       [4]    ___System_CLOCK_IN_KHZ
0x200037A0       [4]    __Lib_System_MSP432P_lfxtFreq
0x200037A4       [4]    __Lib_System_MSP432P_hfxtFreq
0x200037A8       [4]    _UART_Wr_Ptr
0x200037AC       [4]    _UART_Rd_Ptr
0x200037B0       [4]    _UART_Rdy_Ptr
0x200037B4       [4]    _UART_Tx_Idle_Ptr
0x200037B8    [1664]    irgrid2_init_eeMLX90640_L0
0x20003E38    [1668]    irgrid2_getPixelTemperature_mlx90640Frame_L0
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x1704       [4]    ?ICS__Lib_System_MSP432P_CS_VLOCLK_FREQUENCY
0x1708       [4]    ?ICS__Lib_System_MSP432P_CS_MODCLK_FREQUENCY
0x170C       [4]    __IRGRID2_I2C_CFG
0x3CD4       [8]    __MIKROBUS1_I2C
0x447C    [1664]    ?ICSirgrid2_readData_readReg_L0
0x4AFC     [220]    __GPIO_MODULE_UARTA2_B23
0x4BD8     [220]    __GPIO_MODULE_UARTA1_A1011
0x4CB4     [220]    __GPIO_MODULE_UARTA0_A23
0x4D90     [220]    __GPIO_MODULE_I2CB1_C1213
0x4E6C      [26]    ?ICS?lstr2_Click_IR_Grid2_MSP
0x4E86       [2]    ?ICS?lstr4_Click_IR_Grid2_MSP
0x4E88       [4]    ?ICS_Ta
0x4E8C      [23]    ?ICS?lstr3_Click_IR_Grid2_MSP
0x4EA3      [39]    ?ICS?lstr5_Click_IR_Grid2_MSP
0x4ECA       [2]    ?ICS?lstr6_Click_IR_Grid2_MSP
0x4ECC       [2]    ?ICS?lstr7_Click_IR_Grid2_MSP
0x4ECE       [2]    ?ICS?lstr8_Click_IR_Grid2_MSP
0x4ED0      [22]    ?ICS?lstr1_Click_IR_Grid2_MSP
0x4EE6       [4]    ?ICS?lstr1___Lib_Conversions
0x4EEA       [2]    ?ICS?lstr2___Lib_Conversions
0x4EEC       [4]    ?ICS?lstr3___Lib_Conversions
0x4EF0       [4]    ?ICS__Lib_I2C_MSP__I2C0_TIMEOUT
0x4EF4       [4]    ?ICS__Lib_I2C_MSP__I2C1_TIMEOUT
0x4EF8       [4]    ?ICS__Lib_I2C_MSP__I2C2_TIMEOUT
0x4EFC       [4]    ?ICS__Lib_I2C_MSP__I2C3_TIMEOUT
0x4F00       [1]    ?ICS__Lib_I2C_MSP__DELAY_RESTART
0x4F04      [96]    __MIKROBUS1_GPIO
0x4F64      [72]    __Lib_UART_MSP__UART_UCBRSx_TABLE
0x4FAC      [72]    __Lib_UART_MSP__UART_UCBRSx_FRACTIONAL_TABLE
0x4FF4      [40]    __irgrid2_driver__exp_coeff_L0
0x501C      [36]    __irgrid2_driver__log_coeff_L0
